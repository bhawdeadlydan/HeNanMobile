/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class Good : TBase
{
  private int _Num;
  private string _Unit;
  private int _Expected_Quantity;
  private List<string> _CartonNums;
  private string _InCode;
  private string _ProjectCode;

  public string Code { get; set; }

  public int Num
  {
    get
    {
      return _Num;
    }
    set
    {
      __isset.Num = true;
      this._Num = value;
    }
  }

  public bool Is_Bom { get; set; }

  public string Detail { get; set; }

  public string Unit
  {
    get
    {
      return _Unit;
    }
    set
    {
      __isset.Unit = true;
      this._Unit = value;
    }
  }

  public int Expected_Quantity
  {
    get
    {
      return _Expected_Quantity;
    }
    set
    {
      __isset.Expected_Quantity = true;
      this._Expected_Quantity = value;
    }
  }

  public List<string> CartonNums
  {
    get
    {
      return _CartonNums;
    }
    set
    {
      __isset.CartonNums = true;
      this._CartonNums = value;
    }
  }

  public string InCode
  {
    get
    {
      return _InCode;
    }
    set
    {
      __isset.InCode = true;
      this._InCode = value;
    }
  }

  public string ProjectCode
  {
    get
    {
      return _ProjectCode;
    }
    set
    {
      __isset.ProjectCode = true;
      this._ProjectCode = value;
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool Num;
    public bool Unit;
    public bool Expected_Quantity;
    public bool CartonNums;
    public bool InCode;
    public bool ProjectCode;
  }

  public Good() {
    this._Num = 0;
    this.__isset.Num = true;
    this._Unit = "N";
    this.__isset.Unit = true;
    this._Expected_Quantity = 0;
    this.__isset.Expected_Quantity = true;
    this._InCode = "";
    this.__isset.InCode = true;
    this._ProjectCode = "";
    this.__isset.ProjectCode = true;
  }

  public Good(string Code, bool Is_Bom, string Detail) : this() {
    this.Code = Code;
    this.Is_Bom = Is_Bom;
    this.Detail = Detail;
  }

  public void Read (TProtocol iprot)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      bool isset_Code = false;
      bool isset_Is_Bom = false;
      bool isset_Detail = false;
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              Code = iprot.ReadString();
              isset_Code = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              Num = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.Bool) {
              Is_Bom = iprot.ReadBool();
              isset_Is_Bom = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.String) {
              Detail = iprot.ReadString();
              isset_Detail = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.String) {
              Unit = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.I32) {
              Expected_Quantity = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.List) {
              {
                CartonNums = new List<string>();
                TList _list0 = iprot.ReadListBegin();
                for( int _i1 = 0; _i1 < _list0.Count; ++_i1)
                {
                  string _elem2;
                  _elem2 = iprot.ReadString();
                  CartonNums.Add(_elem2);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.String) {
              InCode = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.String) {
              ProjectCode = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
      if (!isset_Code)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      if (!isset_Is_Bom)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      if (!isset_Detail)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public void Write(TProtocol oprot) {
    oprot.IncrementRecursionDepth();
    try
    {
      TStruct struc = new TStruct("Good");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      field.Name = "Code";
      field.Type = TType.String;
      field.ID = 1;
      oprot.WriteFieldBegin(field);
      oprot.WriteString(Code);
      oprot.WriteFieldEnd();
      if (__isset.Num) {
        field.Name = "Num";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Num);
        oprot.WriteFieldEnd();
      }
      field.Name = "Is_Bom";
      field.Type = TType.Bool;
      field.ID = 3;
      oprot.WriteFieldBegin(field);
      oprot.WriteBool(Is_Bom);
      oprot.WriteFieldEnd();
      field.Name = "Detail";
      field.Type = TType.String;
      field.ID = 4;
      oprot.WriteFieldBegin(field);
      oprot.WriteString(Detail);
      oprot.WriteFieldEnd();
      if (Unit != null && __isset.Unit) {
        field.Name = "Unit";
        field.Type = TType.String;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Unit);
        oprot.WriteFieldEnd();
      }
      if (__isset.Expected_Quantity) {
        field.Name = "Expected_Quantity";
        field.Type = TType.I32;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Expected_Quantity);
        oprot.WriteFieldEnd();
      }
      if (CartonNums != null && __isset.CartonNums) {
        field.Name = "CartonNums";
        field.Type = TType.List;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.String, CartonNums.Count));
          foreach (string _iter3 in CartonNums)
          {
            oprot.WriteString(_iter3);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (InCode != null && __isset.InCode) {
        field.Name = "InCode";
        field.Type = TType.String;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(InCode);
        oprot.WriteFieldEnd();
      }
      if (ProjectCode != null && __isset.ProjectCode) {
        field.Name = "ProjectCode";
        field.Type = TType.String;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(ProjectCode);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("Good(");
    __sb.Append(", Code: ");
    __sb.Append(Code);
    if (__isset.Num) {
      __sb.Append(", Num: ");
      __sb.Append(Num);
    }
    __sb.Append(", Is_Bom: ");
    __sb.Append(Is_Bom);
    __sb.Append(", Detail: ");
    __sb.Append(Detail);
    if (Unit != null && __isset.Unit) {
      __sb.Append(", Unit: ");
      __sb.Append(Unit);
    }
    if (__isset.Expected_Quantity) {
      __sb.Append(", Expected_Quantity: ");
      __sb.Append(Expected_Quantity);
    }
    if (CartonNums != null && __isset.CartonNums) {
      __sb.Append(", CartonNums: ");
      __sb.Append(CartonNums);
    }
    if (InCode != null && __isset.InCode) {
      __sb.Append(", InCode: ");
      __sb.Append(InCode);
    }
    if (ProjectCode != null && __isset.ProjectCode) {
      __sb.Append(", ProjectCode: ");
      __sb.Append(ProjectCode);
    }
    __sb.Append(")");
    return __sb.ToString();
  }

}

