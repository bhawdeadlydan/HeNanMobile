/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class POS : TBase
{

  public string Apply_Doc_Code { get; set; }

  public string Apply_Person { get; set; }

  public string Apply_Unit { get; set; }

  public string Project_Code { get; set; }

  public string Apply_Date { get; set; }

  public string Receiver { get; set; }

  public POS() {
  }

  public POS(string Apply_Doc_Code, string Apply_Person, string Apply_Unit, string Project_Code, string Apply_Date, string Receiver) : this() {
    this.Apply_Doc_Code = Apply_Doc_Code;
    this.Apply_Person = Apply_Person;
    this.Apply_Unit = Apply_Unit;
    this.Project_Code = Project_Code;
    this.Apply_Date = Apply_Date;
    this.Receiver = Receiver;
  }

  public void Read (TProtocol iprot)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      bool isset_Apply_Doc_Code = false;
      bool isset_Apply_Person = false;
      bool isset_Apply_Unit = false;
      bool isset_Project_Code = false;
      bool isset_Apply_Date = false;
      bool isset_Receiver = false;
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              Apply_Doc_Code = iprot.ReadString();
              isset_Apply_Doc_Code = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              Apply_Person = iprot.ReadString();
              isset_Apply_Person = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              Apply_Unit = iprot.ReadString();
              isset_Apply_Unit = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.String) {
              Project_Code = iprot.ReadString();
              isset_Project_Code = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.String) {
              Apply_Date = iprot.ReadString();
              isset_Apply_Date = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.String) {
              Receiver = iprot.ReadString();
              isset_Receiver = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
      if (!isset_Apply_Doc_Code)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      if (!isset_Apply_Person)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      if (!isset_Apply_Unit)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      if (!isset_Project_Code)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      if (!isset_Apply_Date)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      if (!isset_Receiver)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public void Write(TProtocol oprot) {
    oprot.IncrementRecursionDepth();
    try
    {
      TStruct struc = new TStruct("POS");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      field.Name = "Apply_Doc_Code";
      field.Type = TType.String;
      field.ID = 1;
      oprot.WriteFieldBegin(field);
      oprot.WriteString(Apply_Doc_Code);
      oprot.WriteFieldEnd();
      field.Name = "Apply_Person";
      field.Type = TType.String;
      field.ID = 2;
      oprot.WriteFieldBegin(field);
      oprot.WriteString(Apply_Person);
      oprot.WriteFieldEnd();
      field.Name = "Apply_Unit";
      field.Type = TType.String;
      field.ID = 3;
      oprot.WriteFieldBegin(field);
      oprot.WriteString(Apply_Unit);
      oprot.WriteFieldEnd();
      field.Name = "Project_Code";
      field.Type = TType.String;
      field.ID = 4;
      oprot.WriteFieldBegin(field);
      oprot.WriteString(Project_Code);
      oprot.WriteFieldEnd();
      field.Name = "Apply_Date";
      field.Type = TType.String;
      field.ID = 5;
      oprot.WriteFieldBegin(field);
      oprot.WriteString(Apply_Date);
      oprot.WriteFieldEnd();
      field.Name = "Receiver";
      field.Type = TType.String;
      field.ID = 6;
      oprot.WriteFieldBegin(field);
      oprot.WriteString(Receiver);
      oprot.WriteFieldEnd();
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("POS(");
    __sb.Append(", Apply_Doc_Code: ");
    __sb.Append(Apply_Doc_Code);
    __sb.Append(", Apply_Person: ");
    __sb.Append(Apply_Person);
    __sb.Append(", Apply_Unit: ");
    __sb.Append(Apply_Unit);
    __sb.Append(", Project_Code: ");
    __sb.Append(Project_Code);
    __sb.Append(", Apply_Date: ");
    __sb.Append(Apply_Date);
    __sb.Append(", Receiver: ");
    __sb.Append(Receiver);
    __sb.Append(")");
    return __sb.ToString();
  }

}

