/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class LocationInfo : TBase
{
  private List<string> _CartonNums;

  public int ID { get; set; }

  public int Num { get; set; }

  public string Area { get; set; }

  public int Location { get; set; }

  public List<string> CartonNums
  {
    get
    {
      return _CartonNums;
    }
    set
    {
      __isset.CartonNums = true;
      this._CartonNums = value;
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool CartonNums;
  }

  public LocationInfo() {
  }

  public LocationInfo(int ID, int Num, string Area, int Location) : this() {
    this.ID = ID;
    this.Num = Num;
    this.Area = Area;
    this.Location = Location;
  }

  public void Read (TProtocol iprot)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      bool isset_ID = false;
      bool isset_Num = false;
      bool isset_Area = false;
      bool isset_Location = false;
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              ID = iprot.ReadI32();
              isset_ID = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              Num = iprot.ReadI32();
              isset_Num = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              Area = iprot.ReadString();
              isset_Area = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I32) {
              Location = iprot.ReadI32();
              isset_Location = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.List) {
              {
                CartonNums = new List<string>();
                TList _list4 = iprot.ReadListBegin();
                for( int _i5 = 0; _i5 < _list4.Count; ++_i5)
                {
                  string _elem6;
                  _elem6 = iprot.ReadString();
                  CartonNums.Add(_elem6);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
      if (!isset_ID)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      if (!isset_Num)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      if (!isset_Area)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      if (!isset_Location)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public void Write(TProtocol oprot) {
    oprot.IncrementRecursionDepth();
    try
    {
      TStruct struc = new TStruct("LocationInfo");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      field.Name = "ID";
      field.Type = TType.I32;
      field.ID = 1;
      oprot.WriteFieldBegin(field);
      oprot.WriteI32(ID);
      oprot.WriteFieldEnd();
      field.Name = "Num";
      field.Type = TType.I32;
      field.ID = 2;
      oprot.WriteFieldBegin(field);
      oprot.WriteI32(Num);
      oprot.WriteFieldEnd();
      field.Name = "Area";
      field.Type = TType.String;
      field.ID = 3;
      oprot.WriteFieldBegin(field);
      oprot.WriteString(Area);
      oprot.WriteFieldEnd();
      field.Name = "Location";
      field.Type = TType.I32;
      field.ID = 4;
      oprot.WriteFieldBegin(field);
      oprot.WriteI32(Location);
      oprot.WriteFieldEnd();
      if (CartonNums != null && __isset.CartonNums) {
        field.Name = "CartonNums";
        field.Type = TType.List;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.String, CartonNums.Count));
          foreach (string _iter7 in CartonNums)
          {
            oprot.WriteString(_iter7);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("LocationInfo(");
    __sb.Append(", ID: ");
    __sb.Append(ID);
    __sb.Append(", Num: ");
    __sb.Append(Num);
    __sb.Append(", Area: ");
    __sb.Append(Area);
    __sb.Append(", Location: ");
    __sb.Append(Location);
    if (CartonNums != null && __isset.CartonNums) {
      __sb.Append(", CartonNums: ");
      __sb.Append(CartonNums);
    }
    __sb.Append(")");
    return __sb.ToString();
  }

}

