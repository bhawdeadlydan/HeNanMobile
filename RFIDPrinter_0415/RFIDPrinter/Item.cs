/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class Item : TBase
{
  private string _itemName;
  private string _itemCode;
  private string _itemNum;
  private string _itemUnit;
  private string _EPC;

  public string ItemName
  {
    get
    {
      return _itemName;
    }
    set
    {
      __isset.itemName = true;
      this._itemName = value;
    }
  }

  public string ItemCode
  {
    get
    {
      return _itemCode;
    }
    set
    {
      __isset.itemCode = true;
      this._itemCode = value;
    }
  }

  public string ItemNum
  {
    get
    {
      return _itemNum;
    }
    set
    {
      __isset.itemNum = true;
      this._itemNum = value;
    }
  }

  public string ItemUnit
  {
    get
    {
      return _itemUnit;
    }
    set
    {
      __isset.itemUnit = true;
      this._itemUnit = value;
    }
  }

  public string EPC
  {
    get
    {
      return _EPC;
    }
    set
    {
      __isset.EPC = true;
      this._EPC = value;
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool itemName;
    public bool itemCode;
    public bool itemNum;
    public bool itemUnit;
    public bool EPC;
  }

  public Item() {
  }

  public void Read (TProtocol iprot)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              ItemName = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              ItemCode = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              ItemNum = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.String) {
              ItemUnit = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.String) {
              EPC = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public void Write(TProtocol oprot) {
    oprot.IncrementRecursionDepth();
    try
    {
      TStruct struc = new TStruct("Item");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (ItemName != null && __isset.itemName) {
        field.Name = "itemName";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(ItemName);
        oprot.WriteFieldEnd();
      }
      if (ItemCode != null && __isset.itemCode) {
        field.Name = "itemCode";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(ItemCode);
        oprot.WriteFieldEnd();
      }
      if (ItemNum != null && __isset.itemNum) {
        field.Name = "itemNum";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(ItemNum);
        oprot.WriteFieldEnd();
      }
      if (ItemUnit != null && __isset.itemUnit) {
        field.Name = "itemUnit";
        field.Type = TType.String;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(ItemUnit);
        oprot.WriteFieldEnd();
      }
      if (EPC != null && __isset.EPC) {
        field.Name = "EPC";
        field.Type = TType.String;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(EPC);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("Item(");
    bool __first = true;
    if (ItemName != null && __isset.itemName) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("ItemName: ");
      __sb.Append(ItemName);
    }
    if (ItemCode != null && __isset.itemCode) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("ItemCode: ");
      __sb.Append(ItemCode);
    }
    if (ItemNum != null && __isset.itemNum) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("ItemNum: ");
      __sb.Append(ItemNum);
    }
    if (ItemUnit != null && __isset.itemUnit) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("ItemUnit: ");
      __sb.Append(ItemUnit);
    }
    if (EPC != null && __isset.EPC) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("EPC: ");
      __sb.Append(EPC);
    }
    __sb.Append(")");
    return __sb.ToString();
  }

}

