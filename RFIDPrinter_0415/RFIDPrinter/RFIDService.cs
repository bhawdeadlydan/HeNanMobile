/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

public partial class RFIDService {
  public interface Iface {
    List<ASN> getReceivingSheets();
    #if SILVERLIGHT
    IAsyncResult Begin_getReceivingSheets(AsyncCallback callback, object state);
    List<ASN> End_getReceivingSheets(IAsyncResult asyncResult);
    #endif
    List<Good> getGoodsListByCode(string Code, bool printable);
    #if SILVERLIGHT
    IAsyncResult Begin_getGoodsListByCode(AsyncCallback callback, object state, string Code, bool printable);
    List<Good> End_getGoodsListByCode(IAsyncResult asyncResult);
    #endif
    bool printTag(string Code);
    #if SILVERLIGHT
    IAsyncResult Begin_printTag(AsyncCallback callback, object state, string Code);
    bool End_printTag(IAsyncResult asyncResult);
    #endif
    string getCodeByCNum(string CNum);
    #if SILVERLIGHT
    IAsyncResult Begin_getCodeByCNum(AsyncCallback callback, object state, string CNum);
    string End_getCodeByCNum(IAsyncResult asyncResult);
    #endif
    bool bindLocationAndGoods(int LocationID, List<string> CNums);
    #if SILVERLIGHT
    IAsyncResult Begin_bindLocationAndGoods(AsyncCallback callback, object state, int LocationID, List<string> CNums);
    bool End_bindLocationAndGoods(IAsyncResult asyncResult);
    #endif
    List<POS> getApplySheets();
    #if SILVERLIGHT
    IAsyncResult Begin_getApplySheets(AsyncCallback callback, object state);
    List<POS> End_getApplySheets(IAsyncResult asyncResult);
    #endif
    List<POS> getOutApplySheets();
    #if SILVERLIGHT
    IAsyncResult Begin_getOutApplySheets(AsyncCallback callback, object state);
    List<POS> End_getOutApplySheets(IAsyncResult asyncResult);
    #endif
    POS getPOSInfoByApplyDocCode(string ApplyDocCode);
    #if SILVERLIGHT
    IAsyncResult Begin_getPOSInfoByApplyDocCode(AsyncCallback callback, object state, string ApplyDocCode);
    POS End_getPOSInfoByApplyDocCode(IAsyncResult asyncResult);
    #endif
    List<Good> getGoodsListByApplyDocCode(string ApplyDocCode);
    #if SILVERLIGHT
    IAsyncResult Begin_getGoodsListByApplyDocCode(AsyncCallback callback, object state, string ApplyDocCode);
    List<Good> End_getGoodsListByApplyDocCode(IAsyncResult asyncResult);
    #endif
    bool confirmRetrieval(string ApplyDocCode, Dictionary<string, int> cartons);
    #if SILVERLIGHT
    IAsyncResult Begin_confirmRetrieval(AsyncCallback callback, object state, string ApplyDocCode, Dictionary<string, int> cartons);
    bool End_confirmRetrieval(IAsyncResult asyncResult);
    #endif
    bool confirmReceiving(string Code);
    #if SILVERLIGHT
    IAsyncResult Begin_confirmReceiving(AsyncCallback callback, object state, string Code);
    bool End_confirmReceiving(IAsyncResult asyncResult);
    #endif
    Good getGoodByCNum(string CNum);
    #if SILVERLIGHT
    IAsyncResult Begin_getGoodByCNum(AsyncCallback callback, object state, string CNum);
    Good End_getGoodByCNum(IAsyncResult asyncResult);
    #endif
    List<LocationInfo> getLocationListByItemErpCode(string ItemERPCode, bool isBom);
    #if SILVERLIGHT
    IAsyncResult Begin_getLocationListByItemErpCode(AsyncCallback callback, object state, string ItemERPCode, bool isBom);
    List<LocationInfo> End_getLocationListByItemErpCode(IAsyncResult asyncResult);
    #endif
    List<Good> getGoodsByLocation(int Location);
    #if SILVERLIGHT
    IAsyncResult Begin_getGoodsByLocation(AsyncCallback callback, object state, int Location);
    List<Good> End_getGoodsByLocation(IAsyncResult asyncResult);
    #endif
    string getApplyDocCodeByCNum(string CNum);
    #if SILVERLIGHT
    IAsyncResult Begin_getApplyDocCodeByCNum(AsyncCallback callback, object state, string CNum);
    string End_getApplyDocCodeByCNum(IAsyncResult asyncResult);
    #endif
    bool confirmInventory(List<check> checks);
    #if SILVERLIGHT
    IAsyncResult Begin_confirmInventory(AsyncCallback callback, object state, List<check> checks);
    bool End_confirmInventory(IAsyncResult asyncResult);
    #endif
    bool confirmArrive(string charge, string Time, string Position, string Type, string PosApplyDocCode, double longitude, double latitude);
    #if SILVERLIGHT
    IAsyncResult Begin_confirmArrive(AsyncCallback callback, object state, string charge, string Time, string Position, string Type, string PosApplyDocCode, double longitude, double latitude);
    bool End_confirmArrive(IAsyncResult asyncResult);
    #endif
    bool stagingSiteCheckout(string applyPerson, string constructPos, string constructUnit, string materialCode, int num);
    #if SILVERLIGHT
    IAsyncResult Begin_stagingSiteCheckout(AsyncCallback callback, object state, string applyPerson, string constructPos, string constructUnit, string materialCode, int num);
    bool End_stagingSiteCheckout(IAsyncResult asyncResult);
    #endif
    List<transportInfo> getTransportInfo();
    #if SILVERLIGHT
    IAsyncResult Begin_getTransportInfo(AsyncCallback callback, object state);
    List<transportInfo> End_getTransportInfo(IAsyncResult asyncResult);
    #endif
    List<stagingInfo> getStagingInfo(string constructUnit);
    #if SILVERLIGHT
    IAsyncResult Begin_getStagingInfo(AsyncCallback callback, object state, string constructUnit);
    List<stagingInfo> End_getStagingInfo(IAsyncResult asyncResult);
    #endif
    List<inStagingInfo> getInStagingInfo(string constructUnit);
    #if SILVERLIGHT
    IAsyncResult Begin_getInStagingInfo(AsyncCallback callback, object state, string constructUnit);
    List<inStagingInfo> End_getInStagingInfo(IAsyncResult asyncResult);
    #endif
    bool addPic(string ApplyDocCode, List<string> URL);
    #if SILVERLIGHT
    IAsyncResult Begin_addPic(AsyncCallback callback, object state, string ApplyDocCode, List<string> URL);
    bool End_addPic(IAsyncResult asyncResult);
    #endif
    List<string> getPicsByApplyDocCode(string ApplyDocCode);
    #if SILVERLIGHT
    IAsyncResult Begin_getPicsByApplyDocCode(AsyncCallback callback, object state, string ApplyDocCode);
    List<string> End_getPicsByApplyDocCode(IAsyncResult asyncResult);
    #endif
    bool toPrint();
    #if SILVERLIGHT
    IAsyncResult Begin_toPrint(AsyncCallback callback, object state);
    bool End_toPrint(IAsyncResult asyncResult);
    #endif
    List<Data> callPrinter();
    #if SILVERLIGHT
    IAsyncResult Begin_callPrinter(AsyncCallback callback, object state);
    List<Data> End_callPrinter(IAsyncResult asyncResult);
    #endif
  }

  public class Client : IDisposable, Iface {
    public Client(TProtocol prot) : this(prot, prot)
    {
    }

    public Client(TProtocol iprot, TProtocol oprot)
    {
      iprot_ = iprot;
      oprot_ = oprot;
    }

    protected TProtocol iprot_;
    protected TProtocol oprot_;
    protected int seqid_;

    public TProtocol InputProtocol
    {
      get { return iprot_; }
    }
    public TProtocol OutputProtocol
    {
      get { return oprot_; }
    }


    #region " IDisposable Support "
    private bool _IsDisposed;

    // IDisposable
    public void Dispose()
    {
      Dispose(true);
    }
    

    protected virtual void Dispose(bool disposing)
    {
      if (!_IsDisposed)
      {
        if (disposing)
        {
          if (iprot_ != null)
          {
            ((IDisposable)iprot_).Dispose();
          }
          if (oprot_ != null)
          {
            ((IDisposable)oprot_).Dispose();
          }
        }
      }
      _IsDisposed = true;
    }
    #endregion


    
    #if SILVERLIGHT
    public IAsyncResult Begin_getReceivingSheets(AsyncCallback callback, object state)
    {
      return send_getReceivingSheets(callback, state);
    }

    public List<ASN> End_getReceivingSheets(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getReceivingSheets();
    }

    #endif

    public List<ASN> getReceivingSheets()
    {
      #if !SILVERLIGHT
      send_getReceivingSheets();
      return recv_getReceivingSheets();

      #else
      var asyncResult = Begin_getReceivingSheets(null, null);
      return End_getReceivingSheets(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getReceivingSheets(AsyncCallback callback, object state)
    #else
    public void send_getReceivingSheets()
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("getReceivingSheets", TMessageType.Call, seqid_));
      getReceivingSheets_args args = new getReceivingSheets_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<ASN> recv_getReceivingSheets()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getReceivingSheets_result result = new getReceivingSheets_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getReceivingSheets failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_getGoodsListByCode(AsyncCallback callback, object state, string Code, bool printable)
    {
      return send_getGoodsListByCode(callback, state, Code, printable);
    }

    public List<Good> End_getGoodsListByCode(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getGoodsListByCode();
    }

    #endif

    public List<Good> getGoodsListByCode(string Code, bool printable)
    {
      #if !SILVERLIGHT
      send_getGoodsListByCode(Code, printable);
      return recv_getGoodsListByCode();

      #else
      var asyncResult = Begin_getGoodsListByCode(null, null, Code, printable);
      return End_getGoodsListByCode(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getGoodsListByCode(AsyncCallback callback, object state, string Code, bool printable)
    #else
    public void send_getGoodsListByCode(string Code, bool printable)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("getGoodsListByCode", TMessageType.Call, seqid_));
      getGoodsListByCode_args args = new getGoodsListByCode_args();
      args.Code = Code;
      args.Printable = printable;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<Good> recv_getGoodsListByCode()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getGoodsListByCode_result result = new getGoodsListByCode_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getGoodsListByCode failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_printTag(AsyncCallback callback, object state, string Code)
    {
      return send_printTag(callback, state, Code);
    }

    public bool End_printTag(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_printTag();
    }

    #endif

    public bool printTag(string Code)
    {
      #if !SILVERLIGHT
      send_printTag(Code);
      return recv_printTag();

      #else
      var asyncResult = Begin_printTag(null, null, Code);
      return End_printTag(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_printTag(AsyncCallback callback, object state, string Code)
    #else
    public void send_printTag(string Code)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("printTag", TMessageType.Call, seqid_));
      printTag_args args = new printTag_args();
      args.Code = Code;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public bool recv_printTag()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      printTag_result result = new printTag_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "printTag failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_getCodeByCNum(AsyncCallback callback, object state, string CNum)
    {
      return send_getCodeByCNum(callback, state, CNum);
    }

    public string End_getCodeByCNum(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getCodeByCNum();
    }

    #endif

    public string getCodeByCNum(string CNum)
    {
      #if !SILVERLIGHT
      send_getCodeByCNum(CNum);
      return recv_getCodeByCNum();

      #else
      var asyncResult = Begin_getCodeByCNum(null, null, CNum);
      return End_getCodeByCNum(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getCodeByCNum(AsyncCallback callback, object state, string CNum)
    #else
    public void send_getCodeByCNum(string CNum)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("getCodeByCNum", TMessageType.Call, seqid_));
      getCodeByCNum_args args = new getCodeByCNum_args();
      args.CNum = CNum;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public string recv_getCodeByCNum()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getCodeByCNum_result result = new getCodeByCNum_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getCodeByCNum failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_bindLocationAndGoods(AsyncCallback callback, object state, int LocationID, List<string> CNums)
    {
      return send_bindLocationAndGoods(callback, state, LocationID, CNums);
    }

    public bool End_bindLocationAndGoods(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_bindLocationAndGoods();
    }

    #endif

    public bool bindLocationAndGoods(int LocationID, List<string> CNums)
    {
      #if !SILVERLIGHT
      send_bindLocationAndGoods(LocationID, CNums);
      return recv_bindLocationAndGoods();

      #else
      var asyncResult = Begin_bindLocationAndGoods(null, null, LocationID, CNums);
      return End_bindLocationAndGoods(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_bindLocationAndGoods(AsyncCallback callback, object state, int LocationID, List<string> CNums)
    #else
    public void send_bindLocationAndGoods(int LocationID, List<string> CNums)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("bindLocationAndGoods", TMessageType.Call, seqid_));
      bindLocationAndGoods_args args = new bindLocationAndGoods_args();
      args.LocationID = LocationID;
      args.CNums = CNums;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public bool recv_bindLocationAndGoods()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      bindLocationAndGoods_result result = new bindLocationAndGoods_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "bindLocationAndGoods failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_getApplySheets(AsyncCallback callback, object state)
    {
      return send_getApplySheets(callback, state);
    }

    public List<POS> End_getApplySheets(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getApplySheets();
    }

    #endif

    public List<POS> getApplySheets()
    {
      #if !SILVERLIGHT
      send_getApplySheets();
      return recv_getApplySheets();

      #else
      var asyncResult = Begin_getApplySheets(null, null);
      return End_getApplySheets(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getApplySheets(AsyncCallback callback, object state)
    #else
    public void send_getApplySheets()
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("getApplySheets", TMessageType.Call, seqid_));
      getApplySheets_args args = new getApplySheets_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<POS> recv_getApplySheets()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getApplySheets_result result = new getApplySheets_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getApplySheets failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_getOutApplySheets(AsyncCallback callback, object state)
    {
      return send_getOutApplySheets(callback, state);
    }

    public List<POS> End_getOutApplySheets(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getOutApplySheets();
    }

    #endif

    public List<POS> getOutApplySheets()
    {
      #if !SILVERLIGHT
      send_getOutApplySheets();
      return recv_getOutApplySheets();

      #else
      var asyncResult = Begin_getOutApplySheets(null, null);
      return End_getOutApplySheets(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getOutApplySheets(AsyncCallback callback, object state)
    #else
    public void send_getOutApplySheets()
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("getOutApplySheets", TMessageType.Call, seqid_));
      getOutApplySheets_args args = new getOutApplySheets_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<POS> recv_getOutApplySheets()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getOutApplySheets_result result = new getOutApplySheets_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getOutApplySheets failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_getPOSInfoByApplyDocCode(AsyncCallback callback, object state, string ApplyDocCode)
    {
      return send_getPOSInfoByApplyDocCode(callback, state, ApplyDocCode);
    }

    public POS End_getPOSInfoByApplyDocCode(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getPOSInfoByApplyDocCode();
    }

    #endif

    public POS getPOSInfoByApplyDocCode(string ApplyDocCode)
    {
      #if !SILVERLIGHT
      send_getPOSInfoByApplyDocCode(ApplyDocCode);
      return recv_getPOSInfoByApplyDocCode();

      #else
      var asyncResult = Begin_getPOSInfoByApplyDocCode(null, null, ApplyDocCode);
      return End_getPOSInfoByApplyDocCode(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getPOSInfoByApplyDocCode(AsyncCallback callback, object state, string ApplyDocCode)
    #else
    public void send_getPOSInfoByApplyDocCode(string ApplyDocCode)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("getPOSInfoByApplyDocCode", TMessageType.Call, seqid_));
      getPOSInfoByApplyDocCode_args args = new getPOSInfoByApplyDocCode_args();
      args.ApplyDocCode = ApplyDocCode;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public POS recv_getPOSInfoByApplyDocCode()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getPOSInfoByApplyDocCode_result result = new getPOSInfoByApplyDocCode_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getPOSInfoByApplyDocCode failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_getGoodsListByApplyDocCode(AsyncCallback callback, object state, string ApplyDocCode)
    {
      return send_getGoodsListByApplyDocCode(callback, state, ApplyDocCode);
    }

    public List<Good> End_getGoodsListByApplyDocCode(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getGoodsListByApplyDocCode();
    }

    #endif

    public List<Good> getGoodsListByApplyDocCode(string ApplyDocCode)
    {
      #if !SILVERLIGHT
      send_getGoodsListByApplyDocCode(ApplyDocCode);
      return recv_getGoodsListByApplyDocCode();

      #else
      var asyncResult = Begin_getGoodsListByApplyDocCode(null, null, ApplyDocCode);
      return End_getGoodsListByApplyDocCode(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getGoodsListByApplyDocCode(AsyncCallback callback, object state, string ApplyDocCode)
    #else
    public void send_getGoodsListByApplyDocCode(string ApplyDocCode)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("getGoodsListByApplyDocCode", TMessageType.Call, seqid_));
      getGoodsListByApplyDocCode_args args = new getGoodsListByApplyDocCode_args();
      args.ApplyDocCode = ApplyDocCode;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<Good> recv_getGoodsListByApplyDocCode()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getGoodsListByApplyDocCode_result result = new getGoodsListByApplyDocCode_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getGoodsListByApplyDocCode failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_confirmRetrieval(AsyncCallback callback, object state, string ApplyDocCode, Dictionary<string, int> cartons)
    {
      return send_confirmRetrieval(callback, state, ApplyDocCode, cartons);
    }

    public bool End_confirmRetrieval(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_confirmRetrieval();
    }

    #endif

    public bool confirmRetrieval(string ApplyDocCode, Dictionary<string, int> cartons)
    {
      #if !SILVERLIGHT
      send_confirmRetrieval(ApplyDocCode, cartons);
      return recv_confirmRetrieval();

      #else
      var asyncResult = Begin_confirmRetrieval(null, null, ApplyDocCode, cartons);
      return End_confirmRetrieval(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_confirmRetrieval(AsyncCallback callback, object state, string ApplyDocCode, Dictionary<string, int> cartons)
    #else
    public void send_confirmRetrieval(string ApplyDocCode, Dictionary<string, int> cartons)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("confirmRetrieval", TMessageType.Call, seqid_));
      confirmRetrieval_args args = new confirmRetrieval_args();
      args.ApplyDocCode = ApplyDocCode;
      args.Cartons = cartons;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public bool recv_confirmRetrieval()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      confirmRetrieval_result result = new confirmRetrieval_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "confirmRetrieval failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_confirmReceiving(AsyncCallback callback, object state, string Code)
    {
      return send_confirmReceiving(callback, state, Code);
    }

    public bool End_confirmReceiving(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_confirmReceiving();
    }

    #endif

    public bool confirmReceiving(string Code)
    {
      #if !SILVERLIGHT
      send_confirmReceiving(Code);
      return recv_confirmReceiving();

      #else
      var asyncResult = Begin_confirmReceiving(null, null, Code);
      return End_confirmReceiving(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_confirmReceiving(AsyncCallback callback, object state, string Code)
    #else
    public void send_confirmReceiving(string Code)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("confirmReceiving", TMessageType.Call, seqid_));
      confirmReceiving_args args = new confirmReceiving_args();
      args.Code = Code;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public bool recv_confirmReceiving()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      confirmReceiving_result result = new confirmReceiving_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "confirmReceiving failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_getGoodByCNum(AsyncCallback callback, object state, string CNum)
    {
      return send_getGoodByCNum(callback, state, CNum);
    }

    public Good End_getGoodByCNum(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getGoodByCNum();
    }

    #endif

    public Good getGoodByCNum(string CNum)
    {
      #if !SILVERLIGHT
      send_getGoodByCNum(CNum);
      return recv_getGoodByCNum();

      #else
      var asyncResult = Begin_getGoodByCNum(null, null, CNum);
      return End_getGoodByCNum(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getGoodByCNum(AsyncCallback callback, object state, string CNum)
    #else
    public void send_getGoodByCNum(string CNum)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("getGoodByCNum", TMessageType.Call, seqid_));
      getGoodByCNum_args args = new getGoodByCNum_args();
      args.CNum = CNum;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public Good recv_getGoodByCNum()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getGoodByCNum_result result = new getGoodByCNum_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getGoodByCNum failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_getLocationListByItemErpCode(AsyncCallback callback, object state, string ItemERPCode, bool isBom)
    {
      return send_getLocationListByItemErpCode(callback, state, ItemERPCode, isBom);
    }

    public List<LocationInfo> End_getLocationListByItemErpCode(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getLocationListByItemErpCode();
    }

    #endif

    public List<LocationInfo> getLocationListByItemErpCode(string ItemERPCode, bool isBom)
    {
      #if !SILVERLIGHT
      send_getLocationListByItemErpCode(ItemERPCode, isBom);
      return recv_getLocationListByItemErpCode();

      #else
      var asyncResult = Begin_getLocationListByItemErpCode(null, null, ItemERPCode, isBom);
      return End_getLocationListByItemErpCode(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getLocationListByItemErpCode(AsyncCallback callback, object state, string ItemERPCode, bool isBom)
    #else
    public void send_getLocationListByItemErpCode(string ItemERPCode, bool isBom)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("getLocationListByItemErpCode", TMessageType.Call, seqid_));
      getLocationListByItemErpCode_args args = new getLocationListByItemErpCode_args();
      args.ItemERPCode = ItemERPCode;
      args.IsBom = isBom;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<LocationInfo> recv_getLocationListByItemErpCode()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getLocationListByItemErpCode_result result = new getLocationListByItemErpCode_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getLocationListByItemErpCode failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_getGoodsByLocation(AsyncCallback callback, object state, int Location)
    {
      return send_getGoodsByLocation(callback, state, Location);
    }

    public List<Good> End_getGoodsByLocation(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getGoodsByLocation();
    }

    #endif

    public List<Good> getGoodsByLocation(int Location)
    {
      #if !SILVERLIGHT
      send_getGoodsByLocation(Location);
      return recv_getGoodsByLocation();

      #else
      var asyncResult = Begin_getGoodsByLocation(null, null, Location);
      return End_getGoodsByLocation(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getGoodsByLocation(AsyncCallback callback, object state, int Location)
    #else
    public void send_getGoodsByLocation(int Location)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("getGoodsByLocation", TMessageType.Call, seqid_));
      getGoodsByLocation_args args = new getGoodsByLocation_args();
      args.Location = Location;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<Good> recv_getGoodsByLocation()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getGoodsByLocation_result result = new getGoodsByLocation_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getGoodsByLocation failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_getApplyDocCodeByCNum(AsyncCallback callback, object state, string CNum)
    {
      return send_getApplyDocCodeByCNum(callback, state, CNum);
    }

    public string End_getApplyDocCodeByCNum(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getApplyDocCodeByCNum();
    }

    #endif

    public string getApplyDocCodeByCNum(string CNum)
    {
      #if !SILVERLIGHT
      send_getApplyDocCodeByCNum(CNum);
      return recv_getApplyDocCodeByCNum();

      #else
      var asyncResult = Begin_getApplyDocCodeByCNum(null, null, CNum);
      return End_getApplyDocCodeByCNum(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getApplyDocCodeByCNum(AsyncCallback callback, object state, string CNum)
    #else
    public void send_getApplyDocCodeByCNum(string CNum)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("getApplyDocCodeByCNum", TMessageType.Call, seqid_));
      getApplyDocCodeByCNum_args args = new getApplyDocCodeByCNum_args();
      args.CNum = CNum;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public string recv_getApplyDocCodeByCNum()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getApplyDocCodeByCNum_result result = new getApplyDocCodeByCNum_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getApplyDocCodeByCNum failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_confirmInventory(AsyncCallback callback, object state, List<check> checks)
    {
      return send_confirmInventory(callback, state, checks);
    }

    public bool End_confirmInventory(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_confirmInventory();
    }

    #endif

    public bool confirmInventory(List<check> checks)
    {
      #if !SILVERLIGHT
      send_confirmInventory(checks);
      return recv_confirmInventory();

      #else
      var asyncResult = Begin_confirmInventory(null, null, checks);
      return End_confirmInventory(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_confirmInventory(AsyncCallback callback, object state, List<check> checks)
    #else
    public void send_confirmInventory(List<check> checks)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("confirmInventory", TMessageType.Call, seqid_));
      confirmInventory_args args = new confirmInventory_args();
      args.Checks = checks;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public bool recv_confirmInventory()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      confirmInventory_result result = new confirmInventory_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "confirmInventory failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_confirmArrive(AsyncCallback callback, object state, string charge, string Time, string Position, string Type, string PosApplyDocCode, double longitude, double latitude)
    {
      return send_confirmArrive(callback, state, charge, Time, Position, Type, PosApplyDocCode, longitude, latitude);
    }

    public bool End_confirmArrive(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_confirmArrive();
    }

    #endif

    public bool confirmArrive(string charge, string Time, string Position, string Type, string PosApplyDocCode, double longitude, double latitude)
    {
      #if !SILVERLIGHT
      send_confirmArrive(charge, Time, Position, Type, PosApplyDocCode, longitude, latitude);
      return recv_confirmArrive();

      #else
      var asyncResult = Begin_confirmArrive(null, null, charge, Time, Position, Type, PosApplyDocCode, longitude, latitude);
      return End_confirmArrive(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_confirmArrive(AsyncCallback callback, object state, string charge, string Time, string Position, string Type, string PosApplyDocCode, double longitude, double latitude)
    #else
    public void send_confirmArrive(string charge, string Time, string Position, string Type, string PosApplyDocCode, double longitude, double latitude)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("confirmArrive", TMessageType.Call, seqid_));
      confirmArrive_args args = new confirmArrive_args();
      args.Charge = charge;
      args.Time = Time;
      args.Position = Position;
      args.Type = Type;
      args.PosApplyDocCode = PosApplyDocCode;
      args.Longitude = longitude;
      args.Latitude = latitude;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public bool recv_confirmArrive()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      confirmArrive_result result = new confirmArrive_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "confirmArrive failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_stagingSiteCheckout(AsyncCallback callback, object state, string applyPerson, string constructPos, string constructUnit, string materialCode, int num)
    {
      return send_stagingSiteCheckout(callback, state, applyPerson, constructPos, constructUnit, materialCode, num);
    }

    public bool End_stagingSiteCheckout(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_stagingSiteCheckout();
    }

    #endif

    public bool stagingSiteCheckout(string applyPerson, string constructPos, string constructUnit, string materialCode, int num)
    {
      #if !SILVERLIGHT
      send_stagingSiteCheckout(applyPerson, constructPos, constructUnit, materialCode, num);
      return recv_stagingSiteCheckout();

      #else
      var asyncResult = Begin_stagingSiteCheckout(null, null, applyPerson, constructPos, constructUnit, materialCode, num);
      return End_stagingSiteCheckout(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_stagingSiteCheckout(AsyncCallback callback, object state, string applyPerson, string constructPos, string constructUnit, string materialCode, int num)
    #else
    public void send_stagingSiteCheckout(string applyPerson, string constructPos, string constructUnit, string materialCode, int num)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("stagingSiteCheckout", TMessageType.Call, seqid_));
      stagingSiteCheckout_args args = new stagingSiteCheckout_args();
      args.ApplyPerson = applyPerson;
      args.ConstructPos = constructPos;
      args.ConstructUnit = constructUnit;
      args.MaterialCode = materialCode;
      args.Num = num;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public bool recv_stagingSiteCheckout()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      stagingSiteCheckout_result result = new stagingSiteCheckout_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "stagingSiteCheckout failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_getTransportInfo(AsyncCallback callback, object state)
    {
      return send_getTransportInfo(callback, state);
    }

    public List<transportInfo> End_getTransportInfo(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getTransportInfo();
    }

    #endif

    public List<transportInfo> getTransportInfo()
    {
      #if !SILVERLIGHT
      send_getTransportInfo();
      return recv_getTransportInfo();

      #else
      var asyncResult = Begin_getTransportInfo(null, null);
      return End_getTransportInfo(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getTransportInfo(AsyncCallback callback, object state)
    #else
    public void send_getTransportInfo()
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("getTransportInfo", TMessageType.Call, seqid_));
      getTransportInfo_args args = new getTransportInfo_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<transportInfo> recv_getTransportInfo()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getTransportInfo_result result = new getTransportInfo_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getTransportInfo failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_getStagingInfo(AsyncCallback callback, object state, string constructUnit)
    {
      return send_getStagingInfo(callback, state, constructUnit);
    }

    public List<stagingInfo> End_getStagingInfo(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getStagingInfo();
    }

    #endif

    public List<stagingInfo> getStagingInfo(string constructUnit)
    {
      #if !SILVERLIGHT
      send_getStagingInfo(constructUnit);
      return recv_getStagingInfo();

      #else
      var asyncResult = Begin_getStagingInfo(null, null, constructUnit);
      return End_getStagingInfo(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getStagingInfo(AsyncCallback callback, object state, string constructUnit)
    #else
    public void send_getStagingInfo(string constructUnit)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("getStagingInfo", TMessageType.Call, seqid_));
      getStagingInfo_args args = new getStagingInfo_args();
      args.ConstructUnit = constructUnit;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<stagingInfo> recv_getStagingInfo()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getStagingInfo_result result = new getStagingInfo_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getStagingInfo failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_getInStagingInfo(AsyncCallback callback, object state, string constructUnit)
    {
      return send_getInStagingInfo(callback, state, constructUnit);
    }

    public List<inStagingInfo> End_getInStagingInfo(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getInStagingInfo();
    }

    #endif

    public List<inStagingInfo> getInStagingInfo(string constructUnit)
    {
      #if !SILVERLIGHT
      send_getInStagingInfo(constructUnit);
      return recv_getInStagingInfo();

      #else
      var asyncResult = Begin_getInStagingInfo(null, null, constructUnit);
      return End_getInStagingInfo(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getInStagingInfo(AsyncCallback callback, object state, string constructUnit)
    #else
    public void send_getInStagingInfo(string constructUnit)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("getInStagingInfo", TMessageType.Call, seqid_));
      getInStagingInfo_args args = new getInStagingInfo_args();
      args.ConstructUnit = constructUnit;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<inStagingInfo> recv_getInStagingInfo()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getInStagingInfo_result result = new getInStagingInfo_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getInStagingInfo failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_addPic(AsyncCallback callback, object state, string ApplyDocCode, List<string> URL)
    {
      return send_addPic(callback, state, ApplyDocCode, URL);
    }

    public bool End_addPic(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_addPic();
    }

    #endif

    public bool addPic(string ApplyDocCode, List<string> URL)
    {
      #if !SILVERLIGHT
      send_addPic(ApplyDocCode, URL);
      return recv_addPic();

      #else
      var asyncResult = Begin_addPic(null, null, ApplyDocCode, URL);
      return End_addPic(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_addPic(AsyncCallback callback, object state, string ApplyDocCode, List<string> URL)
    #else
    public void send_addPic(string ApplyDocCode, List<string> URL)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("addPic", TMessageType.Call, seqid_));
      addPic_args args = new addPic_args();
      args.ApplyDocCode = ApplyDocCode;
      args.URL = URL;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public bool recv_addPic()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      addPic_result result = new addPic_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "addPic failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_getPicsByApplyDocCode(AsyncCallback callback, object state, string ApplyDocCode)
    {
      return send_getPicsByApplyDocCode(callback, state, ApplyDocCode);
    }

    public List<string> End_getPicsByApplyDocCode(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getPicsByApplyDocCode();
    }

    #endif

    public List<string> getPicsByApplyDocCode(string ApplyDocCode)
    {
      #if !SILVERLIGHT
      send_getPicsByApplyDocCode(ApplyDocCode);
      return recv_getPicsByApplyDocCode();

      #else
      var asyncResult = Begin_getPicsByApplyDocCode(null, null, ApplyDocCode);
      return End_getPicsByApplyDocCode(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getPicsByApplyDocCode(AsyncCallback callback, object state, string ApplyDocCode)
    #else
    public void send_getPicsByApplyDocCode(string ApplyDocCode)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("getPicsByApplyDocCode", TMessageType.Call, seqid_));
      getPicsByApplyDocCode_args args = new getPicsByApplyDocCode_args();
      args.ApplyDocCode = ApplyDocCode;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<string> recv_getPicsByApplyDocCode()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getPicsByApplyDocCode_result result = new getPicsByApplyDocCode_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getPicsByApplyDocCode failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_toPrint(AsyncCallback callback, object state)
    {
      return send_toPrint(callback, state);
    }

    public bool End_toPrint(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_toPrint();
    }

    #endif

    public bool toPrint()
    {
      #if !SILVERLIGHT
      send_toPrint();
      return recv_toPrint();

      #else
      var asyncResult = Begin_toPrint(null, null);
      return End_toPrint(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_toPrint(AsyncCallback callback, object state)
    #else
    public void send_toPrint()
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("toPrint", TMessageType.Call, seqid_));
      toPrint_args args = new toPrint_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public bool recv_toPrint()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      toPrint_result result = new toPrint_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "toPrint failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_callPrinter(AsyncCallback callback, object state)
    {
      return send_callPrinter(callback, state);
    }

    public List<Data> End_callPrinter(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_callPrinter();
    }

    #endif

    public List<Data> callPrinter()
    {
      #if !SILVERLIGHT
      send_callPrinter();
      return recv_callPrinter();

      #else
      var asyncResult = Begin_callPrinter(null, null);
      return End_callPrinter(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_callPrinter(AsyncCallback callback, object state)
    #else
    public void send_callPrinter()
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("callPrinter", TMessageType.Call, seqid_));
      callPrinter_args args = new callPrinter_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<Data> recv_callPrinter()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      callPrinter_result result = new callPrinter_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "callPrinter failed: unknown result");
    }

  }
  public class Processor : TProcessor {
    public Processor(Iface iface)
    {
      iface_ = iface;
      processMap_["getReceivingSheets"] = getReceivingSheets_Process;
      processMap_["getGoodsListByCode"] = getGoodsListByCode_Process;
      processMap_["printTag"] = printTag_Process;
      processMap_["getCodeByCNum"] = getCodeByCNum_Process;
      processMap_["bindLocationAndGoods"] = bindLocationAndGoods_Process;
      processMap_["getApplySheets"] = getApplySheets_Process;
      processMap_["getOutApplySheets"] = getOutApplySheets_Process;
      processMap_["getPOSInfoByApplyDocCode"] = getPOSInfoByApplyDocCode_Process;
      processMap_["getGoodsListByApplyDocCode"] = getGoodsListByApplyDocCode_Process;
      processMap_["confirmRetrieval"] = confirmRetrieval_Process;
      processMap_["confirmReceiving"] = confirmReceiving_Process;
      processMap_["getGoodByCNum"] = getGoodByCNum_Process;
      processMap_["getLocationListByItemErpCode"] = getLocationListByItemErpCode_Process;
      processMap_["getGoodsByLocation"] = getGoodsByLocation_Process;
      processMap_["getApplyDocCodeByCNum"] = getApplyDocCodeByCNum_Process;
      processMap_["confirmInventory"] = confirmInventory_Process;
      processMap_["confirmArrive"] = confirmArrive_Process;
      processMap_["stagingSiteCheckout"] = stagingSiteCheckout_Process;
      processMap_["getTransportInfo"] = getTransportInfo_Process;
      processMap_["getStagingInfo"] = getStagingInfo_Process;
      processMap_["getInStagingInfo"] = getInStagingInfo_Process;
      processMap_["addPic"] = addPic_Process;
      processMap_["getPicsByApplyDocCode"] = getPicsByApplyDocCode_Process;
      processMap_["toPrint"] = toPrint_Process;
      processMap_["callPrinter"] = callPrinter_Process;
    }

    protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
    private Iface iface_;
    protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

    public bool Process(TProtocol iprot, TProtocol oprot)
    {
      try
      {
        TMessage msg = iprot.ReadMessageBegin();
        ProcessFunction fn;
        processMap_.TryGetValue(msg.Name, out fn);
        if (fn == null) {
          TProtocolUtil.Skip(iprot, TType.Struct);
          iprot.ReadMessageEnd();
          TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
          oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
          x.Write(oprot);
          oprot.WriteMessageEnd();
          oprot.Transport.Flush();
          return true;
        }
        fn(msg.SeqID, iprot, oprot);
      }
      catch (IOException)
      {
        return false;
      }
      return true;
    }

    public void getReceivingSheets_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getReceivingSheets_args args = new getReceivingSheets_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getReceivingSheets_result result = new getReceivingSheets_result();
      result.Success = iface_.getReceivingSheets();
      oprot.WriteMessageBegin(new TMessage("getReceivingSheets", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getGoodsListByCode_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getGoodsListByCode_args args = new getGoodsListByCode_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getGoodsListByCode_result result = new getGoodsListByCode_result();
      result.Success = iface_.getGoodsListByCode(args.Code, args.Printable);
      oprot.WriteMessageBegin(new TMessage("getGoodsListByCode", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void printTag_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      printTag_args args = new printTag_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      printTag_result result = new printTag_result();
      result.Success = iface_.printTag(args.Code);
      oprot.WriteMessageBegin(new TMessage("printTag", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getCodeByCNum_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getCodeByCNum_args args = new getCodeByCNum_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getCodeByCNum_result result = new getCodeByCNum_result();
      result.Success = iface_.getCodeByCNum(args.CNum);
      oprot.WriteMessageBegin(new TMessage("getCodeByCNum", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void bindLocationAndGoods_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      bindLocationAndGoods_args args = new bindLocationAndGoods_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      bindLocationAndGoods_result result = new bindLocationAndGoods_result();
      result.Success = iface_.bindLocationAndGoods(args.LocationID, args.CNums);
      oprot.WriteMessageBegin(new TMessage("bindLocationAndGoods", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getApplySheets_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getApplySheets_args args = new getApplySheets_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getApplySheets_result result = new getApplySheets_result();
      result.Success = iface_.getApplySheets();
      oprot.WriteMessageBegin(new TMessage("getApplySheets", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getOutApplySheets_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getOutApplySheets_args args = new getOutApplySheets_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getOutApplySheets_result result = new getOutApplySheets_result();
      result.Success = iface_.getOutApplySheets();
      oprot.WriteMessageBegin(new TMessage("getOutApplySheets", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getPOSInfoByApplyDocCode_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getPOSInfoByApplyDocCode_args args = new getPOSInfoByApplyDocCode_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getPOSInfoByApplyDocCode_result result = new getPOSInfoByApplyDocCode_result();
      result.Success = iface_.getPOSInfoByApplyDocCode(args.ApplyDocCode);
      oprot.WriteMessageBegin(new TMessage("getPOSInfoByApplyDocCode", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getGoodsListByApplyDocCode_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getGoodsListByApplyDocCode_args args = new getGoodsListByApplyDocCode_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getGoodsListByApplyDocCode_result result = new getGoodsListByApplyDocCode_result();
      result.Success = iface_.getGoodsListByApplyDocCode(args.ApplyDocCode);
      oprot.WriteMessageBegin(new TMessage("getGoodsListByApplyDocCode", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void confirmRetrieval_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      confirmRetrieval_args args = new confirmRetrieval_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      confirmRetrieval_result result = new confirmRetrieval_result();
      result.Success = iface_.confirmRetrieval(args.ApplyDocCode, args.Cartons);
      oprot.WriteMessageBegin(new TMessage("confirmRetrieval", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void confirmReceiving_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      confirmReceiving_args args = new confirmReceiving_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      confirmReceiving_result result = new confirmReceiving_result();
      result.Success = iface_.confirmReceiving(args.Code);
      oprot.WriteMessageBegin(new TMessage("confirmReceiving", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getGoodByCNum_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getGoodByCNum_args args = new getGoodByCNum_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getGoodByCNum_result result = new getGoodByCNum_result();
      result.Success = iface_.getGoodByCNum(args.CNum);
      oprot.WriteMessageBegin(new TMessage("getGoodByCNum", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getLocationListByItemErpCode_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getLocationListByItemErpCode_args args = new getLocationListByItemErpCode_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getLocationListByItemErpCode_result result = new getLocationListByItemErpCode_result();
      result.Success = iface_.getLocationListByItemErpCode(args.ItemERPCode, args.IsBom);
      oprot.WriteMessageBegin(new TMessage("getLocationListByItemErpCode", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getGoodsByLocation_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getGoodsByLocation_args args = new getGoodsByLocation_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getGoodsByLocation_result result = new getGoodsByLocation_result();
      result.Success = iface_.getGoodsByLocation(args.Location);
      oprot.WriteMessageBegin(new TMessage("getGoodsByLocation", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getApplyDocCodeByCNum_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getApplyDocCodeByCNum_args args = new getApplyDocCodeByCNum_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getApplyDocCodeByCNum_result result = new getApplyDocCodeByCNum_result();
      result.Success = iface_.getApplyDocCodeByCNum(args.CNum);
      oprot.WriteMessageBegin(new TMessage("getApplyDocCodeByCNum", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void confirmInventory_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      confirmInventory_args args = new confirmInventory_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      confirmInventory_result result = new confirmInventory_result();
      result.Success = iface_.confirmInventory(args.Checks);
      oprot.WriteMessageBegin(new TMessage("confirmInventory", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void confirmArrive_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      confirmArrive_args args = new confirmArrive_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      confirmArrive_result result = new confirmArrive_result();
      result.Success = iface_.confirmArrive(args.Charge, args.Time, args.Position, args.Type, args.PosApplyDocCode, args.Longitude, args.Latitude);
      oprot.WriteMessageBegin(new TMessage("confirmArrive", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void stagingSiteCheckout_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      stagingSiteCheckout_args args = new stagingSiteCheckout_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      stagingSiteCheckout_result result = new stagingSiteCheckout_result();
      result.Success = iface_.stagingSiteCheckout(args.ApplyPerson, args.ConstructPos, args.ConstructUnit, args.MaterialCode, args.Num);
      oprot.WriteMessageBegin(new TMessage("stagingSiteCheckout", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getTransportInfo_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getTransportInfo_args args = new getTransportInfo_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getTransportInfo_result result = new getTransportInfo_result();
      result.Success = iface_.getTransportInfo();
      oprot.WriteMessageBegin(new TMessage("getTransportInfo", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getStagingInfo_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getStagingInfo_args args = new getStagingInfo_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getStagingInfo_result result = new getStagingInfo_result();
      result.Success = iface_.getStagingInfo(args.ConstructUnit);
      oprot.WriteMessageBegin(new TMessage("getStagingInfo", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getInStagingInfo_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getInStagingInfo_args args = new getInStagingInfo_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getInStagingInfo_result result = new getInStagingInfo_result();
      result.Success = iface_.getInStagingInfo(args.ConstructUnit);
      oprot.WriteMessageBegin(new TMessage("getInStagingInfo", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void addPic_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      addPic_args args = new addPic_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      addPic_result result = new addPic_result();
      result.Success = iface_.addPic(args.ApplyDocCode, args.URL);
      oprot.WriteMessageBegin(new TMessage("addPic", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getPicsByApplyDocCode_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getPicsByApplyDocCode_args args = new getPicsByApplyDocCode_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getPicsByApplyDocCode_result result = new getPicsByApplyDocCode_result();
      result.Success = iface_.getPicsByApplyDocCode(args.ApplyDocCode);
      oprot.WriteMessageBegin(new TMessage("getPicsByApplyDocCode", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void toPrint_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      toPrint_args args = new toPrint_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      toPrint_result result = new toPrint_result();
      result.Success = iface_.toPrint();
      oprot.WriteMessageBegin(new TMessage("toPrint", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void callPrinter_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      callPrinter_args args = new callPrinter_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      callPrinter_result result = new callPrinter_result();
      result.Success = iface_.callPrinter();
      oprot.WriteMessageBegin(new TMessage("callPrinter", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getReceivingSheets_args : TBase
  {

    public getReceivingSheets_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getReceivingSheets_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getReceivingSheets_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getReceivingSheets_result : TBase
  {
    private List<ASN> _success;

    public List<ASN> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public getReceivingSheets_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<ASN>();
                  TList _list0 = iprot.ReadListBegin();
                  for( int _i1 = 0; _i1 < _list0.Count; ++_i1)
                  {
                    ASN _elem2;
                    _elem2 = new ASN();
                    _elem2.Read(iprot);
                    Success.Add(_elem2);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getReceivingSheets_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (ASN _iter3 in Success)
              {
                _iter3.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getReceivingSheets_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getGoodsListByCode_args : TBase
  {
    private string _Code;
    private bool _printable;

    public string Code
    {
      get
      {
        return _Code;
      }
      set
      {
        __isset.Code = true;
        this._Code = value;
      }
    }

    public bool Printable
    {
      get
      {
        return _printable;
      }
      set
      {
        __isset.printable = true;
        this._printable = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool Code;
      public bool printable;
    }

    public getGoodsListByCode_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Code = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Bool) {
                Printable = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getGoodsListByCode_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Code != null && __isset.Code) {
          field.Name = "Code";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Code);
          oprot.WriteFieldEnd();
        }
        if (__isset.printable) {
          field.Name = "printable";
          field.Type = TType.Bool;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Printable);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getGoodsListByCode_args(");
      bool __first = true;
      if (Code != null && __isset.Code) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Code: ");
        __sb.Append(Code);
      }
      if (__isset.printable) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Printable: ");
        __sb.Append(Printable);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getGoodsListByCode_result : TBase
  {
    private List<Good> _success;

    public List<Good> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public getGoodsListByCode_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<Good>();
                  TList _list4 = iprot.ReadListBegin();
                  for( int _i5 = 0; _i5 < _list4.Count; ++_i5)
                  {
                    Good _elem6;
                    _elem6 = new Good();
                    _elem6.Read(iprot);
                    Success.Add(_elem6);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getGoodsListByCode_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (Good _iter7 in Success)
              {
                _iter7.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getGoodsListByCode_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class printTag_args : TBase
  {
    private string _Code;

    public string Code
    {
      get
      {
        return _Code;
      }
      set
      {
        __isset.Code = true;
        this._Code = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool Code;
    }

    public printTag_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Code = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("printTag_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Code != null && __isset.Code) {
          field.Name = "Code";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Code);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("printTag_args(");
      bool __first = true;
      if (Code != null && __isset.Code) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Code: ");
        __sb.Append(Code);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class printTag_result : TBase
  {
    private bool _success;

    public bool Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public printTag_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("printTag_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("printTag_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getCodeByCNum_args : TBase
  {
    private string _CNum;

    public string CNum
    {
      get
      {
        return _CNum;
      }
      set
      {
        __isset.CNum = true;
        this._CNum = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool CNum;
    }

    public getCodeByCNum_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                CNum = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getCodeByCNum_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (CNum != null && __isset.CNum) {
          field.Name = "CNum";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(CNum);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getCodeByCNum_args(");
      bool __first = true;
      if (CNum != null && __isset.CNum) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("CNum: ");
        __sb.Append(CNum);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getCodeByCNum_result : TBase
  {
    private string _success;

    public string Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public getCodeByCNum_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getCodeByCNum_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getCodeByCNum_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class bindLocationAndGoods_args : TBase
  {
    private int _LocationID;
    private List<string> _CNums;

    public int LocationID
    {
      get
      {
        return _LocationID;
      }
      set
      {
        __isset.LocationID = true;
        this._LocationID = value;
      }
    }

    public List<string> CNums
    {
      get
      {
        return _CNums;
      }
      set
      {
        __isset.CNums = true;
        this._CNums = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool LocationID;
      public bool CNums;
    }

    public bindLocationAndGoods_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                LocationID = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.List) {
                {
                  CNums = new List<string>();
                  TList _list8 = iprot.ReadListBegin();
                  for( int _i9 = 0; _i9 < _list8.Count; ++_i9)
                  {
                    string _elem10;
                    _elem10 = iprot.ReadString();
                    CNums.Add(_elem10);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("bindLocationAndGoods_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.LocationID) {
          field.Name = "LocationID";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(LocationID);
          oprot.WriteFieldEnd();
        }
        if (CNums != null && __isset.CNums) {
          field.Name = "CNums";
          field.Type = TType.List;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, CNums.Count));
            foreach (string _iter11 in CNums)
            {
              oprot.WriteString(_iter11);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("bindLocationAndGoods_args(");
      bool __first = true;
      if (__isset.LocationID) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("LocationID: ");
        __sb.Append(LocationID);
      }
      if (CNums != null && __isset.CNums) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("CNums: ");
        __sb.Append(CNums);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class bindLocationAndGoods_result : TBase
  {
    private bool _success;

    public bool Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public bindLocationAndGoods_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("bindLocationAndGoods_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("bindLocationAndGoods_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getApplySheets_args : TBase
  {

    public getApplySheets_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getApplySheets_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getApplySheets_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getApplySheets_result : TBase
  {
    private List<POS> _success;

    public List<POS> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public getApplySheets_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<POS>();
                  TList _list12 = iprot.ReadListBegin();
                  for( int _i13 = 0; _i13 < _list12.Count; ++_i13)
                  {
                    POS _elem14;
                    _elem14 = new POS();
                    _elem14.Read(iprot);
                    Success.Add(_elem14);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getApplySheets_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (POS _iter15 in Success)
              {
                _iter15.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getApplySheets_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getOutApplySheets_args : TBase
  {

    public getOutApplySheets_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getOutApplySheets_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getOutApplySheets_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getOutApplySheets_result : TBase
  {
    private List<POS> _success;

    public List<POS> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public getOutApplySheets_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<POS>();
                  TList _list16 = iprot.ReadListBegin();
                  for( int _i17 = 0; _i17 < _list16.Count; ++_i17)
                  {
                    POS _elem18;
                    _elem18 = new POS();
                    _elem18.Read(iprot);
                    Success.Add(_elem18);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getOutApplySheets_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (POS _iter19 in Success)
              {
                _iter19.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getOutApplySheets_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getPOSInfoByApplyDocCode_args : TBase
  {
    private string _ApplyDocCode;

    public string ApplyDocCode
    {
      get
      {
        return _ApplyDocCode;
      }
      set
      {
        __isset.ApplyDocCode = true;
        this._ApplyDocCode = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool ApplyDocCode;
    }

    public getPOSInfoByApplyDocCode_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                ApplyDocCode = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getPOSInfoByApplyDocCode_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (ApplyDocCode != null && __isset.ApplyDocCode) {
          field.Name = "ApplyDocCode";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ApplyDocCode);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getPOSInfoByApplyDocCode_args(");
      bool __first = true;
      if (ApplyDocCode != null && __isset.ApplyDocCode) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ApplyDocCode: ");
        __sb.Append(ApplyDocCode);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getPOSInfoByApplyDocCode_result : TBase
  {
    private POS _success;

    public POS Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public getPOSInfoByApplyDocCode_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new POS();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getPOSInfoByApplyDocCode_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getPOSInfoByApplyDocCode_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getGoodsListByApplyDocCode_args : TBase
  {
    private string _ApplyDocCode;

    public string ApplyDocCode
    {
      get
      {
        return _ApplyDocCode;
      }
      set
      {
        __isset.ApplyDocCode = true;
        this._ApplyDocCode = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool ApplyDocCode;
    }

    public getGoodsListByApplyDocCode_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                ApplyDocCode = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getGoodsListByApplyDocCode_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (ApplyDocCode != null && __isset.ApplyDocCode) {
          field.Name = "ApplyDocCode";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ApplyDocCode);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getGoodsListByApplyDocCode_args(");
      bool __first = true;
      if (ApplyDocCode != null && __isset.ApplyDocCode) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ApplyDocCode: ");
        __sb.Append(ApplyDocCode);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getGoodsListByApplyDocCode_result : TBase
  {
    private List<Good> _success;

    public List<Good> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public getGoodsListByApplyDocCode_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<Good>();
                  TList _list20 = iprot.ReadListBegin();
                  for( int _i21 = 0; _i21 < _list20.Count; ++_i21)
                  {
                    Good _elem22;
                    _elem22 = new Good();
                    _elem22.Read(iprot);
                    Success.Add(_elem22);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getGoodsListByApplyDocCode_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (Good _iter23 in Success)
              {
                _iter23.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getGoodsListByApplyDocCode_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class confirmRetrieval_args : TBase
  {
    private string _ApplyDocCode;
    private Dictionary<string, int> _cartons;

    public string ApplyDocCode
    {
      get
      {
        return _ApplyDocCode;
      }
      set
      {
        __isset.ApplyDocCode = true;
        this._ApplyDocCode = value;
      }
    }

    public Dictionary<string, int> Cartons
    {
      get
      {
        return _cartons;
      }
      set
      {
        __isset.cartons = true;
        this._cartons = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool ApplyDocCode;
      public bool cartons;
    }

    public confirmRetrieval_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                ApplyDocCode = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Map) {
                {
                  Cartons = new Dictionary<string, int>();
                  TMap _map24 = iprot.ReadMapBegin();
                  for( int _i25 = 0; _i25 < _map24.Count; ++_i25)
                  {
                    string _key26;
                    int _val27;
                    _key26 = iprot.ReadString();
                    _val27 = iprot.ReadI32();
                    Cartons[_key26] = _val27;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("confirmRetrieval_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (ApplyDocCode != null && __isset.ApplyDocCode) {
          field.Name = "ApplyDocCode";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ApplyDocCode);
          oprot.WriteFieldEnd();
        }
        if (Cartons != null && __isset.cartons) {
          field.Name = "cartons";
          field.Type = TType.Map;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteMapBegin(new TMap(TType.String, TType.I32, Cartons.Count));
            foreach (string _iter28 in Cartons.Keys)
            {
              oprot.WriteString(_iter28);
              oprot.WriteI32(Cartons[_iter28]);
            }
            oprot.WriteMapEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("confirmRetrieval_args(");
      bool __first = true;
      if (ApplyDocCode != null && __isset.ApplyDocCode) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ApplyDocCode: ");
        __sb.Append(ApplyDocCode);
      }
      if (Cartons != null && __isset.cartons) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Cartons: ");
        __sb.Append(Cartons);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class confirmRetrieval_result : TBase
  {
    private bool _success;

    public bool Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public confirmRetrieval_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("confirmRetrieval_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("confirmRetrieval_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class confirmReceiving_args : TBase
  {
    private string _Code;

    public string Code
    {
      get
      {
        return _Code;
      }
      set
      {
        __isset.Code = true;
        this._Code = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool Code;
    }

    public confirmReceiving_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Code = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("confirmReceiving_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Code != null && __isset.Code) {
          field.Name = "Code";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Code);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("confirmReceiving_args(");
      bool __first = true;
      if (Code != null && __isset.Code) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Code: ");
        __sb.Append(Code);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class confirmReceiving_result : TBase
  {
    private bool _success;

    public bool Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public confirmReceiving_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("confirmReceiving_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("confirmReceiving_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getGoodByCNum_args : TBase
  {
    private string _CNum;

    public string CNum
    {
      get
      {
        return _CNum;
      }
      set
      {
        __isset.CNum = true;
        this._CNum = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool CNum;
    }

    public getGoodByCNum_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                CNum = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getGoodByCNum_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (CNum != null && __isset.CNum) {
          field.Name = "CNum";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(CNum);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getGoodByCNum_args(");
      bool __first = true;
      if (CNum != null && __isset.CNum) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("CNum: ");
        __sb.Append(CNum);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getGoodByCNum_result : TBase
  {
    private Good _success;

    public Good Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public getGoodByCNum_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new Good();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getGoodByCNum_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getGoodByCNum_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getLocationListByItemErpCode_args : TBase
  {
    private string _ItemERPCode;
    private bool _isBom;

    public string ItemERPCode
    {
      get
      {
        return _ItemERPCode;
      }
      set
      {
        __isset.ItemERPCode = true;
        this._ItemERPCode = value;
      }
    }

    public bool IsBom
    {
      get
      {
        return _isBom;
      }
      set
      {
        __isset.isBom = true;
        this._isBom = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool ItemERPCode;
      public bool isBom;
    }

    public getLocationListByItemErpCode_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                ItemERPCode = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Bool) {
                IsBom = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getLocationListByItemErpCode_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (ItemERPCode != null && __isset.ItemERPCode) {
          field.Name = "ItemERPCode";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ItemERPCode);
          oprot.WriteFieldEnd();
        }
        if (__isset.isBom) {
          field.Name = "isBom";
          field.Type = TType.Bool;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(IsBom);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getLocationListByItemErpCode_args(");
      bool __first = true;
      if (ItemERPCode != null && __isset.ItemERPCode) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ItemERPCode: ");
        __sb.Append(ItemERPCode);
      }
      if (__isset.isBom) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("IsBom: ");
        __sb.Append(IsBom);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getLocationListByItemErpCode_result : TBase
  {
    private List<LocationInfo> _success;

    public List<LocationInfo> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public getLocationListByItemErpCode_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<LocationInfo>();
                  TList _list29 = iprot.ReadListBegin();
                  for( int _i30 = 0; _i30 < _list29.Count; ++_i30)
                  {
                    LocationInfo _elem31;
                    _elem31 = new LocationInfo();
                    _elem31.Read(iprot);
                    Success.Add(_elem31);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getLocationListByItemErpCode_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (LocationInfo _iter32 in Success)
              {
                _iter32.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getLocationListByItemErpCode_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getGoodsByLocation_args : TBase
  {
    private int _Location;

    public int Location
    {
      get
      {
        return _Location;
      }
      set
      {
        __isset.Location = true;
        this._Location = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool Location;
    }

    public getGoodsByLocation_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                Location = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getGoodsByLocation_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.Location) {
          field.Name = "Location";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Location);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getGoodsByLocation_args(");
      bool __first = true;
      if (__isset.Location) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Location: ");
        __sb.Append(Location);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getGoodsByLocation_result : TBase
  {
    private List<Good> _success;

    public List<Good> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public getGoodsByLocation_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<Good>();
                  TList _list33 = iprot.ReadListBegin();
                  for( int _i34 = 0; _i34 < _list33.Count; ++_i34)
                  {
                    Good _elem35;
                    _elem35 = new Good();
                    _elem35.Read(iprot);
                    Success.Add(_elem35);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getGoodsByLocation_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (Good _iter36 in Success)
              {
                _iter36.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getGoodsByLocation_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getApplyDocCodeByCNum_args : TBase
  {
    private string _CNum;

    public string CNum
    {
      get
      {
        return _CNum;
      }
      set
      {
        __isset.CNum = true;
        this._CNum = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool CNum;
    }

    public getApplyDocCodeByCNum_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                CNum = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getApplyDocCodeByCNum_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (CNum != null && __isset.CNum) {
          field.Name = "CNum";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(CNum);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getApplyDocCodeByCNum_args(");
      bool __first = true;
      if (CNum != null && __isset.CNum) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("CNum: ");
        __sb.Append(CNum);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getApplyDocCodeByCNum_result : TBase
  {
    private string _success;

    public string Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public getApplyDocCodeByCNum_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getApplyDocCodeByCNum_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getApplyDocCodeByCNum_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class confirmInventory_args : TBase
  {
    private List<check> _checks;

    public List<check> Checks
    {
      get
      {
        return _checks;
      }
      set
      {
        __isset.checks = true;
        this._checks = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool checks;
    }

    public confirmInventory_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  Checks = new List<check>();
                  TList _list37 = iprot.ReadListBegin();
                  for( int _i38 = 0; _i38 < _list37.Count; ++_i38)
                  {
                    check _elem39;
                    _elem39 = new check();
                    _elem39.Read(iprot);
                    Checks.Add(_elem39);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("confirmInventory_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Checks != null && __isset.checks) {
          field.Name = "checks";
          field.Type = TType.List;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Checks.Count));
            foreach (check _iter40 in Checks)
            {
              _iter40.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("confirmInventory_args(");
      bool __first = true;
      if (Checks != null && __isset.checks) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Checks: ");
        __sb.Append(Checks);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class confirmInventory_result : TBase
  {
    private bool _success;

    public bool Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public confirmInventory_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("confirmInventory_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("confirmInventory_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class confirmArrive_args : TBase
  {
    private string _charge;
    private string _Time;
    private string _Position;
    private string _Type;
    private string _PosApplyDocCode;
    private double _longitude;
    private double _latitude;

    public string Charge
    {
      get
      {
        return _charge;
      }
      set
      {
        __isset.charge = true;
        this._charge = value;
      }
    }

    public string Time
    {
      get
      {
        return _Time;
      }
      set
      {
        __isset.Time = true;
        this._Time = value;
      }
    }

    public string Position
    {
      get
      {
        return _Position;
      }
      set
      {
        __isset.Position = true;
        this._Position = value;
      }
    }

    public string Type
    {
      get
      {
        return _Type;
      }
      set
      {
        __isset.Type = true;
        this._Type = value;
      }
    }

    public string PosApplyDocCode
    {
      get
      {
        return _PosApplyDocCode;
      }
      set
      {
        __isset.PosApplyDocCode = true;
        this._PosApplyDocCode = value;
      }
    }

    public double Longitude
    {
      get
      {
        return _longitude;
      }
      set
      {
        __isset.longitude = true;
        this._longitude = value;
      }
    }

    public double Latitude
    {
      get
      {
        return _latitude;
      }
      set
      {
        __isset.latitude = true;
        this._latitude = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool charge;
      public bool Time;
      public bool Position;
      public bool Type;
      public bool PosApplyDocCode;
      public bool longitude;
      public bool latitude;
    }

    public confirmArrive_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Charge = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Time = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                Position = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                Type = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.String) {
                PosApplyDocCode = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.Double) {
                Longitude = iprot.ReadDouble();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.Double) {
                Latitude = iprot.ReadDouble();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("confirmArrive_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Charge != null && __isset.charge) {
          field.Name = "charge";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Charge);
          oprot.WriteFieldEnd();
        }
        if (Time != null && __isset.Time) {
          field.Name = "Time";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Time);
          oprot.WriteFieldEnd();
        }
        if (Position != null && __isset.Position) {
          field.Name = "Position";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Position);
          oprot.WriteFieldEnd();
        }
        if (Type != null && __isset.Type) {
          field.Name = "Type";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Type);
          oprot.WriteFieldEnd();
        }
        if (PosApplyDocCode != null && __isset.PosApplyDocCode) {
          field.Name = "PosApplyDocCode";
          field.Type = TType.String;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(PosApplyDocCode);
          oprot.WriteFieldEnd();
        }
        if (__isset.longitude) {
          field.Name = "longitude";
          field.Type = TType.Double;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteDouble(Longitude);
          oprot.WriteFieldEnd();
        }
        if (__isset.latitude) {
          field.Name = "latitude";
          field.Type = TType.Double;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          oprot.WriteDouble(Latitude);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("confirmArrive_args(");
      bool __first = true;
      if (Charge != null && __isset.charge) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Charge: ");
        __sb.Append(Charge);
      }
      if (Time != null && __isset.Time) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Time: ");
        __sb.Append(Time);
      }
      if (Position != null && __isset.Position) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Position: ");
        __sb.Append(Position);
      }
      if (Type != null && __isset.Type) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Type: ");
        __sb.Append(Type);
      }
      if (PosApplyDocCode != null && __isset.PosApplyDocCode) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("PosApplyDocCode: ");
        __sb.Append(PosApplyDocCode);
      }
      if (__isset.longitude) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Longitude: ");
        __sb.Append(Longitude);
      }
      if (__isset.latitude) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Latitude: ");
        __sb.Append(Latitude);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class confirmArrive_result : TBase
  {
    private bool _success;

    public bool Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public confirmArrive_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("confirmArrive_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("confirmArrive_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class stagingSiteCheckout_args : TBase
  {
    private string _applyPerson;
    private string _constructPos;
    private string _constructUnit;
    private string _materialCode;
    private int _num;

    public string ApplyPerson
    {
      get
      {
        return _applyPerson;
      }
      set
      {
        __isset.applyPerson = true;
        this._applyPerson = value;
      }
    }

    public string ConstructPos
    {
      get
      {
        return _constructPos;
      }
      set
      {
        __isset.constructPos = true;
        this._constructPos = value;
      }
    }

    public string ConstructUnit
    {
      get
      {
        return _constructUnit;
      }
      set
      {
        __isset.constructUnit = true;
        this._constructUnit = value;
      }
    }

    public string MaterialCode
    {
      get
      {
        return _materialCode;
      }
      set
      {
        __isset.materialCode = true;
        this._materialCode = value;
      }
    }

    public int Num
    {
      get
      {
        return _num;
      }
      set
      {
        __isset.num = true;
        this._num = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool applyPerson;
      public bool constructPos;
      public bool constructUnit;
      public bool materialCode;
      public bool num;
    }

    public stagingSiteCheckout_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                ApplyPerson = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                ConstructPos = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                ConstructUnit = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                MaterialCode = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.I32) {
                Num = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("stagingSiteCheckout_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (ApplyPerson != null && __isset.applyPerson) {
          field.Name = "applyPerson";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ApplyPerson);
          oprot.WriteFieldEnd();
        }
        if (ConstructPos != null && __isset.constructPos) {
          field.Name = "constructPos";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ConstructPos);
          oprot.WriteFieldEnd();
        }
        if (ConstructUnit != null && __isset.constructUnit) {
          field.Name = "constructUnit";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ConstructUnit);
          oprot.WriteFieldEnd();
        }
        if (MaterialCode != null && __isset.materialCode) {
          field.Name = "materialCode";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(MaterialCode);
          oprot.WriteFieldEnd();
        }
        if (__isset.num) {
          field.Name = "num";
          field.Type = TType.I32;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Num);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("stagingSiteCheckout_args(");
      bool __first = true;
      if (ApplyPerson != null && __isset.applyPerson) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ApplyPerson: ");
        __sb.Append(ApplyPerson);
      }
      if (ConstructPos != null && __isset.constructPos) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ConstructPos: ");
        __sb.Append(ConstructPos);
      }
      if (ConstructUnit != null && __isset.constructUnit) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ConstructUnit: ");
        __sb.Append(ConstructUnit);
      }
      if (MaterialCode != null && __isset.materialCode) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("MaterialCode: ");
        __sb.Append(MaterialCode);
      }
      if (__isset.num) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Num: ");
        __sb.Append(Num);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class stagingSiteCheckout_result : TBase
  {
    private bool _success;

    public bool Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public stagingSiteCheckout_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("stagingSiteCheckout_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("stagingSiteCheckout_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getTransportInfo_args : TBase
  {

    public getTransportInfo_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getTransportInfo_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getTransportInfo_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getTransportInfo_result : TBase
  {
    private List<transportInfo> _success;

    public List<transportInfo> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public getTransportInfo_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<transportInfo>();
                  TList _list41 = iprot.ReadListBegin();
                  for( int _i42 = 0; _i42 < _list41.Count; ++_i42)
                  {
                    transportInfo _elem43;
                    _elem43 = new transportInfo();
                    _elem43.Read(iprot);
                    Success.Add(_elem43);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getTransportInfo_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (transportInfo _iter44 in Success)
              {
                _iter44.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getTransportInfo_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getStagingInfo_args : TBase
  {
    private string _constructUnit;

    public string ConstructUnit
    {
      get
      {
        return _constructUnit;
      }
      set
      {
        __isset.constructUnit = true;
        this._constructUnit = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool constructUnit;
    }

    public getStagingInfo_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                ConstructUnit = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getStagingInfo_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (ConstructUnit != null && __isset.constructUnit) {
          field.Name = "constructUnit";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ConstructUnit);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getStagingInfo_args(");
      bool __first = true;
      if (ConstructUnit != null && __isset.constructUnit) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ConstructUnit: ");
        __sb.Append(ConstructUnit);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getStagingInfo_result : TBase
  {
    private List<stagingInfo> _success;

    public List<stagingInfo> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public getStagingInfo_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<stagingInfo>();
                  TList _list45 = iprot.ReadListBegin();
                  for( int _i46 = 0; _i46 < _list45.Count; ++_i46)
                  {
                    stagingInfo _elem47;
                    _elem47 = new stagingInfo();
                    _elem47.Read(iprot);
                    Success.Add(_elem47);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getStagingInfo_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (stagingInfo _iter48 in Success)
              {
                _iter48.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getStagingInfo_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getInStagingInfo_args : TBase
  {
    private string _constructUnit;

    public string ConstructUnit
    {
      get
      {
        return _constructUnit;
      }
      set
      {
        __isset.constructUnit = true;
        this._constructUnit = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool constructUnit;
    }

    public getInStagingInfo_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                ConstructUnit = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getInStagingInfo_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (ConstructUnit != null && __isset.constructUnit) {
          field.Name = "constructUnit";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ConstructUnit);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getInStagingInfo_args(");
      bool __first = true;
      if (ConstructUnit != null && __isset.constructUnit) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ConstructUnit: ");
        __sb.Append(ConstructUnit);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getInStagingInfo_result : TBase
  {
    private List<inStagingInfo> _success;

    public List<inStagingInfo> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public getInStagingInfo_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<inStagingInfo>();
                  TList _list49 = iprot.ReadListBegin();
                  for( int _i50 = 0; _i50 < _list49.Count; ++_i50)
                  {
                    inStagingInfo _elem51;
                    _elem51 = new inStagingInfo();
                    _elem51.Read(iprot);
                    Success.Add(_elem51);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getInStagingInfo_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (inStagingInfo _iter52 in Success)
              {
                _iter52.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getInStagingInfo_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class addPic_args : TBase
  {
    private string _ApplyDocCode;
    private List<string> _URL;

    public string ApplyDocCode
    {
      get
      {
        return _ApplyDocCode;
      }
      set
      {
        __isset.ApplyDocCode = true;
        this._ApplyDocCode = value;
      }
    }

    public List<string> URL
    {
      get
      {
        return _URL;
      }
      set
      {
        __isset.URL = true;
        this._URL = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool ApplyDocCode;
      public bool URL;
    }

    public addPic_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                ApplyDocCode = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.List) {
                {
                  URL = new List<string>();
                  TList _list53 = iprot.ReadListBegin();
                  for( int _i54 = 0; _i54 < _list53.Count; ++_i54)
                  {
                    string _elem55;
                    _elem55 = iprot.ReadString();
                    URL.Add(_elem55);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("addPic_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (ApplyDocCode != null && __isset.ApplyDocCode) {
          field.Name = "ApplyDocCode";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ApplyDocCode);
          oprot.WriteFieldEnd();
        }
        if (URL != null && __isset.URL) {
          field.Name = "URL";
          field.Type = TType.List;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, URL.Count));
            foreach (string _iter56 in URL)
            {
              oprot.WriteString(_iter56);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("addPic_args(");
      bool __first = true;
      if (ApplyDocCode != null && __isset.ApplyDocCode) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ApplyDocCode: ");
        __sb.Append(ApplyDocCode);
      }
      if (URL != null && __isset.URL) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("URL: ");
        __sb.Append(URL);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class addPic_result : TBase
  {
    private bool _success;

    public bool Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public addPic_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("addPic_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("addPic_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getPicsByApplyDocCode_args : TBase
  {
    private string _ApplyDocCode;

    public string ApplyDocCode
    {
      get
      {
        return _ApplyDocCode;
      }
      set
      {
        __isset.ApplyDocCode = true;
        this._ApplyDocCode = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool ApplyDocCode;
    }

    public getPicsByApplyDocCode_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                ApplyDocCode = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getPicsByApplyDocCode_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (ApplyDocCode != null && __isset.ApplyDocCode) {
          field.Name = "ApplyDocCode";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ApplyDocCode);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getPicsByApplyDocCode_args(");
      bool __first = true;
      if (ApplyDocCode != null && __isset.ApplyDocCode) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ApplyDocCode: ");
        __sb.Append(ApplyDocCode);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getPicsByApplyDocCode_result : TBase
  {
    private List<string> _success;

    public List<string> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public getPicsByApplyDocCode_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<string>();
                  TList _list57 = iprot.ReadListBegin();
                  for( int _i58 = 0; _i58 < _list57.Count; ++_i58)
                  {
                    string _elem59;
                    _elem59 = iprot.ReadString();
                    Success.Add(_elem59);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getPicsByApplyDocCode_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.String, Success.Count));
              foreach (string _iter60 in Success)
              {
                oprot.WriteString(_iter60);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getPicsByApplyDocCode_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class toPrint_args : TBase
  {

    public toPrint_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("toPrint_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("toPrint_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class toPrint_result : TBase
  {
    private bool _success;

    public bool Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public toPrint_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("toPrint_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("toPrint_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class callPrinter_args : TBase
  {

    public callPrinter_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("callPrinter_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("callPrinter_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class callPrinter_result : TBase
  {
    private List<Data> _success;

    public List<Data> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public callPrinter_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<Data>();
                  TList _list61 = iprot.ReadListBegin();
                  for( int _i62 = 0; _i62 < _list61.Count; ++_i62)
                  {
                    Data _elem63;
                    _elem63 = new Data();
                    _elem63.Read(iprot);
                    Success.Add(_elem63);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("callPrinter_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (Data _iter64 in Success)
              {
                _iter64.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("callPrinter_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
