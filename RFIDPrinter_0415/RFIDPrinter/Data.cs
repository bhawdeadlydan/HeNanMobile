/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class Data : TBase
{
  private string _projectCode;
  private string _code;
  private string _vendorName;
  private List<List<Item>> _batchGoods;

  public string ProjectCode
  {
    get
    {
      return _projectCode;
    }
    set
    {
      __isset.projectCode = true;
      this._projectCode = value;
    }
  }

  public string Code
  {
    get
    {
      return _code;
    }
    set
    {
      __isset.code = true;
      this._code = value;
    }
  }

  public string VendorName
  {
    get
    {
      return _vendorName;
    }
    set
    {
      __isset.vendorName = true;
      this._vendorName = value;
    }
  }

  public List<List<Item>> BatchGoods
  {
    get
    {
      return _batchGoods;
    }
    set
    {
      __isset.batchGoods = true;
      this._batchGoods = value;
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool projectCode;
    public bool code;
    public bool vendorName;
    public bool batchGoods;
  }

  public Data() {
  }

  public void Read (TProtocol iprot)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              ProjectCode = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              Code = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              VendorName = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.List) {
              {
                BatchGoods = new List<List<Item>>();
                TList _list8 = iprot.ReadListBegin();
                for( int _i9 = 0; _i9 < _list8.Count; ++_i9)
                {
                  List<Item> _elem10;
                  {
                    _elem10 = new List<Item>();
                    TList _list11 = iprot.ReadListBegin();
                    for( int _i12 = 0; _i12 < _list11.Count; ++_i12)
                    {
                      Item _elem13;
                      _elem13 = new Item();
                      _elem13.Read(iprot);
                      _elem10.Add(_elem13);
                    }
                    iprot.ReadListEnd();
                  }
                  BatchGoods.Add(_elem10);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public void Write(TProtocol oprot) {
    oprot.IncrementRecursionDepth();
    try
    {
      TStruct struc = new TStruct("Data");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (ProjectCode != null && __isset.projectCode) {
        field.Name = "projectCode";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(ProjectCode);
        oprot.WriteFieldEnd();
      }
      if (Code != null && __isset.code) {
        field.Name = "code";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Code);
        oprot.WriteFieldEnd();
      }
      if (VendorName != null && __isset.vendorName) {
        field.Name = "vendorName";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(VendorName);
        oprot.WriteFieldEnd();
      }
      if (BatchGoods != null && __isset.batchGoods) {
        field.Name = "batchGoods";
        field.Type = TType.List;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.List, BatchGoods.Count));
          foreach (List<Item> _iter14 in BatchGoods)
          {
            {
              oprot.WriteListBegin(new TList(TType.Struct, _iter14.Count));
              foreach (Item _iter15 in _iter14)
              {
                _iter15.Write(oprot);
              }
              oprot.WriteListEnd();
            }
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("Data(");
    bool __first = true;
    if (ProjectCode != null && __isset.projectCode) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("ProjectCode: ");
      __sb.Append(ProjectCode);
    }
    if (Code != null && __isset.code) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Code: ");
      __sb.Append(Code);
    }
    if (VendorName != null && __isset.vendorName) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("VendorName: ");
      __sb.Append(VendorName);
    }
    if (BatchGoods != null && __isset.batchGoods) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("BatchGoods: ");
      __sb.Append(BatchGoods);
    }
    __sb.Append(")");
    return __sb.ToString();
  }

}

