/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package rfid.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-04-14")
public class RFIDService {

  public interface Iface {

    public List<rfid.service.ASN> getReceivingSheets() throws org.apache.thrift.TException;

    public List<rfid.service.Good> getGoodsListByCode(String Code, boolean printable) throws org.apache.thrift.TException;

    public boolean printTag(String Code) throws org.apache.thrift.TException;

    public String getCodeByCNum(String CNum) throws org.apache.thrift.TException;

    public boolean bindLocationAndGoods(int LocationID, List<String> CNums) throws org.apache.thrift.TException;

    public List<rfid.service.POS> getApplySheets() throws org.apache.thrift.TException;

    public List<rfid.service.POS> getOutApplySheets() throws org.apache.thrift.TException;

    public rfid.service.POS getPOSInfoByApplyDocCode(String ApplyDocCode) throws org.apache.thrift.TException;

    public List<rfid.service.Good> getGoodsListByApplyDocCode(String ApplyDocCode) throws org.apache.thrift.TException;

    public boolean confirmRetrieval(String ApplyDocCode, Map<String,Integer> cartons) throws org.apache.thrift.TException;

    public boolean confirmReceiving(String Code) throws org.apache.thrift.TException;

    public rfid.service.Good getGoodByCNum(String CNum) throws org.apache.thrift.TException;

    public List<rfid.service.LocationInfo> getLocationListByItemErpCode(String ItemERPCode, boolean isBom) throws org.apache.thrift.TException;

    public List<rfid.service.Good> getGoodsByLocation(int Location) throws org.apache.thrift.TException;

    public String getApplyDocCodeByCNum(String CNum) throws org.apache.thrift.TException;

    public boolean confirmInventory(List<rfid.service.check> checks) throws org.apache.thrift.TException;

    public boolean confirmArrive(String charge, String Time, String Position, String Type, String PosApplyDocCode, double longitude, double latitude) throws org.apache.thrift.TException;

    public boolean stagingSiteCheckout(String applyPerson, String constructPos, String constructUnit, String materialCode, int num) throws org.apache.thrift.TException;

    public List<rfid.service.transportInfo> getTransportInfo() throws org.apache.thrift.TException;

    public List<rfid.service.stagingInfo> getStagingInfo(String constructUnit) throws org.apache.thrift.TException;

    public List<rfid.service.inStagingInfo> getInStagingInfo(String constructUnit) throws org.apache.thrift.TException;

    public boolean addPic(String ApplyDocCode, List<String> URL) throws org.apache.thrift.TException;

    public List<String> getPicsByApplyDocCode(String ApplyDocCode) throws org.apache.thrift.TException;

    public boolean toPrint() throws org.apache.thrift.TException;

    public List<rfid.service.Data> callPrinter() throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void getReceivingSheets(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getGoodsListByCode(String Code, boolean printable, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void printTag(String Code, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getCodeByCNum(String CNum, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void bindLocationAndGoods(int LocationID, List<String> CNums, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getApplySheets(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getOutApplySheets(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getPOSInfoByApplyDocCode(String ApplyDocCode, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getGoodsListByApplyDocCode(String ApplyDocCode, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void confirmRetrieval(String ApplyDocCode, Map<String,Integer> cartons, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void confirmReceiving(String Code, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getGoodByCNum(String CNum, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getLocationListByItemErpCode(String ItemERPCode, boolean isBom, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getGoodsByLocation(int Location, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getApplyDocCodeByCNum(String CNum, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void confirmInventory(List<rfid.service.check> checks, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void confirmArrive(String charge, String Time, String Position, String Type, String PosApplyDocCode, double longitude, double latitude, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void stagingSiteCheckout(String applyPerson, String constructPos, String constructUnit, String materialCode, int num, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getTransportInfo(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getStagingInfo(String constructUnit, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getInStagingInfo(String constructUnit, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void addPic(String ApplyDocCode, List<String> URL, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getPicsByApplyDocCode(String ApplyDocCode, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void toPrint(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void callPrinter(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public List<rfid.service.ASN> getReceivingSheets() throws org.apache.thrift.TException
    {
      send_getReceivingSheets();
      return recv_getReceivingSheets();
    }

    public void send_getReceivingSheets() throws org.apache.thrift.TException
    {
      getReceivingSheets_args args = new getReceivingSheets_args();
      sendBase("getReceivingSheets", args);
    }

    public List<rfid.service.ASN> recv_getReceivingSheets() throws org.apache.thrift.TException
    {
      getReceivingSheets_result result = new getReceivingSheets_result();
      receiveBase(result, "getReceivingSheets");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getReceivingSheets failed: unknown result");
    }

    public List<rfid.service.Good> getGoodsListByCode(String Code, boolean printable) throws org.apache.thrift.TException
    {
      send_getGoodsListByCode(Code, printable);
      return recv_getGoodsListByCode();
    }

    public void send_getGoodsListByCode(String Code, boolean printable) throws org.apache.thrift.TException
    {
      getGoodsListByCode_args args = new getGoodsListByCode_args();
      args.setCode(Code);
      args.setPrintable(printable);
      sendBase("getGoodsListByCode", args);
    }

    public List<rfid.service.Good> recv_getGoodsListByCode() throws org.apache.thrift.TException
    {
      getGoodsListByCode_result result = new getGoodsListByCode_result();
      receiveBase(result, "getGoodsListByCode");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getGoodsListByCode failed: unknown result");
    }

    public boolean printTag(String Code) throws org.apache.thrift.TException
    {
      send_printTag(Code);
      return recv_printTag();
    }

    public void send_printTag(String Code) throws org.apache.thrift.TException
    {
      printTag_args args = new printTag_args();
      args.setCode(Code);
      sendBase("printTag", args);
    }

    public boolean recv_printTag() throws org.apache.thrift.TException
    {
      printTag_result result = new printTag_result();
      receiveBase(result, "printTag");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "printTag failed: unknown result");
    }

    public String getCodeByCNum(String CNum) throws org.apache.thrift.TException
    {
      send_getCodeByCNum(CNum);
      return recv_getCodeByCNum();
    }

    public void send_getCodeByCNum(String CNum) throws org.apache.thrift.TException
    {
      getCodeByCNum_args args = new getCodeByCNum_args();
      args.setCNum(CNum);
      sendBase("getCodeByCNum", args);
    }

    public String recv_getCodeByCNum() throws org.apache.thrift.TException
    {
      getCodeByCNum_result result = new getCodeByCNum_result();
      receiveBase(result, "getCodeByCNum");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getCodeByCNum failed: unknown result");
    }

    public boolean bindLocationAndGoods(int LocationID, List<String> CNums) throws org.apache.thrift.TException
    {
      send_bindLocationAndGoods(LocationID, CNums);
      return recv_bindLocationAndGoods();
    }

    public void send_bindLocationAndGoods(int LocationID, List<String> CNums) throws org.apache.thrift.TException
    {
      bindLocationAndGoods_args args = new bindLocationAndGoods_args();
      args.setLocationID(LocationID);
      args.setCNums(CNums);
      sendBase("bindLocationAndGoods", args);
    }

    public boolean recv_bindLocationAndGoods() throws org.apache.thrift.TException
    {
      bindLocationAndGoods_result result = new bindLocationAndGoods_result();
      receiveBase(result, "bindLocationAndGoods");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "bindLocationAndGoods failed: unknown result");
    }

    public List<rfid.service.POS> getApplySheets() throws org.apache.thrift.TException
    {
      send_getApplySheets();
      return recv_getApplySheets();
    }

    public void send_getApplySheets() throws org.apache.thrift.TException
    {
      getApplySheets_args args = new getApplySheets_args();
      sendBase("getApplySheets", args);
    }

    public List<rfid.service.POS> recv_getApplySheets() throws org.apache.thrift.TException
    {
      getApplySheets_result result = new getApplySheets_result();
      receiveBase(result, "getApplySheets");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getApplySheets failed: unknown result");
    }

    public List<rfid.service.POS> getOutApplySheets() throws org.apache.thrift.TException
    {
      send_getOutApplySheets();
      return recv_getOutApplySheets();
    }

    public void send_getOutApplySheets() throws org.apache.thrift.TException
    {
      getOutApplySheets_args args = new getOutApplySheets_args();
      sendBase("getOutApplySheets", args);
    }

    public List<rfid.service.POS> recv_getOutApplySheets() throws org.apache.thrift.TException
    {
      getOutApplySheets_result result = new getOutApplySheets_result();
      receiveBase(result, "getOutApplySheets");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getOutApplySheets failed: unknown result");
    }

    public rfid.service.POS getPOSInfoByApplyDocCode(String ApplyDocCode) throws org.apache.thrift.TException
    {
      send_getPOSInfoByApplyDocCode(ApplyDocCode);
      return recv_getPOSInfoByApplyDocCode();
    }

    public void send_getPOSInfoByApplyDocCode(String ApplyDocCode) throws org.apache.thrift.TException
    {
      getPOSInfoByApplyDocCode_args args = new getPOSInfoByApplyDocCode_args();
      args.setApplyDocCode(ApplyDocCode);
      sendBase("getPOSInfoByApplyDocCode", args);
    }

    public rfid.service.POS recv_getPOSInfoByApplyDocCode() throws org.apache.thrift.TException
    {
      getPOSInfoByApplyDocCode_result result = new getPOSInfoByApplyDocCode_result();
      receiveBase(result, "getPOSInfoByApplyDocCode");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getPOSInfoByApplyDocCode failed: unknown result");
    }

    public List<rfid.service.Good> getGoodsListByApplyDocCode(String ApplyDocCode) throws org.apache.thrift.TException
    {
      send_getGoodsListByApplyDocCode(ApplyDocCode);
      return recv_getGoodsListByApplyDocCode();
    }

    public void send_getGoodsListByApplyDocCode(String ApplyDocCode) throws org.apache.thrift.TException
    {
      getGoodsListByApplyDocCode_args args = new getGoodsListByApplyDocCode_args();
      args.setApplyDocCode(ApplyDocCode);
      sendBase("getGoodsListByApplyDocCode", args);
    }

    public List<rfid.service.Good> recv_getGoodsListByApplyDocCode() throws org.apache.thrift.TException
    {
      getGoodsListByApplyDocCode_result result = new getGoodsListByApplyDocCode_result();
      receiveBase(result, "getGoodsListByApplyDocCode");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getGoodsListByApplyDocCode failed: unknown result");
    }

    public boolean confirmRetrieval(String ApplyDocCode, Map<String,Integer> cartons) throws org.apache.thrift.TException
    {
      send_confirmRetrieval(ApplyDocCode, cartons);
      return recv_confirmRetrieval();
    }

    public void send_confirmRetrieval(String ApplyDocCode, Map<String,Integer> cartons) throws org.apache.thrift.TException
    {
      confirmRetrieval_args args = new confirmRetrieval_args();
      args.setApplyDocCode(ApplyDocCode);
      args.setCartons(cartons);
      sendBase("confirmRetrieval", args);
    }

    public boolean recv_confirmRetrieval() throws org.apache.thrift.TException
    {
      confirmRetrieval_result result = new confirmRetrieval_result();
      receiveBase(result, "confirmRetrieval");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "confirmRetrieval failed: unknown result");
    }

    public boolean confirmReceiving(String Code) throws org.apache.thrift.TException
    {
      send_confirmReceiving(Code);
      return recv_confirmReceiving();
    }

    public void send_confirmReceiving(String Code) throws org.apache.thrift.TException
    {
      confirmReceiving_args args = new confirmReceiving_args();
      args.setCode(Code);
      sendBase("confirmReceiving", args);
    }

    public boolean recv_confirmReceiving() throws org.apache.thrift.TException
    {
      confirmReceiving_result result = new confirmReceiving_result();
      receiveBase(result, "confirmReceiving");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "confirmReceiving failed: unknown result");
    }

    public rfid.service.Good getGoodByCNum(String CNum) throws org.apache.thrift.TException
    {
      send_getGoodByCNum(CNum);
      return recv_getGoodByCNum();
    }

    public void send_getGoodByCNum(String CNum) throws org.apache.thrift.TException
    {
      getGoodByCNum_args args = new getGoodByCNum_args();
      args.setCNum(CNum);
      sendBase("getGoodByCNum", args);
    }

    public rfid.service.Good recv_getGoodByCNum() throws org.apache.thrift.TException
    {
      getGoodByCNum_result result = new getGoodByCNum_result();
      receiveBase(result, "getGoodByCNum");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getGoodByCNum failed: unknown result");
    }

    public List<rfid.service.LocationInfo> getLocationListByItemErpCode(String ItemERPCode, boolean isBom) throws org.apache.thrift.TException
    {
      send_getLocationListByItemErpCode(ItemERPCode, isBom);
      return recv_getLocationListByItemErpCode();
    }

    public void send_getLocationListByItemErpCode(String ItemERPCode, boolean isBom) throws org.apache.thrift.TException
    {
      getLocationListByItemErpCode_args args = new getLocationListByItemErpCode_args();
      args.setItemERPCode(ItemERPCode);
      args.setIsBom(isBom);
      sendBase("getLocationListByItemErpCode", args);
    }

    public List<rfid.service.LocationInfo> recv_getLocationListByItemErpCode() throws org.apache.thrift.TException
    {
      getLocationListByItemErpCode_result result = new getLocationListByItemErpCode_result();
      receiveBase(result, "getLocationListByItemErpCode");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getLocationListByItemErpCode failed: unknown result");
    }

    public List<rfid.service.Good> getGoodsByLocation(int Location) throws org.apache.thrift.TException
    {
      send_getGoodsByLocation(Location);
      return recv_getGoodsByLocation();
    }

    public void send_getGoodsByLocation(int Location) throws org.apache.thrift.TException
    {
      getGoodsByLocation_args args = new getGoodsByLocation_args();
      args.setLocation(Location);
      sendBase("getGoodsByLocation", args);
    }

    public List<rfid.service.Good> recv_getGoodsByLocation() throws org.apache.thrift.TException
    {
      getGoodsByLocation_result result = new getGoodsByLocation_result();
      receiveBase(result, "getGoodsByLocation");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getGoodsByLocation failed: unknown result");
    }

    public String getApplyDocCodeByCNum(String CNum) throws org.apache.thrift.TException
    {
      send_getApplyDocCodeByCNum(CNum);
      return recv_getApplyDocCodeByCNum();
    }

    public void send_getApplyDocCodeByCNum(String CNum) throws org.apache.thrift.TException
    {
      getApplyDocCodeByCNum_args args = new getApplyDocCodeByCNum_args();
      args.setCNum(CNum);
      sendBase("getApplyDocCodeByCNum", args);
    }

    public String recv_getApplyDocCodeByCNum() throws org.apache.thrift.TException
    {
      getApplyDocCodeByCNum_result result = new getApplyDocCodeByCNum_result();
      receiveBase(result, "getApplyDocCodeByCNum");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getApplyDocCodeByCNum failed: unknown result");
    }

    public boolean confirmInventory(List<rfid.service.check> checks) throws org.apache.thrift.TException
    {
      send_confirmInventory(checks);
      return recv_confirmInventory();
    }

    public void send_confirmInventory(List<rfid.service.check> checks) throws org.apache.thrift.TException
    {
      confirmInventory_args args = new confirmInventory_args();
      args.setChecks(checks);
      sendBase("confirmInventory", args);
    }

    public boolean recv_confirmInventory() throws org.apache.thrift.TException
    {
      confirmInventory_result result = new confirmInventory_result();
      receiveBase(result, "confirmInventory");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "confirmInventory failed: unknown result");
    }

    public boolean confirmArrive(String charge, String Time, String Position, String Type, String PosApplyDocCode, double longitude, double latitude) throws org.apache.thrift.TException
    {
      send_confirmArrive(charge, Time, Position, Type, PosApplyDocCode, longitude, latitude);
      return recv_confirmArrive();
    }

    public void send_confirmArrive(String charge, String Time, String Position, String Type, String PosApplyDocCode, double longitude, double latitude) throws org.apache.thrift.TException
    {
      confirmArrive_args args = new confirmArrive_args();
      args.setCharge(charge);
      args.setTime(Time);
      args.setPosition(Position);
      args.setType(Type);
      args.setPosApplyDocCode(PosApplyDocCode);
      args.setLongitude(longitude);
      args.setLatitude(latitude);
      sendBase("confirmArrive", args);
    }

    public boolean recv_confirmArrive() throws org.apache.thrift.TException
    {
      confirmArrive_result result = new confirmArrive_result();
      receiveBase(result, "confirmArrive");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "confirmArrive failed: unknown result");
    }

    public boolean stagingSiteCheckout(String applyPerson, String constructPos, String constructUnit, String materialCode, int num) throws org.apache.thrift.TException
    {
      send_stagingSiteCheckout(applyPerson, constructPos, constructUnit, materialCode, num);
      return recv_stagingSiteCheckout();
    }

    public void send_stagingSiteCheckout(String applyPerson, String constructPos, String constructUnit, String materialCode, int num) throws org.apache.thrift.TException
    {
      stagingSiteCheckout_args args = new stagingSiteCheckout_args();
      args.setApplyPerson(applyPerson);
      args.setConstructPos(constructPos);
      args.setConstructUnit(constructUnit);
      args.setMaterialCode(materialCode);
      args.setNum(num);
      sendBase("stagingSiteCheckout", args);
    }

    public boolean recv_stagingSiteCheckout() throws org.apache.thrift.TException
    {
      stagingSiteCheckout_result result = new stagingSiteCheckout_result();
      receiveBase(result, "stagingSiteCheckout");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "stagingSiteCheckout failed: unknown result");
    }

    public List<rfid.service.transportInfo> getTransportInfo() throws org.apache.thrift.TException
    {
      send_getTransportInfo();
      return recv_getTransportInfo();
    }

    public void send_getTransportInfo() throws org.apache.thrift.TException
    {
      getTransportInfo_args args = new getTransportInfo_args();
      sendBase("getTransportInfo", args);
    }

    public List<rfid.service.transportInfo> recv_getTransportInfo() throws org.apache.thrift.TException
    {
      getTransportInfo_result result = new getTransportInfo_result();
      receiveBase(result, "getTransportInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getTransportInfo failed: unknown result");
    }

    public List<rfid.service.stagingInfo> getStagingInfo(String constructUnit) throws org.apache.thrift.TException
    {
      send_getStagingInfo(constructUnit);
      return recv_getStagingInfo();
    }

    public void send_getStagingInfo(String constructUnit) throws org.apache.thrift.TException
    {
      getStagingInfo_args args = new getStagingInfo_args();
      args.setConstructUnit(constructUnit);
      sendBase("getStagingInfo", args);
    }

    public List<rfid.service.stagingInfo> recv_getStagingInfo() throws org.apache.thrift.TException
    {
      getStagingInfo_result result = new getStagingInfo_result();
      receiveBase(result, "getStagingInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getStagingInfo failed: unknown result");
    }

    public List<rfid.service.inStagingInfo> getInStagingInfo(String constructUnit) throws org.apache.thrift.TException
    {
      send_getInStagingInfo(constructUnit);
      return recv_getInStagingInfo();
    }

    public void send_getInStagingInfo(String constructUnit) throws org.apache.thrift.TException
    {
      getInStagingInfo_args args = new getInStagingInfo_args();
      args.setConstructUnit(constructUnit);
      sendBase("getInStagingInfo", args);
    }

    public List<rfid.service.inStagingInfo> recv_getInStagingInfo() throws org.apache.thrift.TException
    {
      getInStagingInfo_result result = new getInStagingInfo_result();
      receiveBase(result, "getInStagingInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getInStagingInfo failed: unknown result");
    }

    public boolean addPic(String ApplyDocCode, List<String> URL) throws org.apache.thrift.TException
    {
      send_addPic(ApplyDocCode, URL);
      return recv_addPic();
    }

    public void send_addPic(String ApplyDocCode, List<String> URL) throws org.apache.thrift.TException
    {
      addPic_args args = new addPic_args();
      args.setApplyDocCode(ApplyDocCode);
      args.setURL(URL);
      sendBase("addPic", args);
    }

    public boolean recv_addPic() throws org.apache.thrift.TException
    {
      addPic_result result = new addPic_result();
      receiveBase(result, "addPic");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addPic failed: unknown result");
    }

    public List<String> getPicsByApplyDocCode(String ApplyDocCode) throws org.apache.thrift.TException
    {
      send_getPicsByApplyDocCode(ApplyDocCode);
      return recv_getPicsByApplyDocCode();
    }

    public void send_getPicsByApplyDocCode(String ApplyDocCode) throws org.apache.thrift.TException
    {
      getPicsByApplyDocCode_args args = new getPicsByApplyDocCode_args();
      args.setApplyDocCode(ApplyDocCode);
      sendBase("getPicsByApplyDocCode", args);
    }

    public List<String> recv_getPicsByApplyDocCode() throws org.apache.thrift.TException
    {
      getPicsByApplyDocCode_result result = new getPicsByApplyDocCode_result();
      receiveBase(result, "getPicsByApplyDocCode");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getPicsByApplyDocCode failed: unknown result");
    }

    public boolean toPrint() throws org.apache.thrift.TException
    {
      send_toPrint();
      return recv_toPrint();
    }

    public void send_toPrint() throws org.apache.thrift.TException
    {
      toPrint_args args = new toPrint_args();
      sendBase("toPrint", args);
    }

    public boolean recv_toPrint() throws org.apache.thrift.TException
    {
      toPrint_result result = new toPrint_result();
      receiveBase(result, "toPrint");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "toPrint failed: unknown result");
    }

    public List<rfid.service.Data> callPrinter() throws org.apache.thrift.TException
    {
      send_callPrinter();
      return recv_callPrinter();
    }

    public void send_callPrinter() throws org.apache.thrift.TException
    {
      callPrinter_args args = new callPrinter_args();
      sendBase("callPrinter", args);
    }

    public List<rfid.service.Data> recv_callPrinter() throws org.apache.thrift.TException
    {
      callPrinter_result result = new callPrinter_result();
      receiveBase(result, "callPrinter");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "callPrinter failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getReceivingSheets(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getReceivingSheets_call method_call = new getReceivingSheets_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getReceivingSheets_call extends org.apache.thrift.async.TAsyncMethodCall {
      public getReceivingSheets_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getReceivingSheets", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getReceivingSheets_args args = new getReceivingSheets_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<rfid.service.ASN> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getReceivingSheets();
      }
    }

    public void getGoodsListByCode(String Code, boolean printable, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getGoodsListByCode_call method_call = new getGoodsListByCode_call(Code, printable, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getGoodsListByCode_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String Code;
      private boolean printable;
      public getGoodsListByCode_call(String Code, boolean printable, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.Code = Code;
        this.printable = printable;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getGoodsListByCode", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getGoodsListByCode_args args = new getGoodsListByCode_args();
        args.setCode(Code);
        args.setPrintable(printable);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<rfid.service.Good> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getGoodsListByCode();
      }
    }

    public void printTag(String Code, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      printTag_call method_call = new printTag_call(Code, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class printTag_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String Code;
      public printTag_call(String Code, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.Code = Code;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("printTag", org.apache.thrift.protocol.TMessageType.CALL, 0));
        printTag_args args = new printTag_args();
        args.setCode(Code);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_printTag();
      }
    }

    public void getCodeByCNum(String CNum, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getCodeByCNum_call method_call = new getCodeByCNum_call(CNum, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getCodeByCNum_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String CNum;
      public getCodeByCNum_call(String CNum, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.CNum = CNum;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getCodeByCNum", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getCodeByCNum_args args = new getCodeByCNum_args();
        args.setCNum(CNum);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getCodeByCNum();
      }
    }

    public void bindLocationAndGoods(int LocationID, List<String> CNums, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      bindLocationAndGoods_call method_call = new bindLocationAndGoods_call(LocationID, CNums, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class bindLocationAndGoods_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int LocationID;
      private List<String> CNums;
      public bindLocationAndGoods_call(int LocationID, List<String> CNums, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.LocationID = LocationID;
        this.CNums = CNums;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("bindLocationAndGoods", org.apache.thrift.protocol.TMessageType.CALL, 0));
        bindLocationAndGoods_args args = new bindLocationAndGoods_args();
        args.setLocationID(LocationID);
        args.setCNums(CNums);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_bindLocationAndGoods();
      }
    }

    public void getApplySheets(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getApplySheets_call method_call = new getApplySheets_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getApplySheets_call extends org.apache.thrift.async.TAsyncMethodCall {
      public getApplySheets_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getApplySheets", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getApplySheets_args args = new getApplySheets_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<rfid.service.POS> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getApplySheets();
      }
    }

    public void getOutApplySheets(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getOutApplySheets_call method_call = new getOutApplySheets_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getOutApplySheets_call extends org.apache.thrift.async.TAsyncMethodCall {
      public getOutApplySheets_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getOutApplySheets", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getOutApplySheets_args args = new getOutApplySheets_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<rfid.service.POS> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getOutApplySheets();
      }
    }

    public void getPOSInfoByApplyDocCode(String ApplyDocCode, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getPOSInfoByApplyDocCode_call method_call = new getPOSInfoByApplyDocCode_call(ApplyDocCode, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getPOSInfoByApplyDocCode_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String ApplyDocCode;
      public getPOSInfoByApplyDocCode_call(String ApplyDocCode, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ApplyDocCode = ApplyDocCode;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getPOSInfoByApplyDocCode", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getPOSInfoByApplyDocCode_args args = new getPOSInfoByApplyDocCode_args();
        args.setApplyDocCode(ApplyDocCode);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public rfid.service.POS getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getPOSInfoByApplyDocCode();
      }
    }

    public void getGoodsListByApplyDocCode(String ApplyDocCode, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getGoodsListByApplyDocCode_call method_call = new getGoodsListByApplyDocCode_call(ApplyDocCode, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getGoodsListByApplyDocCode_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String ApplyDocCode;
      public getGoodsListByApplyDocCode_call(String ApplyDocCode, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ApplyDocCode = ApplyDocCode;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getGoodsListByApplyDocCode", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getGoodsListByApplyDocCode_args args = new getGoodsListByApplyDocCode_args();
        args.setApplyDocCode(ApplyDocCode);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<rfid.service.Good> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getGoodsListByApplyDocCode();
      }
    }

    public void confirmRetrieval(String ApplyDocCode, Map<String,Integer> cartons, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      confirmRetrieval_call method_call = new confirmRetrieval_call(ApplyDocCode, cartons, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class confirmRetrieval_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String ApplyDocCode;
      private Map<String,Integer> cartons;
      public confirmRetrieval_call(String ApplyDocCode, Map<String,Integer> cartons, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ApplyDocCode = ApplyDocCode;
        this.cartons = cartons;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("confirmRetrieval", org.apache.thrift.protocol.TMessageType.CALL, 0));
        confirmRetrieval_args args = new confirmRetrieval_args();
        args.setApplyDocCode(ApplyDocCode);
        args.setCartons(cartons);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_confirmRetrieval();
      }
    }

    public void confirmReceiving(String Code, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      confirmReceiving_call method_call = new confirmReceiving_call(Code, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class confirmReceiving_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String Code;
      public confirmReceiving_call(String Code, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.Code = Code;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("confirmReceiving", org.apache.thrift.protocol.TMessageType.CALL, 0));
        confirmReceiving_args args = new confirmReceiving_args();
        args.setCode(Code);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_confirmReceiving();
      }
    }

    public void getGoodByCNum(String CNum, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getGoodByCNum_call method_call = new getGoodByCNum_call(CNum, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getGoodByCNum_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String CNum;
      public getGoodByCNum_call(String CNum, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.CNum = CNum;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getGoodByCNum", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getGoodByCNum_args args = new getGoodByCNum_args();
        args.setCNum(CNum);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public rfid.service.Good getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getGoodByCNum();
      }
    }

    public void getLocationListByItemErpCode(String ItemERPCode, boolean isBom, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getLocationListByItemErpCode_call method_call = new getLocationListByItemErpCode_call(ItemERPCode, isBom, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getLocationListByItemErpCode_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String ItemERPCode;
      private boolean isBom;
      public getLocationListByItemErpCode_call(String ItemERPCode, boolean isBom, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ItemERPCode = ItemERPCode;
        this.isBom = isBom;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getLocationListByItemErpCode", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getLocationListByItemErpCode_args args = new getLocationListByItemErpCode_args();
        args.setItemERPCode(ItemERPCode);
        args.setIsBom(isBom);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<rfid.service.LocationInfo> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getLocationListByItemErpCode();
      }
    }

    public void getGoodsByLocation(int Location, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getGoodsByLocation_call method_call = new getGoodsByLocation_call(Location, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getGoodsByLocation_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int Location;
      public getGoodsByLocation_call(int Location, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.Location = Location;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getGoodsByLocation", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getGoodsByLocation_args args = new getGoodsByLocation_args();
        args.setLocation(Location);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<rfid.service.Good> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getGoodsByLocation();
      }
    }

    public void getApplyDocCodeByCNum(String CNum, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getApplyDocCodeByCNum_call method_call = new getApplyDocCodeByCNum_call(CNum, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getApplyDocCodeByCNum_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String CNum;
      public getApplyDocCodeByCNum_call(String CNum, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.CNum = CNum;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getApplyDocCodeByCNum", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getApplyDocCodeByCNum_args args = new getApplyDocCodeByCNum_args();
        args.setCNum(CNum);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getApplyDocCodeByCNum();
      }
    }

    public void confirmInventory(List<rfid.service.check> checks, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      confirmInventory_call method_call = new confirmInventory_call(checks, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class confirmInventory_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<rfid.service.check> checks;
      public confirmInventory_call(List<rfid.service.check> checks, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.checks = checks;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("confirmInventory", org.apache.thrift.protocol.TMessageType.CALL, 0));
        confirmInventory_args args = new confirmInventory_args();
        args.setChecks(checks);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_confirmInventory();
      }
    }

    public void confirmArrive(String charge, String Time, String Position, String Type, String PosApplyDocCode, double longitude, double latitude, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      confirmArrive_call method_call = new confirmArrive_call(charge, Time, Position, Type, PosApplyDocCode, longitude, latitude, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class confirmArrive_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String charge;
      private String Time;
      private String Position;
      private String Type;
      private String PosApplyDocCode;
      private double longitude;
      private double latitude;
      public confirmArrive_call(String charge, String Time, String Position, String Type, String PosApplyDocCode, double longitude, double latitude, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.charge = charge;
        this.Time = Time;
        this.Position = Position;
        this.Type = Type;
        this.PosApplyDocCode = PosApplyDocCode;
        this.longitude = longitude;
        this.latitude = latitude;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("confirmArrive", org.apache.thrift.protocol.TMessageType.CALL, 0));
        confirmArrive_args args = new confirmArrive_args();
        args.setCharge(charge);
        args.setTime(Time);
        args.setPosition(Position);
        args.setType(Type);
        args.setPosApplyDocCode(PosApplyDocCode);
        args.setLongitude(longitude);
        args.setLatitude(latitude);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_confirmArrive();
      }
    }

    public void stagingSiteCheckout(String applyPerson, String constructPos, String constructUnit, String materialCode, int num, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      stagingSiteCheckout_call method_call = new stagingSiteCheckout_call(applyPerson, constructPos, constructUnit, materialCode, num, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class stagingSiteCheckout_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String applyPerson;
      private String constructPos;
      private String constructUnit;
      private String materialCode;
      private int num;
      public stagingSiteCheckout_call(String applyPerson, String constructPos, String constructUnit, String materialCode, int num, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.applyPerson = applyPerson;
        this.constructPos = constructPos;
        this.constructUnit = constructUnit;
        this.materialCode = materialCode;
        this.num = num;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("stagingSiteCheckout", org.apache.thrift.protocol.TMessageType.CALL, 0));
        stagingSiteCheckout_args args = new stagingSiteCheckout_args();
        args.setApplyPerson(applyPerson);
        args.setConstructPos(constructPos);
        args.setConstructUnit(constructUnit);
        args.setMaterialCode(materialCode);
        args.setNum(num);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_stagingSiteCheckout();
      }
    }

    public void getTransportInfo(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getTransportInfo_call method_call = new getTransportInfo_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getTransportInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      public getTransportInfo_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getTransportInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getTransportInfo_args args = new getTransportInfo_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<rfid.service.transportInfo> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getTransportInfo();
      }
    }

    public void getStagingInfo(String constructUnit, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getStagingInfo_call method_call = new getStagingInfo_call(constructUnit, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getStagingInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String constructUnit;
      public getStagingInfo_call(String constructUnit, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.constructUnit = constructUnit;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getStagingInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getStagingInfo_args args = new getStagingInfo_args();
        args.setConstructUnit(constructUnit);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<rfid.service.stagingInfo> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getStagingInfo();
      }
    }

    public void getInStagingInfo(String constructUnit, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getInStagingInfo_call method_call = new getInStagingInfo_call(constructUnit, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getInStagingInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String constructUnit;
      public getInStagingInfo_call(String constructUnit, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.constructUnit = constructUnit;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getInStagingInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getInStagingInfo_args args = new getInStagingInfo_args();
        args.setConstructUnit(constructUnit);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<rfid.service.inStagingInfo> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getInStagingInfo();
      }
    }

    public void addPic(String ApplyDocCode, List<String> URL, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addPic_call method_call = new addPic_call(ApplyDocCode, URL, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addPic_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String ApplyDocCode;
      private List<String> URL;
      public addPic_call(String ApplyDocCode, List<String> URL, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ApplyDocCode = ApplyDocCode;
        this.URL = URL;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addPic", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addPic_args args = new addPic_args();
        args.setApplyDocCode(ApplyDocCode);
        args.setURL(URL);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addPic();
      }
    }

    public void getPicsByApplyDocCode(String ApplyDocCode, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getPicsByApplyDocCode_call method_call = new getPicsByApplyDocCode_call(ApplyDocCode, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getPicsByApplyDocCode_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String ApplyDocCode;
      public getPicsByApplyDocCode_call(String ApplyDocCode, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ApplyDocCode = ApplyDocCode;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getPicsByApplyDocCode", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getPicsByApplyDocCode_args args = new getPicsByApplyDocCode_args();
        args.setApplyDocCode(ApplyDocCode);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<String> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getPicsByApplyDocCode();
      }
    }

    public void toPrint(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      toPrint_call method_call = new toPrint_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class toPrint_call extends org.apache.thrift.async.TAsyncMethodCall {
      public toPrint_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("toPrint", org.apache.thrift.protocol.TMessageType.CALL, 0));
        toPrint_args args = new toPrint_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_toPrint();
      }
    }

    public void callPrinter(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      callPrinter_call method_call = new callPrinter_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class callPrinter_call extends org.apache.thrift.async.TAsyncMethodCall {
      public callPrinter_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("callPrinter", org.apache.thrift.protocol.TMessageType.CALL, 0));
        callPrinter_args args = new callPrinter_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<rfid.service.Data> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_callPrinter();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getReceivingSheets", new getReceivingSheets());
      processMap.put("getGoodsListByCode", new getGoodsListByCode());
      processMap.put("printTag", new printTag());
      processMap.put("getCodeByCNum", new getCodeByCNum());
      processMap.put("bindLocationAndGoods", new bindLocationAndGoods());
      processMap.put("getApplySheets", new getApplySheets());
      processMap.put("getOutApplySheets", new getOutApplySheets());
      processMap.put("getPOSInfoByApplyDocCode", new getPOSInfoByApplyDocCode());
      processMap.put("getGoodsListByApplyDocCode", new getGoodsListByApplyDocCode());
      processMap.put("confirmRetrieval", new confirmRetrieval());
      processMap.put("confirmReceiving", new confirmReceiving());
      processMap.put("getGoodByCNum", new getGoodByCNum());
      processMap.put("getLocationListByItemErpCode", new getLocationListByItemErpCode());
      processMap.put("getGoodsByLocation", new getGoodsByLocation());
      processMap.put("getApplyDocCodeByCNum", new getApplyDocCodeByCNum());
      processMap.put("confirmInventory", new confirmInventory());
      processMap.put("confirmArrive", new confirmArrive());
      processMap.put("stagingSiteCheckout", new stagingSiteCheckout());
      processMap.put("getTransportInfo", new getTransportInfo());
      processMap.put("getStagingInfo", new getStagingInfo());
      processMap.put("getInStagingInfo", new getInStagingInfo());
      processMap.put("addPic", new addPic());
      processMap.put("getPicsByApplyDocCode", new getPicsByApplyDocCode());
      processMap.put("toPrint", new toPrint());
      processMap.put("callPrinter", new callPrinter());
      return processMap;
    }

    public static class getReceivingSheets<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getReceivingSheets_args> {
      public getReceivingSheets() {
        super("getReceivingSheets");
      }

      public getReceivingSheets_args getEmptyArgsInstance() {
        return new getReceivingSheets_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getReceivingSheets_result getResult(I iface, getReceivingSheets_args args) throws org.apache.thrift.TException {
        getReceivingSheets_result result = new getReceivingSheets_result();
        result.success = iface.getReceivingSheets();
        return result;
      }
    }

    public static class getGoodsListByCode<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getGoodsListByCode_args> {
      public getGoodsListByCode() {
        super("getGoodsListByCode");
      }

      public getGoodsListByCode_args getEmptyArgsInstance() {
        return new getGoodsListByCode_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getGoodsListByCode_result getResult(I iface, getGoodsListByCode_args args) throws org.apache.thrift.TException {
        getGoodsListByCode_result result = new getGoodsListByCode_result();
        result.success = iface.getGoodsListByCode(args.Code, args.printable);
        return result;
      }
    }

    public static class printTag<I extends Iface> extends org.apache.thrift.ProcessFunction<I, printTag_args> {
      public printTag() {
        super("printTag");
      }

      public printTag_args getEmptyArgsInstance() {
        return new printTag_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public printTag_result getResult(I iface, printTag_args args) throws org.apache.thrift.TException {
        printTag_result result = new printTag_result();
        result.success = iface.printTag(args.Code);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class getCodeByCNum<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getCodeByCNum_args> {
      public getCodeByCNum() {
        super("getCodeByCNum");
      }

      public getCodeByCNum_args getEmptyArgsInstance() {
        return new getCodeByCNum_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getCodeByCNum_result getResult(I iface, getCodeByCNum_args args) throws org.apache.thrift.TException {
        getCodeByCNum_result result = new getCodeByCNum_result();
        result.success = iface.getCodeByCNum(args.CNum);
        return result;
      }
    }

    public static class bindLocationAndGoods<I extends Iface> extends org.apache.thrift.ProcessFunction<I, bindLocationAndGoods_args> {
      public bindLocationAndGoods() {
        super("bindLocationAndGoods");
      }

      public bindLocationAndGoods_args getEmptyArgsInstance() {
        return new bindLocationAndGoods_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public bindLocationAndGoods_result getResult(I iface, bindLocationAndGoods_args args) throws org.apache.thrift.TException {
        bindLocationAndGoods_result result = new bindLocationAndGoods_result();
        result.success = iface.bindLocationAndGoods(args.LocationID, args.CNums);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class getApplySheets<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getApplySheets_args> {
      public getApplySheets() {
        super("getApplySheets");
      }

      public getApplySheets_args getEmptyArgsInstance() {
        return new getApplySheets_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getApplySheets_result getResult(I iface, getApplySheets_args args) throws org.apache.thrift.TException {
        getApplySheets_result result = new getApplySheets_result();
        result.success = iface.getApplySheets();
        return result;
      }
    }

    public static class getOutApplySheets<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getOutApplySheets_args> {
      public getOutApplySheets() {
        super("getOutApplySheets");
      }

      public getOutApplySheets_args getEmptyArgsInstance() {
        return new getOutApplySheets_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getOutApplySheets_result getResult(I iface, getOutApplySheets_args args) throws org.apache.thrift.TException {
        getOutApplySheets_result result = new getOutApplySheets_result();
        result.success = iface.getOutApplySheets();
        return result;
      }
    }

    public static class getPOSInfoByApplyDocCode<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getPOSInfoByApplyDocCode_args> {
      public getPOSInfoByApplyDocCode() {
        super("getPOSInfoByApplyDocCode");
      }

      public getPOSInfoByApplyDocCode_args getEmptyArgsInstance() {
        return new getPOSInfoByApplyDocCode_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getPOSInfoByApplyDocCode_result getResult(I iface, getPOSInfoByApplyDocCode_args args) throws org.apache.thrift.TException {
        getPOSInfoByApplyDocCode_result result = new getPOSInfoByApplyDocCode_result();
        result.success = iface.getPOSInfoByApplyDocCode(args.ApplyDocCode);
        return result;
      }
    }

    public static class getGoodsListByApplyDocCode<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getGoodsListByApplyDocCode_args> {
      public getGoodsListByApplyDocCode() {
        super("getGoodsListByApplyDocCode");
      }

      public getGoodsListByApplyDocCode_args getEmptyArgsInstance() {
        return new getGoodsListByApplyDocCode_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getGoodsListByApplyDocCode_result getResult(I iface, getGoodsListByApplyDocCode_args args) throws org.apache.thrift.TException {
        getGoodsListByApplyDocCode_result result = new getGoodsListByApplyDocCode_result();
        result.success = iface.getGoodsListByApplyDocCode(args.ApplyDocCode);
        return result;
      }
    }

    public static class confirmRetrieval<I extends Iface> extends org.apache.thrift.ProcessFunction<I, confirmRetrieval_args> {
      public confirmRetrieval() {
        super("confirmRetrieval");
      }

      public confirmRetrieval_args getEmptyArgsInstance() {
        return new confirmRetrieval_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public confirmRetrieval_result getResult(I iface, confirmRetrieval_args args) throws org.apache.thrift.TException {
        confirmRetrieval_result result = new confirmRetrieval_result();
        result.success = iface.confirmRetrieval(args.ApplyDocCode, args.cartons);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class confirmReceiving<I extends Iface> extends org.apache.thrift.ProcessFunction<I, confirmReceiving_args> {
      public confirmReceiving() {
        super("confirmReceiving");
      }

      public confirmReceiving_args getEmptyArgsInstance() {
        return new confirmReceiving_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public confirmReceiving_result getResult(I iface, confirmReceiving_args args) throws org.apache.thrift.TException {
        confirmReceiving_result result = new confirmReceiving_result();
        result.success = iface.confirmReceiving(args.Code);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class getGoodByCNum<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getGoodByCNum_args> {
      public getGoodByCNum() {
        super("getGoodByCNum");
      }

      public getGoodByCNum_args getEmptyArgsInstance() {
        return new getGoodByCNum_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getGoodByCNum_result getResult(I iface, getGoodByCNum_args args) throws org.apache.thrift.TException {
        getGoodByCNum_result result = new getGoodByCNum_result();
        result.success = iface.getGoodByCNum(args.CNum);
        return result;
      }
    }

    public static class getLocationListByItemErpCode<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getLocationListByItemErpCode_args> {
      public getLocationListByItemErpCode() {
        super("getLocationListByItemErpCode");
      }

      public getLocationListByItemErpCode_args getEmptyArgsInstance() {
        return new getLocationListByItemErpCode_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getLocationListByItemErpCode_result getResult(I iface, getLocationListByItemErpCode_args args) throws org.apache.thrift.TException {
        getLocationListByItemErpCode_result result = new getLocationListByItemErpCode_result();
        result.success = iface.getLocationListByItemErpCode(args.ItemERPCode, args.isBom);
        return result;
      }
    }

    public static class getGoodsByLocation<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getGoodsByLocation_args> {
      public getGoodsByLocation() {
        super("getGoodsByLocation");
      }

      public getGoodsByLocation_args getEmptyArgsInstance() {
        return new getGoodsByLocation_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getGoodsByLocation_result getResult(I iface, getGoodsByLocation_args args) throws org.apache.thrift.TException {
        getGoodsByLocation_result result = new getGoodsByLocation_result();
        result.success = iface.getGoodsByLocation(args.Location);
        return result;
      }
    }

    public static class getApplyDocCodeByCNum<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getApplyDocCodeByCNum_args> {
      public getApplyDocCodeByCNum() {
        super("getApplyDocCodeByCNum");
      }

      public getApplyDocCodeByCNum_args getEmptyArgsInstance() {
        return new getApplyDocCodeByCNum_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getApplyDocCodeByCNum_result getResult(I iface, getApplyDocCodeByCNum_args args) throws org.apache.thrift.TException {
        getApplyDocCodeByCNum_result result = new getApplyDocCodeByCNum_result();
        result.success = iface.getApplyDocCodeByCNum(args.CNum);
        return result;
      }
    }

    public static class confirmInventory<I extends Iface> extends org.apache.thrift.ProcessFunction<I, confirmInventory_args> {
      public confirmInventory() {
        super("confirmInventory");
      }

      public confirmInventory_args getEmptyArgsInstance() {
        return new confirmInventory_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public confirmInventory_result getResult(I iface, confirmInventory_args args) throws org.apache.thrift.TException {
        confirmInventory_result result = new confirmInventory_result();
        result.success = iface.confirmInventory(args.checks);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class confirmArrive<I extends Iface> extends org.apache.thrift.ProcessFunction<I, confirmArrive_args> {
      public confirmArrive() {
        super("confirmArrive");
      }

      public confirmArrive_args getEmptyArgsInstance() {
        return new confirmArrive_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public confirmArrive_result getResult(I iface, confirmArrive_args args) throws org.apache.thrift.TException {
        confirmArrive_result result = new confirmArrive_result();
        result.success = iface.confirmArrive(args.charge, args.Time, args.Position, args.Type, args.PosApplyDocCode, args.longitude, args.latitude);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class stagingSiteCheckout<I extends Iface> extends org.apache.thrift.ProcessFunction<I, stagingSiteCheckout_args> {
      public stagingSiteCheckout() {
        super("stagingSiteCheckout");
      }

      public stagingSiteCheckout_args getEmptyArgsInstance() {
        return new stagingSiteCheckout_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public stagingSiteCheckout_result getResult(I iface, stagingSiteCheckout_args args) throws org.apache.thrift.TException {
        stagingSiteCheckout_result result = new stagingSiteCheckout_result();
        result.success = iface.stagingSiteCheckout(args.applyPerson, args.constructPos, args.constructUnit, args.materialCode, args.num);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class getTransportInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getTransportInfo_args> {
      public getTransportInfo() {
        super("getTransportInfo");
      }

      public getTransportInfo_args getEmptyArgsInstance() {
        return new getTransportInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getTransportInfo_result getResult(I iface, getTransportInfo_args args) throws org.apache.thrift.TException {
        getTransportInfo_result result = new getTransportInfo_result();
        result.success = iface.getTransportInfo();
        return result;
      }
    }

    public static class getStagingInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getStagingInfo_args> {
      public getStagingInfo() {
        super("getStagingInfo");
      }

      public getStagingInfo_args getEmptyArgsInstance() {
        return new getStagingInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getStagingInfo_result getResult(I iface, getStagingInfo_args args) throws org.apache.thrift.TException {
        getStagingInfo_result result = new getStagingInfo_result();
        result.success = iface.getStagingInfo(args.constructUnit);
        return result;
      }
    }

    public static class getInStagingInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getInStagingInfo_args> {
      public getInStagingInfo() {
        super("getInStagingInfo");
      }

      public getInStagingInfo_args getEmptyArgsInstance() {
        return new getInStagingInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getInStagingInfo_result getResult(I iface, getInStagingInfo_args args) throws org.apache.thrift.TException {
        getInStagingInfo_result result = new getInStagingInfo_result();
        result.success = iface.getInStagingInfo(args.constructUnit);
        return result;
      }
    }

    public static class addPic<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addPic_args> {
      public addPic() {
        super("addPic");
      }

      public addPic_args getEmptyArgsInstance() {
        return new addPic_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addPic_result getResult(I iface, addPic_args args) throws org.apache.thrift.TException {
        addPic_result result = new addPic_result();
        result.success = iface.addPic(args.ApplyDocCode, args.URL);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class getPicsByApplyDocCode<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getPicsByApplyDocCode_args> {
      public getPicsByApplyDocCode() {
        super("getPicsByApplyDocCode");
      }

      public getPicsByApplyDocCode_args getEmptyArgsInstance() {
        return new getPicsByApplyDocCode_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getPicsByApplyDocCode_result getResult(I iface, getPicsByApplyDocCode_args args) throws org.apache.thrift.TException {
        getPicsByApplyDocCode_result result = new getPicsByApplyDocCode_result();
        result.success = iface.getPicsByApplyDocCode(args.ApplyDocCode);
        return result;
      }
    }

    public static class toPrint<I extends Iface> extends org.apache.thrift.ProcessFunction<I, toPrint_args> {
      public toPrint() {
        super("toPrint");
      }

      public toPrint_args getEmptyArgsInstance() {
        return new toPrint_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public toPrint_result getResult(I iface, toPrint_args args) throws org.apache.thrift.TException {
        toPrint_result result = new toPrint_result();
        result.success = iface.toPrint();
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class callPrinter<I extends Iface> extends org.apache.thrift.ProcessFunction<I, callPrinter_args> {
      public callPrinter() {
        super("callPrinter");
      }

      public callPrinter_args getEmptyArgsInstance() {
        return new callPrinter_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public callPrinter_result getResult(I iface, callPrinter_args args) throws org.apache.thrift.TException {
        callPrinter_result result = new callPrinter_result();
        result.success = iface.callPrinter();
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("getReceivingSheets", new getReceivingSheets());
      processMap.put("getGoodsListByCode", new getGoodsListByCode());
      processMap.put("printTag", new printTag());
      processMap.put("getCodeByCNum", new getCodeByCNum());
      processMap.put("bindLocationAndGoods", new bindLocationAndGoods());
      processMap.put("getApplySheets", new getApplySheets());
      processMap.put("getOutApplySheets", new getOutApplySheets());
      processMap.put("getPOSInfoByApplyDocCode", new getPOSInfoByApplyDocCode());
      processMap.put("getGoodsListByApplyDocCode", new getGoodsListByApplyDocCode());
      processMap.put("confirmRetrieval", new confirmRetrieval());
      processMap.put("confirmReceiving", new confirmReceiving());
      processMap.put("getGoodByCNum", new getGoodByCNum());
      processMap.put("getLocationListByItemErpCode", new getLocationListByItemErpCode());
      processMap.put("getGoodsByLocation", new getGoodsByLocation());
      processMap.put("getApplyDocCodeByCNum", new getApplyDocCodeByCNum());
      processMap.put("confirmInventory", new confirmInventory());
      processMap.put("confirmArrive", new confirmArrive());
      processMap.put("stagingSiteCheckout", new stagingSiteCheckout());
      processMap.put("getTransportInfo", new getTransportInfo());
      processMap.put("getStagingInfo", new getStagingInfo());
      processMap.put("getInStagingInfo", new getInStagingInfo());
      processMap.put("addPic", new addPic());
      processMap.put("getPicsByApplyDocCode", new getPicsByApplyDocCode());
      processMap.put("toPrint", new toPrint());
      processMap.put("callPrinter", new callPrinter());
      return processMap;
    }

    public static class getReceivingSheets<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getReceivingSheets_args, List<rfid.service.ASN>> {
      public getReceivingSheets() {
        super("getReceivingSheets");
      }

      public getReceivingSheets_args getEmptyArgsInstance() {
        return new getReceivingSheets_args();
      }

      public AsyncMethodCallback<List<rfid.service.ASN>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<rfid.service.ASN>>() { 
          public void onComplete(List<rfid.service.ASN> o) {
            getReceivingSheets_result result = new getReceivingSheets_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getReceivingSheets_result result = new getReceivingSheets_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getReceivingSheets_args args, org.apache.thrift.async.AsyncMethodCallback<List<rfid.service.ASN>> resultHandler) throws TException {
        iface.getReceivingSheets(resultHandler);
      }
    }

    public static class getGoodsListByCode<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getGoodsListByCode_args, List<rfid.service.Good>> {
      public getGoodsListByCode() {
        super("getGoodsListByCode");
      }

      public getGoodsListByCode_args getEmptyArgsInstance() {
        return new getGoodsListByCode_args();
      }

      public AsyncMethodCallback<List<rfid.service.Good>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<rfid.service.Good>>() { 
          public void onComplete(List<rfid.service.Good> o) {
            getGoodsListByCode_result result = new getGoodsListByCode_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getGoodsListByCode_result result = new getGoodsListByCode_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getGoodsListByCode_args args, org.apache.thrift.async.AsyncMethodCallback<List<rfid.service.Good>> resultHandler) throws TException {
        iface.getGoodsListByCode(args.Code, args.printable,resultHandler);
      }
    }

    public static class printTag<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, printTag_args, Boolean> {
      public printTag() {
        super("printTag");
      }

      public printTag_args getEmptyArgsInstance() {
        return new printTag_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            printTag_result result = new printTag_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            printTag_result result = new printTag_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, printTag_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.printTag(args.Code,resultHandler);
      }
    }

    public static class getCodeByCNum<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getCodeByCNum_args, String> {
      public getCodeByCNum() {
        super("getCodeByCNum");
      }

      public getCodeByCNum_args getEmptyArgsInstance() {
        return new getCodeByCNum_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            getCodeByCNum_result result = new getCodeByCNum_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getCodeByCNum_result result = new getCodeByCNum_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getCodeByCNum_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.getCodeByCNum(args.CNum,resultHandler);
      }
    }

    public static class bindLocationAndGoods<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, bindLocationAndGoods_args, Boolean> {
      public bindLocationAndGoods() {
        super("bindLocationAndGoods");
      }

      public bindLocationAndGoods_args getEmptyArgsInstance() {
        return new bindLocationAndGoods_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            bindLocationAndGoods_result result = new bindLocationAndGoods_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            bindLocationAndGoods_result result = new bindLocationAndGoods_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, bindLocationAndGoods_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.bindLocationAndGoods(args.LocationID, args.CNums,resultHandler);
      }
    }

    public static class getApplySheets<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getApplySheets_args, List<rfid.service.POS>> {
      public getApplySheets() {
        super("getApplySheets");
      }

      public getApplySheets_args getEmptyArgsInstance() {
        return new getApplySheets_args();
      }

      public AsyncMethodCallback<List<rfid.service.POS>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<rfid.service.POS>>() { 
          public void onComplete(List<rfid.service.POS> o) {
            getApplySheets_result result = new getApplySheets_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getApplySheets_result result = new getApplySheets_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getApplySheets_args args, org.apache.thrift.async.AsyncMethodCallback<List<rfid.service.POS>> resultHandler) throws TException {
        iface.getApplySheets(resultHandler);
      }
    }

    public static class getOutApplySheets<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getOutApplySheets_args, List<rfid.service.POS>> {
      public getOutApplySheets() {
        super("getOutApplySheets");
      }

      public getOutApplySheets_args getEmptyArgsInstance() {
        return new getOutApplySheets_args();
      }

      public AsyncMethodCallback<List<rfid.service.POS>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<rfid.service.POS>>() { 
          public void onComplete(List<rfid.service.POS> o) {
            getOutApplySheets_result result = new getOutApplySheets_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getOutApplySheets_result result = new getOutApplySheets_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getOutApplySheets_args args, org.apache.thrift.async.AsyncMethodCallback<List<rfid.service.POS>> resultHandler) throws TException {
        iface.getOutApplySheets(resultHandler);
      }
    }

    public static class getPOSInfoByApplyDocCode<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getPOSInfoByApplyDocCode_args, rfid.service.POS> {
      public getPOSInfoByApplyDocCode() {
        super("getPOSInfoByApplyDocCode");
      }

      public getPOSInfoByApplyDocCode_args getEmptyArgsInstance() {
        return new getPOSInfoByApplyDocCode_args();
      }

      public AsyncMethodCallback<rfid.service.POS> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<rfid.service.POS>() { 
          public void onComplete(rfid.service.POS o) {
            getPOSInfoByApplyDocCode_result result = new getPOSInfoByApplyDocCode_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getPOSInfoByApplyDocCode_result result = new getPOSInfoByApplyDocCode_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getPOSInfoByApplyDocCode_args args, org.apache.thrift.async.AsyncMethodCallback<rfid.service.POS> resultHandler) throws TException {
        iface.getPOSInfoByApplyDocCode(args.ApplyDocCode,resultHandler);
      }
    }

    public static class getGoodsListByApplyDocCode<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getGoodsListByApplyDocCode_args, List<rfid.service.Good>> {
      public getGoodsListByApplyDocCode() {
        super("getGoodsListByApplyDocCode");
      }

      public getGoodsListByApplyDocCode_args getEmptyArgsInstance() {
        return new getGoodsListByApplyDocCode_args();
      }

      public AsyncMethodCallback<List<rfid.service.Good>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<rfid.service.Good>>() { 
          public void onComplete(List<rfid.service.Good> o) {
            getGoodsListByApplyDocCode_result result = new getGoodsListByApplyDocCode_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getGoodsListByApplyDocCode_result result = new getGoodsListByApplyDocCode_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getGoodsListByApplyDocCode_args args, org.apache.thrift.async.AsyncMethodCallback<List<rfid.service.Good>> resultHandler) throws TException {
        iface.getGoodsListByApplyDocCode(args.ApplyDocCode,resultHandler);
      }
    }

    public static class confirmRetrieval<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, confirmRetrieval_args, Boolean> {
      public confirmRetrieval() {
        super("confirmRetrieval");
      }

      public confirmRetrieval_args getEmptyArgsInstance() {
        return new confirmRetrieval_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            confirmRetrieval_result result = new confirmRetrieval_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            confirmRetrieval_result result = new confirmRetrieval_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, confirmRetrieval_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.confirmRetrieval(args.ApplyDocCode, args.cartons,resultHandler);
      }
    }

    public static class confirmReceiving<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, confirmReceiving_args, Boolean> {
      public confirmReceiving() {
        super("confirmReceiving");
      }

      public confirmReceiving_args getEmptyArgsInstance() {
        return new confirmReceiving_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            confirmReceiving_result result = new confirmReceiving_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            confirmReceiving_result result = new confirmReceiving_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, confirmReceiving_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.confirmReceiving(args.Code,resultHandler);
      }
    }

    public static class getGoodByCNum<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getGoodByCNum_args, rfid.service.Good> {
      public getGoodByCNum() {
        super("getGoodByCNum");
      }

      public getGoodByCNum_args getEmptyArgsInstance() {
        return new getGoodByCNum_args();
      }

      public AsyncMethodCallback<rfid.service.Good> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<rfid.service.Good>() { 
          public void onComplete(rfid.service.Good o) {
            getGoodByCNum_result result = new getGoodByCNum_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getGoodByCNum_result result = new getGoodByCNum_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getGoodByCNum_args args, org.apache.thrift.async.AsyncMethodCallback<rfid.service.Good> resultHandler) throws TException {
        iface.getGoodByCNum(args.CNum,resultHandler);
      }
    }

    public static class getLocationListByItemErpCode<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getLocationListByItemErpCode_args, List<rfid.service.LocationInfo>> {
      public getLocationListByItemErpCode() {
        super("getLocationListByItemErpCode");
      }

      public getLocationListByItemErpCode_args getEmptyArgsInstance() {
        return new getLocationListByItemErpCode_args();
      }

      public AsyncMethodCallback<List<rfid.service.LocationInfo>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<rfid.service.LocationInfo>>() { 
          public void onComplete(List<rfid.service.LocationInfo> o) {
            getLocationListByItemErpCode_result result = new getLocationListByItemErpCode_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getLocationListByItemErpCode_result result = new getLocationListByItemErpCode_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getLocationListByItemErpCode_args args, org.apache.thrift.async.AsyncMethodCallback<List<rfid.service.LocationInfo>> resultHandler) throws TException {
        iface.getLocationListByItemErpCode(args.ItemERPCode, args.isBom,resultHandler);
      }
    }

    public static class getGoodsByLocation<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getGoodsByLocation_args, List<rfid.service.Good>> {
      public getGoodsByLocation() {
        super("getGoodsByLocation");
      }

      public getGoodsByLocation_args getEmptyArgsInstance() {
        return new getGoodsByLocation_args();
      }

      public AsyncMethodCallback<List<rfid.service.Good>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<rfid.service.Good>>() { 
          public void onComplete(List<rfid.service.Good> o) {
            getGoodsByLocation_result result = new getGoodsByLocation_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getGoodsByLocation_result result = new getGoodsByLocation_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getGoodsByLocation_args args, org.apache.thrift.async.AsyncMethodCallback<List<rfid.service.Good>> resultHandler) throws TException {
        iface.getGoodsByLocation(args.Location,resultHandler);
      }
    }

    public static class getApplyDocCodeByCNum<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getApplyDocCodeByCNum_args, String> {
      public getApplyDocCodeByCNum() {
        super("getApplyDocCodeByCNum");
      }

      public getApplyDocCodeByCNum_args getEmptyArgsInstance() {
        return new getApplyDocCodeByCNum_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            getApplyDocCodeByCNum_result result = new getApplyDocCodeByCNum_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getApplyDocCodeByCNum_result result = new getApplyDocCodeByCNum_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getApplyDocCodeByCNum_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.getApplyDocCodeByCNum(args.CNum,resultHandler);
      }
    }

    public static class confirmInventory<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, confirmInventory_args, Boolean> {
      public confirmInventory() {
        super("confirmInventory");
      }

      public confirmInventory_args getEmptyArgsInstance() {
        return new confirmInventory_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            confirmInventory_result result = new confirmInventory_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            confirmInventory_result result = new confirmInventory_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, confirmInventory_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.confirmInventory(args.checks,resultHandler);
      }
    }

    public static class confirmArrive<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, confirmArrive_args, Boolean> {
      public confirmArrive() {
        super("confirmArrive");
      }

      public confirmArrive_args getEmptyArgsInstance() {
        return new confirmArrive_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            confirmArrive_result result = new confirmArrive_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            confirmArrive_result result = new confirmArrive_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, confirmArrive_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.confirmArrive(args.charge, args.Time, args.Position, args.Type, args.PosApplyDocCode, args.longitude, args.latitude,resultHandler);
      }
    }

    public static class stagingSiteCheckout<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, stagingSiteCheckout_args, Boolean> {
      public stagingSiteCheckout() {
        super("stagingSiteCheckout");
      }

      public stagingSiteCheckout_args getEmptyArgsInstance() {
        return new stagingSiteCheckout_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            stagingSiteCheckout_result result = new stagingSiteCheckout_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            stagingSiteCheckout_result result = new stagingSiteCheckout_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, stagingSiteCheckout_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.stagingSiteCheckout(args.applyPerson, args.constructPos, args.constructUnit, args.materialCode, args.num,resultHandler);
      }
    }

    public static class getTransportInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getTransportInfo_args, List<rfid.service.transportInfo>> {
      public getTransportInfo() {
        super("getTransportInfo");
      }

      public getTransportInfo_args getEmptyArgsInstance() {
        return new getTransportInfo_args();
      }

      public AsyncMethodCallback<List<rfid.service.transportInfo>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<rfid.service.transportInfo>>() { 
          public void onComplete(List<rfid.service.transportInfo> o) {
            getTransportInfo_result result = new getTransportInfo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getTransportInfo_result result = new getTransportInfo_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getTransportInfo_args args, org.apache.thrift.async.AsyncMethodCallback<List<rfid.service.transportInfo>> resultHandler) throws TException {
        iface.getTransportInfo(resultHandler);
      }
    }

    public static class getStagingInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getStagingInfo_args, List<rfid.service.stagingInfo>> {
      public getStagingInfo() {
        super("getStagingInfo");
      }

      public getStagingInfo_args getEmptyArgsInstance() {
        return new getStagingInfo_args();
      }

      public AsyncMethodCallback<List<rfid.service.stagingInfo>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<rfid.service.stagingInfo>>() { 
          public void onComplete(List<rfid.service.stagingInfo> o) {
            getStagingInfo_result result = new getStagingInfo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getStagingInfo_result result = new getStagingInfo_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getStagingInfo_args args, org.apache.thrift.async.AsyncMethodCallback<List<rfid.service.stagingInfo>> resultHandler) throws TException {
        iface.getStagingInfo(args.constructUnit,resultHandler);
      }
    }

    public static class getInStagingInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getInStagingInfo_args, List<rfid.service.inStagingInfo>> {
      public getInStagingInfo() {
        super("getInStagingInfo");
      }

      public getInStagingInfo_args getEmptyArgsInstance() {
        return new getInStagingInfo_args();
      }

      public AsyncMethodCallback<List<rfid.service.inStagingInfo>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<rfid.service.inStagingInfo>>() { 
          public void onComplete(List<rfid.service.inStagingInfo> o) {
            getInStagingInfo_result result = new getInStagingInfo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getInStagingInfo_result result = new getInStagingInfo_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getInStagingInfo_args args, org.apache.thrift.async.AsyncMethodCallback<List<rfid.service.inStagingInfo>> resultHandler) throws TException {
        iface.getInStagingInfo(args.constructUnit,resultHandler);
      }
    }

    public static class addPic<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addPic_args, Boolean> {
      public addPic() {
        super("addPic");
      }

      public addPic_args getEmptyArgsInstance() {
        return new addPic_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            addPic_result result = new addPic_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addPic_result result = new addPic_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addPic_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.addPic(args.ApplyDocCode, args.URL,resultHandler);
      }
    }

    public static class getPicsByApplyDocCode<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getPicsByApplyDocCode_args, List<String>> {
      public getPicsByApplyDocCode() {
        super("getPicsByApplyDocCode");
      }

      public getPicsByApplyDocCode_args getEmptyArgsInstance() {
        return new getPicsByApplyDocCode_args();
      }

      public AsyncMethodCallback<List<String>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<String>>() { 
          public void onComplete(List<String> o) {
            getPicsByApplyDocCode_result result = new getPicsByApplyDocCode_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getPicsByApplyDocCode_result result = new getPicsByApplyDocCode_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getPicsByApplyDocCode_args args, org.apache.thrift.async.AsyncMethodCallback<List<String>> resultHandler) throws TException {
        iface.getPicsByApplyDocCode(args.ApplyDocCode,resultHandler);
      }
    }

    public static class toPrint<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, toPrint_args, Boolean> {
      public toPrint() {
        super("toPrint");
      }

      public toPrint_args getEmptyArgsInstance() {
        return new toPrint_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            toPrint_result result = new toPrint_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            toPrint_result result = new toPrint_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, toPrint_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.toPrint(resultHandler);
      }
    }

    public static class callPrinter<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, callPrinter_args, List<rfid.service.Data>> {
      public callPrinter() {
        super("callPrinter");
      }

      public callPrinter_args getEmptyArgsInstance() {
        return new callPrinter_args();
      }

      public AsyncMethodCallback<List<rfid.service.Data>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<rfid.service.Data>>() { 
          public void onComplete(List<rfid.service.Data> o) {
            callPrinter_result result = new callPrinter_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            callPrinter_result result = new callPrinter_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, callPrinter_args args, org.apache.thrift.async.AsyncMethodCallback<List<rfid.service.Data>> resultHandler) throws TException {
        iface.callPrinter(resultHandler);
      }
    }

  }

  public static class getReceivingSheets_args implements org.apache.thrift.TBase<getReceivingSheets_args, getReceivingSheets_args._Fields>, java.io.Serializable, Cloneable, Comparable<getReceivingSheets_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getReceivingSheets_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getReceivingSheets_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getReceivingSheets_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getReceivingSheets_args.class, metaDataMap);
    }

    public getReceivingSheets_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getReceivingSheets_args(getReceivingSheets_args other) {
    }

    public getReceivingSheets_args deepCopy() {
      return new getReceivingSheets_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getReceivingSheets_args)
        return this.equals((getReceivingSheets_args)that);
      return false;
    }

    public boolean equals(getReceivingSheets_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(getReceivingSheets_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getReceivingSheets_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getReceivingSheets_argsStandardSchemeFactory implements SchemeFactory {
      public getReceivingSheets_argsStandardScheme getScheme() {
        return new getReceivingSheets_argsStandardScheme();
      }
    }

    private static class getReceivingSheets_argsStandardScheme extends StandardScheme<getReceivingSheets_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getReceivingSheets_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getReceivingSheets_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getReceivingSheets_argsTupleSchemeFactory implements SchemeFactory {
      public getReceivingSheets_argsTupleScheme getScheme() {
        return new getReceivingSheets_argsTupleScheme();
      }
    }

    private static class getReceivingSheets_argsTupleScheme extends TupleScheme<getReceivingSheets_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getReceivingSheets_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getReceivingSheets_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getReceivingSheets_result implements org.apache.thrift.TBase<getReceivingSheets_result, getReceivingSheets_result._Fields>, java.io.Serializable, Cloneable, Comparable<getReceivingSheets_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getReceivingSheets_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getReceivingSheets_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getReceivingSheets_resultTupleSchemeFactory());
    }

    public List<rfid.service.ASN> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, rfid.service.ASN.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getReceivingSheets_result.class, metaDataMap);
    }

    public getReceivingSheets_result() {
    }

    public getReceivingSheets_result(
      List<rfid.service.ASN> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getReceivingSheets_result(getReceivingSheets_result other) {
      if (other.isSetSuccess()) {
        List<rfid.service.ASN> __this__success = new ArrayList<rfid.service.ASN>(other.success.size());
        for (rfid.service.ASN other_element : other.success) {
          __this__success.add(new rfid.service.ASN(other_element));
        }
        this.success = __this__success;
      }
    }

    public getReceivingSheets_result deepCopy() {
      return new getReceivingSheets_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<rfid.service.ASN> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(rfid.service.ASN elem) {
      if (this.success == null) {
        this.success = new ArrayList<rfid.service.ASN>();
      }
      this.success.add(elem);
    }

    public List<rfid.service.ASN> getSuccess() {
      return this.success;
    }

    public getReceivingSheets_result setSuccess(List<rfid.service.ASN> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<rfid.service.ASN>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getReceivingSheets_result)
        return this.equals((getReceivingSheets_result)that);
      return false;
    }

    public boolean equals(getReceivingSheets_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getReceivingSheets_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getReceivingSheets_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getReceivingSheets_resultStandardSchemeFactory implements SchemeFactory {
      public getReceivingSheets_resultStandardScheme getScheme() {
        return new getReceivingSheets_resultStandardScheme();
      }
    }

    private static class getReceivingSheets_resultStandardScheme extends StandardScheme<getReceivingSheets_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getReceivingSheets_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.success = new ArrayList<rfid.service.ASN>(_list0.size);
                  rfid.service.ASN _elem1;
                  for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                  {
                    _elem1 = new rfid.service.ASN();
                    _elem1.read(iprot);
                    struct.success.add(_elem1);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getReceivingSheets_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (rfid.service.ASN _iter3 : struct.success)
            {
              _iter3.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getReceivingSheets_resultTupleSchemeFactory implements SchemeFactory {
      public getReceivingSheets_resultTupleScheme getScheme() {
        return new getReceivingSheets_resultTupleScheme();
      }
    }

    private static class getReceivingSheets_resultTupleScheme extends TupleScheme<getReceivingSheets_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getReceivingSheets_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (rfid.service.ASN _iter4 : struct.success)
            {
              _iter4.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getReceivingSheets_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<rfid.service.ASN>(_list5.size);
            rfid.service.ASN _elem6;
            for (int _i7 = 0; _i7 < _list5.size; ++_i7)
            {
              _elem6 = new rfid.service.ASN();
              _elem6.read(iprot);
              struct.success.add(_elem6);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getGoodsListByCode_args implements org.apache.thrift.TBase<getGoodsListByCode_args, getGoodsListByCode_args._Fields>, java.io.Serializable, Cloneable, Comparable<getGoodsListByCode_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getGoodsListByCode_args");

    private static final org.apache.thrift.protocol.TField CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("Code", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PRINTABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("printable", org.apache.thrift.protocol.TType.BOOL, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getGoodsListByCode_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getGoodsListByCode_argsTupleSchemeFactory());
    }

    public String Code; // required
    public boolean printable; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CODE((short)1, "Code"),
      PRINTABLE((short)2, "printable");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CODE
            return CODE;
          case 2: // PRINTABLE
            return PRINTABLE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PRINTABLE_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CODE, new org.apache.thrift.meta_data.FieldMetaData("Code", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PRINTABLE, new org.apache.thrift.meta_data.FieldMetaData("printable", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getGoodsListByCode_args.class, metaDataMap);
    }

    public getGoodsListByCode_args() {
    }

    public getGoodsListByCode_args(
      String Code,
      boolean printable)
    {
      this();
      this.Code = Code;
      this.printable = printable;
      setPrintableIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getGoodsListByCode_args(getGoodsListByCode_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetCode()) {
        this.Code = other.Code;
      }
      this.printable = other.printable;
    }

    public getGoodsListByCode_args deepCopy() {
      return new getGoodsListByCode_args(this);
    }

    @Override
    public void clear() {
      this.Code = null;
      setPrintableIsSet(false);
      this.printable = false;
    }

    public String getCode() {
      return this.Code;
    }

    public getGoodsListByCode_args setCode(String Code) {
      this.Code = Code;
      return this;
    }

    public void unsetCode() {
      this.Code = null;
    }

    /** Returns true if field Code is set (has been assigned a value) and false otherwise */
    public boolean isSetCode() {
      return this.Code != null;
    }

    public void setCodeIsSet(boolean value) {
      if (!value) {
        this.Code = null;
      }
    }

    public boolean isPrintable() {
      return this.printable;
    }

    public getGoodsListByCode_args setPrintable(boolean printable) {
      this.printable = printable;
      setPrintableIsSet(true);
      return this;
    }

    public void unsetPrintable() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRINTABLE_ISSET_ID);
    }

    /** Returns true if field printable is set (has been assigned a value) and false otherwise */
    public boolean isSetPrintable() {
      return EncodingUtils.testBit(__isset_bitfield, __PRINTABLE_ISSET_ID);
    }

    public void setPrintableIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRINTABLE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CODE:
        if (value == null) {
          unsetCode();
        } else {
          setCode((String)value);
        }
        break;

      case PRINTABLE:
        if (value == null) {
          unsetPrintable();
        } else {
          setPrintable((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CODE:
        return getCode();

      case PRINTABLE:
        return isPrintable();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CODE:
        return isSetCode();
      case PRINTABLE:
        return isSetPrintable();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getGoodsListByCode_args)
        return this.equals((getGoodsListByCode_args)that);
      return false;
    }

    public boolean equals(getGoodsListByCode_args that) {
      if (that == null)
        return false;

      boolean this_present_Code = true && this.isSetCode();
      boolean that_present_Code = true && that.isSetCode();
      if (this_present_Code || that_present_Code) {
        if (!(this_present_Code && that_present_Code))
          return false;
        if (!this.Code.equals(that.Code))
          return false;
      }

      boolean this_present_printable = true;
      boolean that_present_printable = true;
      if (this_present_printable || that_present_printable) {
        if (!(this_present_printable && that_present_printable))
          return false;
        if (this.printable != that.printable)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_Code = true && (isSetCode());
      list.add(present_Code);
      if (present_Code)
        list.add(Code);

      boolean present_printable = true;
      list.add(present_printable);
      if (present_printable)
        list.add(printable);

      return list.hashCode();
    }

    @Override
    public int compareTo(getGoodsListByCode_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCode()).compareTo(other.isSetCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Code, other.Code);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPrintable()).compareTo(other.isSetPrintable());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPrintable()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.printable, other.printable);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getGoodsListByCode_args(");
      boolean first = true;

      sb.append("Code:");
      if (this.Code == null) {
        sb.append("null");
      } else {
        sb.append(this.Code);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("printable:");
      sb.append(this.printable);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getGoodsListByCode_argsStandardSchemeFactory implements SchemeFactory {
      public getGoodsListByCode_argsStandardScheme getScheme() {
        return new getGoodsListByCode_argsStandardScheme();
      }
    }

    private static class getGoodsListByCode_argsStandardScheme extends StandardScheme<getGoodsListByCode_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getGoodsListByCode_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.Code = iprot.readString();
                struct.setCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PRINTABLE
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.printable = iprot.readBool();
                struct.setPrintableIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getGoodsListByCode_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.Code != null) {
          oprot.writeFieldBegin(CODE_FIELD_DESC);
          oprot.writeString(struct.Code);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(PRINTABLE_FIELD_DESC);
        oprot.writeBool(struct.printable);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getGoodsListByCode_argsTupleSchemeFactory implements SchemeFactory {
      public getGoodsListByCode_argsTupleScheme getScheme() {
        return new getGoodsListByCode_argsTupleScheme();
      }
    }

    private static class getGoodsListByCode_argsTupleScheme extends TupleScheme<getGoodsListByCode_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getGoodsListByCode_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCode()) {
          optionals.set(0);
        }
        if (struct.isSetPrintable()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetCode()) {
          oprot.writeString(struct.Code);
        }
        if (struct.isSetPrintable()) {
          oprot.writeBool(struct.printable);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getGoodsListByCode_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.Code = iprot.readString();
          struct.setCodeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.printable = iprot.readBool();
          struct.setPrintableIsSet(true);
        }
      }
    }

  }

  public static class getGoodsListByCode_result implements org.apache.thrift.TBase<getGoodsListByCode_result, getGoodsListByCode_result._Fields>, java.io.Serializable, Cloneable, Comparable<getGoodsListByCode_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getGoodsListByCode_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getGoodsListByCode_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getGoodsListByCode_resultTupleSchemeFactory());
    }

    public List<rfid.service.Good> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, rfid.service.Good.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getGoodsListByCode_result.class, metaDataMap);
    }

    public getGoodsListByCode_result() {
    }

    public getGoodsListByCode_result(
      List<rfid.service.Good> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getGoodsListByCode_result(getGoodsListByCode_result other) {
      if (other.isSetSuccess()) {
        List<rfid.service.Good> __this__success = new ArrayList<rfid.service.Good>(other.success.size());
        for (rfid.service.Good other_element : other.success) {
          __this__success.add(new rfid.service.Good(other_element));
        }
        this.success = __this__success;
      }
    }

    public getGoodsListByCode_result deepCopy() {
      return new getGoodsListByCode_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<rfid.service.Good> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(rfid.service.Good elem) {
      if (this.success == null) {
        this.success = new ArrayList<rfid.service.Good>();
      }
      this.success.add(elem);
    }

    public List<rfid.service.Good> getSuccess() {
      return this.success;
    }

    public getGoodsListByCode_result setSuccess(List<rfid.service.Good> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<rfid.service.Good>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getGoodsListByCode_result)
        return this.equals((getGoodsListByCode_result)that);
      return false;
    }

    public boolean equals(getGoodsListByCode_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getGoodsListByCode_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getGoodsListByCode_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getGoodsListByCode_resultStandardSchemeFactory implements SchemeFactory {
      public getGoodsListByCode_resultStandardScheme getScheme() {
        return new getGoodsListByCode_resultStandardScheme();
      }
    }

    private static class getGoodsListByCode_resultStandardScheme extends StandardScheme<getGoodsListByCode_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getGoodsListByCode_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                  struct.success = new ArrayList<rfid.service.Good>(_list8.size);
                  rfid.service.Good _elem9;
                  for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                  {
                    _elem9 = new rfid.service.Good();
                    _elem9.read(iprot);
                    struct.success.add(_elem9);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getGoodsListByCode_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (rfid.service.Good _iter11 : struct.success)
            {
              _iter11.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getGoodsListByCode_resultTupleSchemeFactory implements SchemeFactory {
      public getGoodsListByCode_resultTupleScheme getScheme() {
        return new getGoodsListByCode_resultTupleScheme();
      }
    }

    private static class getGoodsListByCode_resultTupleScheme extends TupleScheme<getGoodsListByCode_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getGoodsListByCode_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (rfid.service.Good _iter12 : struct.success)
            {
              _iter12.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getGoodsListByCode_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<rfid.service.Good>(_list13.size);
            rfid.service.Good _elem14;
            for (int _i15 = 0; _i15 < _list13.size; ++_i15)
            {
              _elem14 = new rfid.service.Good();
              _elem14.read(iprot);
              struct.success.add(_elem14);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class printTag_args implements org.apache.thrift.TBase<printTag_args, printTag_args._Fields>, java.io.Serializable, Cloneable, Comparable<printTag_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("printTag_args");

    private static final org.apache.thrift.protocol.TField CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("Code", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new printTag_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new printTag_argsTupleSchemeFactory());
    }

    public String Code; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CODE((short)1, "Code");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CODE
            return CODE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CODE, new org.apache.thrift.meta_data.FieldMetaData("Code", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(printTag_args.class, metaDataMap);
    }

    public printTag_args() {
    }

    public printTag_args(
      String Code)
    {
      this();
      this.Code = Code;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public printTag_args(printTag_args other) {
      if (other.isSetCode()) {
        this.Code = other.Code;
      }
    }

    public printTag_args deepCopy() {
      return new printTag_args(this);
    }

    @Override
    public void clear() {
      this.Code = null;
    }

    public String getCode() {
      return this.Code;
    }

    public printTag_args setCode(String Code) {
      this.Code = Code;
      return this;
    }

    public void unsetCode() {
      this.Code = null;
    }

    /** Returns true if field Code is set (has been assigned a value) and false otherwise */
    public boolean isSetCode() {
      return this.Code != null;
    }

    public void setCodeIsSet(boolean value) {
      if (!value) {
        this.Code = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CODE:
        if (value == null) {
          unsetCode();
        } else {
          setCode((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CODE:
        return getCode();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CODE:
        return isSetCode();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof printTag_args)
        return this.equals((printTag_args)that);
      return false;
    }

    public boolean equals(printTag_args that) {
      if (that == null)
        return false;

      boolean this_present_Code = true && this.isSetCode();
      boolean that_present_Code = true && that.isSetCode();
      if (this_present_Code || that_present_Code) {
        if (!(this_present_Code && that_present_Code))
          return false;
        if (!this.Code.equals(that.Code))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_Code = true && (isSetCode());
      list.add(present_Code);
      if (present_Code)
        list.add(Code);

      return list.hashCode();
    }

    @Override
    public int compareTo(printTag_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCode()).compareTo(other.isSetCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Code, other.Code);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("printTag_args(");
      boolean first = true;

      sb.append("Code:");
      if (this.Code == null) {
        sb.append("null");
      } else {
        sb.append(this.Code);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class printTag_argsStandardSchemeFactory implements SchemeFactory {
      public printTag_argsStandardScheme getScheme() {
        return new printTag_argsStandardScheme();
      }
    }

    private static class printTag_argsStandardScheme extends StandardScheme<printTag_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, printTag_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.Code = iprot.readString();
                struct.setCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, printTag_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.Code != null) {
          oprot.writeFieldBegin(CODE_FIELD_DESC);
          oprot.writeString(struct.Code);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class printTag_argsTupleSchemeFactory implements SchemeFactory {
      public printTag_argsTupleScheme getScheme() {
        return new printTag_argsTupleScheme();
      }
    }

    private static class printTag_argsTupleScheme extends TupleScheme<printTag_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, printTag_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCode()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCode()) {
          oprot.writeString(struct.Code);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, printTag_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.Code = iprot.readString();
          struct.setCodeIsSet(true);
        }
      }
    }

  }

  public static class printTag_result implements org.apache.thrift.TBase<printTag_result, printTag_result._Fields>, java.io.Serializable, Cloneable, Comparable<printTag_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("printTag_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new printTag_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new printTag_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(printTag_result.class, metaDataMap);
    }

    public printTag_result() {
    }

    public printTag_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public printTag_result(printTag_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public printTag_result deepCopy() {
      return new printTag_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public printTag_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof printTag_result)
        return this.equals((printTag_result)that);
      return false;
    }

    public boolean equals(printTag_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(printTag_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("printTag_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class printTag_resultStandardSchemeFactory implements SchemeFactory {
      public printTag_resultStandardScheme getScheme() {
        return new printTag_resultStandardScheme();
      }
    }

    private static class printTag_resultStandardScheme extends StandardScheme<printTag_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, printTag_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, printTag_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class printTag_resultTupleSchemeFactory implements SchemeFactory {
      public printTag_resultTupleScheme getScheme() {
        return new printTag_resultTupleScheme();
      }
    }

    private static class printTag_resultTupleScheme extends TupleScheme<printTag_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, printTag_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, printTag_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getCodeByCNum_args implements org.apache.thrift.TBase<getCodeByCNum_args, getCodeByCNum_args._Fields>, java.io.Serializable, Cloneable, Comparable<getCodeByCNum_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCodeByCNum_args");

    private static final org.apache.thrift.protocol.TField CNUM_FIELD_DESC = new org.apache.thrift.protocol.TField("CNum", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getCodeByCNum_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getCodeByCNum_argsTupleSchemeFactory());
    }

    public String CNum; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CNUM((short)1, "CNum");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CNUM
            return CNUM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CNUM, new org.apache.thrift.meta_data.FieldMetaData("CNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCodeByCNum_args.class, metaDataMap);
    }

    public getCodeByCNum_args() {
    }

    public getCodeByCNum_args(
      String CNum)
    {
      this();
      this.CNum = CNum;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCodeByCNum_args(getCodeByCNum_args other) {
      if (other.isSetCNum()) {
        this.CNum = other.CNum;
      }
    }

    public getCodeByCNum_args deepCopy() {
      return new getCodeByCNum_args(this);
    }

    @Override
    public void clear() {
      this.CNum = null;
    }

    public String getCNum() {
      return this.CNum;
    }

    public getCodeByCNum_args setCNum(String CNum) {
      this.CNum = CNum;
      return this;
    }

    public void unsetCNum() {
      this.CNum = null;
    }

    /** Returns true if field CNum is set (has been assigned a value) and false otherwise */
    public boolean isSetCNum() {
      return this.CNum != null;
    }

    public void setCNumIsSet(boolean value) {
      if (!value) {
        this.CNum = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CNUM:
        if (value == null) {
          unsetCNum();
        } else {
          setCNum((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CNUM:
        return getCNum();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CNUM:
        return isSetCNum();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCodeByCNum_args)
        return this.equals((getCodeByCNum_args)that);
      return false;
    }

    public boolean equals(getCodeByCNum_args that) {
      if (that == null)
        return false;

      boolean this_present_CNum = true && this.isSetCNum();
      boolean that_present_CNum = true && that.isSetCNum();
      if (this_present_CNum || that_present_CNum) {
        if (!(this_present_CNum && that_present_CNum))
          return false;
        if (!this.CNum.equals(that.CNum))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_CNum = true && (isSetCNum());
      list.add(present_CNum);
      if (present_CNum)
        list.add(CNum);

      return list.hashCode();
    }

    @Override
    public int compareTo(getCodeByCNum_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCNum()).compareTo(other.isSetCNum());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCNum()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.CNum, other.CNum);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getCodeByCNum_args(");
      boolean first = true;

      sb.append("CNum:");
      if (this.CNum == null) {
        sb.append("null");
      } else {
        sb.append(this.CNum);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCodeByCNum_argsStandardSchemeFactory implements SchemeFactory {
      public getCodeByCNum_argsStandardScheme getScheme() {
        return new getCodeByCNum_argsStandardScheme();
      }
    }

    private static class getCodeByCNum_argsStandardScheme extends StandardScheme<getCodeByCNum_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCodeByCNum_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CNUM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.CNum = iprot.readString();
                struct.setCNumIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCodeByCNum_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.CNum != null) {
          oprot.writeFieldBegin(CNUM_FIELD_DESC);
          oprot.writeString(struct.CNum);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCodeByCNum_argsTupleSchemeFactory implements SchemeFactory {
      public getCodeByCNum_argsTupleScheme getScheme() {
        return new getCodeByCNum_argsTupleScheme();
      }
    }

    private static class getCodeByCNum_argsTupleScheme extends TupleScheme<getCodeByCNum_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCodeByCNum_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCNum()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCNum()) {
          oprot.writeString(struct.CNum);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCodeByCNum_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.CNum = iprot.readString();
          struct.setCNumIsSet(true);
        }
      }
    }

  }

  public static class getCodeByCNum_result implements org.apache.thrift.TBase<getCodeByCNum_result, getCodeByCNum_result._Fields>, java.io.Serializable, Cloneable, Comparable<getCodeByCNum_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCodeByCNum_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getCodeByCNum_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getCodeByCNum_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCodeByCNum_result.class, metaDataMap);
    }

    public getCodeByCNum_result() {
    }

    public getCodeByCNum_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCodeByCNum_result(getCodeByCNum_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public getCodeByCNum_result deepCopy() {
      return new getCodeByCNum_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public getCodeByCNum_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCodeByCNum_result)
        return this.equals((getCodeByCNum_result)that);
      return false;
    }

    public boolean equals(getCodeByCNum_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getCodeByCNum_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getCodeByCNum_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCodeByCNum_resultStandardSchemeFactory implements SchemeFactory {
      public getCodeByCNum_resultStandardScheme getScheme() {
        return new getCodeByCNum_resultStandardScheme();
      }
    }

    private static class getCodeByCNum_resultStandardScheme extends StandardScheme<getCodeByCNum_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCodeByCNum_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCodeByCNum_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCodeByCNum_resultTupleSchemeFactory implements SchemeFactory {
      public getCodeByCNum_resultTupleScheme getScheme() {
        return new getCodeByCNum_resultTupleScheme();
      }
    }

    private static class getCodeByCNum_resultTupleScheme extends TupleScheme<getCodeByCNum_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCodeByCNum_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCodeByCNum_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class bindLocationAndGoods_args implements org.apache.thrift.TBase<bindLocationAndGoods_args, bindLocationAndGoods_args._Fields>, java.io.Serializable, Cloneable, Comparable<bindLocationAndGoods_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bindLocationAndGoods_args");

    private static final org.apache.thrift.protocol.TField LOCATION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("LocationID", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField CNUMS_FIELD_DESC = new org.apache.thrift.protocol.TField("CNums", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new bindLocationAndGoods_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new bindLocationAndGoods_argsTupleSchemeFactory());
    }

    public int LocationID; // required
    public List<String> CNums; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LOCATION_ID((short)1, "LocationID"),
      CNUMS((short)2, "CNums");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LOCATION_ID
            return LOCATION_ID;
          case 2: // CNUMS
            return CNUMS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __LOCATIONID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LOCATION_ID, new org.apache.thrift.meta_data.FieldMetaData("LocationID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.CNUMS, new org.apache.thrift.meta_data.FieldMetaData("CNums", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bindLocationAndGoods_args.class, metaDataMap);
    }

    public bindLocationAndGoods_args() {
    }

    public bindLocationAndGoods_args(
      int LocationID,
      List<String> CNums)
    {
      this();
      this.LocationID = LocationID;
      setLocationIDIsSet(true);
      this.CNums = CNums;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bindLocationAndGoods_args(bindLocationAndGoods_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.LocationID = other.LocationID;
      if (other.isSetCNums()) {
        List<String> __this__CNums = new ArrayList<String>(other.CNums);
        this.CNums = __this__CNums;
      }
    }

    public bindLocationAndGoods_args deepCopy() {
      return new bindLocationAndGoods_args(this);
    }

    @Override
    public void clear() {
      setLocationIDIsSet(false);
      this.LocationID = 0;
      this.CNums = null;
    }

    public int getLocationID() {
      return this.LocationID;
    }

    public bindLocationAndGoods_args setLocationID(int LocationID) {
      this.LocationID = LocationID;
      setLocationIDIsSet(true);
      return this;
    }

    public void unsetLocationID() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOCATIONID_ISSET_ID);
    }

    /** Returns true if field LocationID is set (has been assigned a value) and false otherwise */
    public boolean isSetLocationID() {
      return EncodingUtils.testBit(__isset_bitfield, __LOCATIONID_ISSET_ID);
    }

    public void setLocationIDIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOCATIONID_ISSET_ID, value);
    }

    public int getCNumsSize() {
      return (this.CNums == null) ? 0 : this.CNums.size();
    }

    public java.util.Iterator<String> getCNumsIterator() {
      return (this.CNums == null) ? null : this.CNums.iterator();
    }

    public void addToCNums(String elem) {
      if (this.CNums == null) {
        this.CNums = new ArrayList<String>();
      }
      this.CNums.add(elem);
    }

    public List<String> getCNums() {
      return this.CNums;
    }

    public bindLocationAndGoods_args setCNums(List<String> CNums) {
      this.CNums = CNums;
      return this;
    }

    public void unsetCNums() {
      this.CNums = null;
    }

    /** Returns true if field CNums is set (has been assigned a value) and false otherwise */
    public boolean isSetCNums() {
      return this.CNums != null;
    }

    public void setCNumsIsSet(boolean value) {
      if (!value) {
        this.CNums = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LOCATION_ID:
        if (value == null) {
          unsetLocationID();
        } else {
          setLocationID((Integer)value);
        }
        break;

      case CNUMS:
        if (value == null) {
          unsetCNums();
        } else {
          setCNums((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LOCATION_ID:
        return getLocationID();

      case CNUMS:
        return getCNums();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LOCATION_ID:
        return isSetLocationID();
      case CNUMS:
        return isSetCNums();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof bindLocationAndGoods_args)
        return this.equals((bindLocationAndGoods_args)that);
      return false;
    }

    public boolean equals(bindLocationAndGoods_args that) {
      if (that == null)
        return false;

      boolean this_present_LocationID = true;
      boolean that_present_LocationID = true;
      if (this_present_LocationID || that_present_LocationID) {
        if (!(this_present_LocationID && that_present_LocationID))
          return false;
        if (this.LocationID != that.LocationID)
          return false;
      }

      boolean this_present_CNums = true && this.isSetCNums();
      boolean that_present_CNums = true && that.isSetCNums();
      if (this_present_CNums || that_present_CNums) {
        if (!(this_present_CNums && that_present_CNums))
          return false;
        if (!this.CNums.equals(that.CNums))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_LocationID = true;
      list.add(present_LocationID);
      if (present_LocationID)
        list.add(LocationID);

      boolean present_CNums = true && (isSetCNums());
      list.add(present_CNums);
      if (present_CNums)
        list.add(CNums);

      return list.hashCode();
    }

    @Override
    public int compareTo(bindLocationAndGoods_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetLocationID()).compareTo(other.isSetLocationID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLocationID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.LocationID, other.LocationID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCNums()).compareTo(other.isSetCNums());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCNums()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.CNums, other.CNums);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("bindLocationAndGoods_args(");
      boolean first = true;

      sb.append("LocationID:");
      sb.append(this.LocationID);
      first = false;
      if (!first) sb.append(", ");
      sb.append("CNums:");
      if (this.CNums == null) {
        sb.append("null");
      } else {
        sb.append(this.CNums);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bindLocationAndGoods_argsStandardSchemeFactory implements SchemeFactory {
      public bindLocationAndGoods_argsStandardScheme getScheme() {
        return new bindLocationAndGoods_argsStandardScheme();
      }
    }

    private static class bindLocationAndGoods_argsStandardScheme extends StandardScheme<bindLocationAndGoods_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bindLocationAndGoods_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LOCATION_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.LocationID = iprot.readI32();
                struct.setLocationIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CNUMS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                  struct.CNums = new ArrayList<String>(_list16.size);
                  String _elem17;
                  for (int _i18 = 0; _i18 < _list16.size; ++_i18)
                  {
                    _elem17 = iprot.readString();
                    struct.CNums.add(_elem17);
                  }
                  iprot.readListEnd();
                }
                struct.setCNumsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bindLocationAndGoods_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(LOCATION_ID_FIELD_DESC);
        oprot.writeI32(struct.LocationID);
        oprot.writeFieldEnd();
        if (struct.CNums != null) {
          oprot.writeFieldBegin(CNUMS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.CNums.size()));
            for (String _iter19 : struct.CNums)
            {
              oprot.writeString(_iter19);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bindLocationAndGoods_argsTupleSchemeFactory implements SchemeFactory {
      public bindLocationAndGoods_argsTupleScheme getScheme() {
        return new bindLocationAndGoods_argsTupleScheme();
      }
    }

    private static class bindLocationAndGoods_argsTupleScheme extends TupleScheme<bindLocationAndGoods_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bindLocationAndGoods_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetLocationID()) {
          optionals.set(0);
        }
        if (struct.isSetCNums()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetLocationID()) {
          oprot.writeI32(struct.LocationID);
        }
        if (struct.isSetCNums()) {
          {
            oprot.writeI32(struct.CNums.size());
            for (String _iter20 : struct.CNums)
            {
              oprot.writeString(_iter20);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bindLocationAndGoods_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.LocationID = iprot.readI32();
          struct.setLocationIDIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.CNums = new ArrayList<String>(_list21.size);
            String _elem22;
            for (int _i23 = 0; _i23 < _list21.size; ++_i23)
            {
              _elem22 = iprot.readString();
              struct.CNums.add(_elem22);
            }
          }
          struct.setCNumsIsSet(true);
        }
      }
    }

  }

  public static class bindLocationAndGoods_result implements org.apache.thrift.TBase<bindLocationAndGoods_result, bindLocationAndGoods_result._Fields>, java.io.Serializable, Cloneable, Comparable<bindLocationAndGoods_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bindLocationAndGoods_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new bindLocationAndGoods_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new bindLocationAndGoods_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bindLocationAndGoods_result.class, metaDataMap);
    }

    public bindLocationAndGoods_result() {
    }

    public bindLocationAndGoods_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bindLocationAndGoods_result(bindLocationAndGoods_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public bindLocationAndGoods_result deepCopy() {
      return new bindLocationAndGoods_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public bindLocationAndGoods_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof bindLocationAndGoods_result)
        return this.equals((bindLocationAndGoods_result)that);
      return false;
    }

    public boolean equals(bindLocationAndGoods_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(bindLocationAndGoods_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("bindLocationAndGoods_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bindLocationAndGoods_resultStandardSchemeFactory implements SchemeFactory {
      public bindLocationAndGoods_resultStandardScheme getScheme() {
        return new bindLocationAndGoods_resultStandardScheme();
      }
    }

    private static class bindLocationAndGoods_resultStandardScheme extends StandardScheme<bindLocationAndGoods_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bindLocationAndGoods_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bindLocationAndGoods_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bindLocationAndGoods_resultTupleSchemeFactory implements SchemeFactory {
      public bindLocationAndGoods_resultTupleScheme getScheme() {
        return new bindLocationAndGoods_resultTupleScheme();
      }
    }

    private static class bindLocationAndGoods_resultTupleScheme extends TupleScheme<bindLocationAndGoods_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bindLocationAndGoods_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bindLocationAndGoods_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getApplySheets_args implements org.apache.thrift.TBase<getApplySheets_args, getApplySheets_args._Fields>, java.io.Serializable, Cloneable, Comparable<getApplySheets_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getApplySheets_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getApplySheets_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getApplySheets_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getApplySheets_args.class, metaDataMap);
    }

    public getApplySheets_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getApplySheets_args(getApplySheets_args other) {
    }

    public getApplySheets_args deepCopy() {
      return new getApplySheets_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getApplySheets_args)
        return this.equals((getApplySheets_args)that);
      return false;
    }

    public boolean equals(getApplySheets_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(getApplySheets_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getApplySheets_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getApplySheets_argsStandardSchemeFactory implements SchemeFactory {
      public getApplySheets_argsStandardScheme getScheme() {
        return new getApplySheets_argsStandardScheme();
      }
    }

    private static class getApplySheets_argsStandardScheme extends StandardScheme<getApplySheets_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getApplySheets_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getApplySheets_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getApplySheets_argsTupleSchemeFactory implements SchemeFactory {
      public getApplySheets_argsTupleScheme getScheme() {
        return new getApplySheets_argsTupleScheme();
      }
    }

    private static class getApplySheets_argsTupleScheme extends TupleScheme<getApplySheets_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getApplySheets_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getApplySheets_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getApplySheets_result implements org.apache.thrift.TBase<getApplySheets_result, getApplySheets_result._Fields>, java.io.Serializable, Cloneable, Comparable<getApplySheets_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getApplySheets_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getApplySheets_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getApplySheets_resultTupleSchemeFactory());
    }

    public List<rfid.service.POS> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, rfid.service.POS.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getApplySheets_result.class, metaDataMap);
    }

    public getApplySheets_result() {
    }

    public getApplySheets_result(
      List<rfid.service.POS> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getApplySheets_result(getApplySheets_result other) {
      if (other.isSetSuccess()) {
        List<rfid.service.POS> __this__success = new ArrayList<rfid.service.POS>(other.success.size());
        for (rfid.service.POS other_element : other.success) {
          __this__success.add(new rfid.service.POS(other_element));
        }
        this.success = __this__success;
      }
    }

    public getApplySheets_result deepCopy() {
      return new getApplySheets_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<rfid.service.POS> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(rfid.service.POS elem) {
      if (this.success == null) {
        this.success = new ArrayList<rfid.service.POS>();
      }
      this.success.add(elem);
    }

    public List<rfid.service.POS> getSuccess() {
      return this.success;
    }

    public getApplySheets_result setSuccess(List<rfid.service.POS> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<rfid.service.POS>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getApplySheets_result)
        return this.equals((getApplySheets_result)that);
      return false;
    }

    public boolean equals(getApplySheets_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getApplySheets_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getApplySheets_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getApplySheets_resultStandardSchemeFactory implements SchemeFactory {
      public getApplySheets_resultStandardScheme getScheme() {
        return new getApplySheets_resultStandardScheme();
      }
    }

    private static class getApplySheets_resultStandardScheme extends StandardScheme<getApplySheets_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getApplySheets_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
                  struct.success = new ArrayList<rfid.service.POS>(_list24.size);
                  rfid.service.POS _elem25;
                  for (int _i26 = 0; _i26 < _list24.size; ++_i26)
                  {
                    _elem25 = new rfid.service.POS();
                    _elem25.read(iprot);
                    struct.success.add(_elem25);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getApplySheets_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (rfid.service.POS _iter27 : struct.success)
            {
              _iter27.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getApplySheets_resultTupleSchemeFactory implements SchemeFactory {
      public getApplySheets_resultTupleScheme getScheme() {
        return new getApplySheets_resultTupleScheme();
      }
    }

    private static class getApplySheets_resultTupleScheme extends TupleScheme<getApplySheets_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getApplySheets_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (rfid.service.POS _iter28 : struct.success)
            {
              _iter28.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getApplySheets_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<rfid.service.POS>(_list29.size);
            rfid.service.POS _elem30;
            for (int _i31 = 0; _i31 < _list29.size; ++_i31)
            {
              _elem30 = new rfid.service.POS();
              _elem30.read(iprot);
              struct.success.add(_elem30);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getOutApplySheets_args implements org.apache.thrift.TBase<getOutApplySheets_args, getOutApplySheets_args._Fields>, java.io.Serializable, Cloneable, Comparable<getOutApplySheets_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getOutApplySheets_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getOutApplySheets_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getOutApplySheets_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOutApplySheets_args.class, metaDataMap);
    }

    public getOutApplySheets_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getOutApplySheets_args(getOutApplySheets_args other) {
    }

    public getOutApplySheets_args deepCopy() {
      return new getOutApplySheets_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getOutApplySheets_args)
        return this.equals((getOutApplySheets_args)that);
      return false;
    }

    public boolean equals(getOutApplySheets_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(getOutApplySheets_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getOutApplySheets_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getOutApplySheets_argsStandardSchemeFactory implements SchemeFactory {
      public getOutApplySheets_argsStandardScheme getScheme() {
        return new getOutApplySheets_argsStandardScheme();
      }
    }

    private static class getOutApplySheets_argsStandardScheme extends StandardScheme<getOutApplySheets_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getOutApplySheets_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getOutApplySheets_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getOutApplySheets_argsTupleSchemeFactory implements SchemeFactory {
      public getOutApplySheets_argsTupleScheme getScheme() {
        return new getOutApplySheets_argsTupleScheme();
      }
    }

    private static class getOutApplySheets_argsTupleScheme extends TupleScheme<getOutApplySheets_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getOutApplySheets_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getOutApplySheets_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getOutApplySheets_result implements org.apache.thrift.TBase<getOutApplySheets_result, getOutApplySheets_result._Fields>, java.io.Serializable, Cloneable, Comparable<getOutApplySheets_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getOutApplySheets_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getOutApplySheets_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getOutApplySheets_resultTupleSchemeFactory());
    }

    public List<rfid.service.POS> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, rfid.service.POS.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOutApplySheets_result.class, metaDataMap);
    }

    public getOutApplySheets_result() {
    }

    public getOutApplySheets_result(
      List<rfid.service.POS> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getOutApplySheets_result(getOutApplySheets_result other) {
      if (other.isSetSuccess()) {
        List<rfid.service.POS> __this__success = new ArrayList<rfid.service.POS>(other.success.size());
        for (rfid.service.POS other_element : other.success) {
          __this__success.add(new rfid.service.POS(other_element));
        }
        this.success = __this__success;
      }
    }

    public getOutApplySheets_result deepCopy() {
      return new getOutApplySheets_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<rfid.service.POS> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(rfid.service.POS elem) {
      if (this.success == null) {
        this.success = new ArrayList<rfid.service.POS>();
      }
      this.success.add(elem);
    }

    public List<rfid.service.POS> getSuccess() {
      return this.success;
    }

    public getOutApplySheets_result setSuccess(List<rfid.service.POS> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<rfid.service.POS>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getOutApplySheets_result)
        return this.equals((getOutApplySheets_result)that);
      return false;
    }

    public boolean equals(getOutApplySheets_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getOutApplySheets_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getOutApplySheets_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getOutApplySheets_resultStandardSchemeFactory implements SchemeFactory {
      public getOutApplySheets_resultStandardScheme getScheme() {
        return new getOutApplySheets_resultStandardScheme();
      }
    }

    private static class getOutApplySheets_resultStandardScheme extends StandardScheme<getOutApplySheets_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getOutApplySheets_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list32 = iprot.readListBegin();
                  struct.success = new ArrayList<rfid.service.POS>(_list32.size);
                  rfid.service.POS _elem33;
                  for (int _i34 = 0; _i34 < _list32.size; ++_i34)
                  {
                    _elem33 = new rfid.service.POS();
                    _elem33.read(iprot);
                    struct.success.add(_elem33);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getOutApplySheets_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (rfid.service.POS _iter35 : struct.success)
            {
              _iter35.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getOutApplySheets_resultTupleSchemeFactory implements SchemeFactory {
      public getOutApplySheets_resultTupleScheme getScheme() {
        return new getOutApplySheets_resultTupleScheme();
      }
    }

    private static class getOutApplySheets_resultTupleScheme extends TupleScheme<getOutApplySheets_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getOutApplySheets_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (rfid.service.POS _iter36 : struct.success)
            {
              _iter36.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getOutApplySheets_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list37 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<rfid.service.POS>(_list37.size);
            rfid.service.POS _elem38;
            for (int _i39 = 0; _i39 < _list37.size; ++_i39)
            {
              _elem38 = new rfid.service.POS();
              _elem38.read(iprot);
              struct.success.add(_elem38);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getPOSInfoByApplyDocCode_args implements org.apache.thrift.TBase<getPOSInfoByApplyDocCode_args, getPOSInfoByApplyDocCode_args._Fields>, java.io.Serializable, Cloneable, Comparable<getPOSInfoByApplyDocCode_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPOSInfoByApplyDocCode_args");

    private static final org.apache.thrift.protocol.TField APPLY_DOC_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("ApplyDocCode", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPOSInfoByApplyDocCode_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPOSInfoByApplyDocCode_argsTupleSchemeFactory());
    }

    public String ApplyDocCode; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      APPLY_DOC_CODE((short)1, "ApplyDocCode");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // APPLY_DOC_CODE
            return APPLY_DOC_CODE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.APPLY_DOC_CODE, new org.apache.thrift.meta_data.FieldMetaData("ApplyDocCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPOSInfoByApplyDocCode_args.class, metaDataMap);
    }

    public getPOSInfoByApplyDocCode_args() {
    }

    public getPOSInfoByApplyDocCode_args(
      String ApplyDocCode)
    {
      this();
      this.ApplyDocCode = ApplyDocCode;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPOSInfoByApplyDocCode_args(getPOSInfoByApplyDocCode_args other) {
      if (other.isSetApplyDocCode()) {
        this.ApplyDocCode = other.ApplyDocCode;
      }
    }

    public getPOSInfoByApplyDocCode_args deepCopy() {
      return new getPOSInfoByApplyDocCode_args(this);
    }

    @Override
    public void clear() {
      this.ApplyDocCode = null;
    }

    public String getApplyDocCode() {
      return this.ApplyDocCode;
    }

    public getPOSInfoByApplyDocCode_args setApplyDocCode(String ApplyDocCode) {
      this.ApplyDocCode = ApplyDocCode;
      return this;
    }

    public void unsetApplyDocCode() {
      this.ApplyDocCode = null;
    }

    /** Returns true if field ApplyDocCode is set (has been assigned a value) and false otherwise */
    public boolean isSetApplyDocCode() {
      return this.ApplyDocCode != null;
    }

    public void setApplyDocCodeIsSet(boolean value) {
      if (!value) {
        this.ApplyDocCode = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case APPLY_DOC_CODE:
        if (value == null) {
          unsetApplyDocCode();
        } else {
          setApplyDocCode((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case APPLY_DOC_CODE:
        return getApplyDocCode();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case APPLY_DOC_CODE:
        return isSetApplyDocCode();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPOSInfoByApplyDocCode_args)
        return this.equals((getPOSInfoByApplyDocCode_args)that);
      return false;
    }

    public boolean equals(getPOSInfoByApplyDocCode_args that) {
      if (that == null)
        return false;

      boolean this_present_ApplyDocCode = true && this.isSetApplyDocCode();
      boolean that_present_ApplyDocCode = true && that.isSetApplyDocCode();
      if (this_present_ApplyDocCode || that_present_ApplyDocCode) {
        if (!(this_present_ApplyDocCode && that_present_ApplyDocCode))
          return false;
        if (!this.ApplyDocCode.equals(that.ApplyDocCode))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_ApplyDocCode = true && (isSetApplyDocCode());
      list.add(present_ApplyDocCode);
      if (present_ApplyDocCode)
        list.add(ApplyDocCode);

      return list.hashCode();
    }

    @Override
    public int compareTo(getPOSInfoByApplyDocCode_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetApplyDocCode()).compareTo(other.isSetApplyDocCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetApplyDocCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ApplyDocCode, other.ApplyDocCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPOSInfoByApplyDocCode_args(");
      boolean first = true;

      sb.append("ApplyDocCode:");
      if (this.ApplyDocCode == null) {
        sb.append("null");
      } else {
        sb.append(this.ApplyDocCode);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPOSInfoByApplyDocCode_argsStandardSchemeFactory implements SchemeFactory {
      public getPOSInfoByApplyDocCode_argsStandardScheme getScheme() {
        return new getPOSInfoByApplyDocCode_argsStandardScheme();
      }
    }

    private static class getPOSInfoByApplyDocCode_argsStandardScheme extends StandardScheme<getPOSInfoByApplyDocCode_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPOSInfoByApplyDocCode_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // APPLY_DOC_CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.ApplyDocCode = iprot.readString();
                struct.setApplyDocCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPOSInfoByApplyDocCode_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ApplyDocCode != null) {
          oprot.writeFieldBegin(APPLY_DOC_CODE_FIELD_DESC);
          oprot.writeString(struct.ApplyDocCode);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPOSInfoByApplyDocCode_argsTupleSchemeFactory implements SchemeFactory {
      public getPOSInfoByApplyDocCode_argsTupleScheme getScheme() {
        return new getPOSInfoByApplyDocCode_argsTupleScheme();
      }
    }

    private static class getPOSInfoByApplyDocCode_argsTupleScheme extends TupleScheme<getPOSInfoByApplyDocCode_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPOSInfoByApplyDocCode_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetApplyDocCode()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetApplyDocCode()) {
          oprot.writeString(struct.ApplyDocCode);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPOSInfoByApplyDocCode_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.ApplyDocCode = iprot.readString();
          struct.setApplyDocCodeIsSet(true);
        }
      }
    }

  }

  public static class getPOSInfoByApplyDocCode_result implements org.apache.thrift.TBase<getPOSInfoByApplyDocCode_result, getPOSInfoByApplyDocCode_result._Fields>, java.io.Serializable, Cloneable, Comparable<getPOSInfoByApplyDocCode_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPOSInfoByApplyDocCode_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPOSInfoByApplyDocCode_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPOSInfoByApplyDocCode_resultTupleSchemeFactory());
    }

    public rfid.service.POS success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, rfid.service.POS.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPOSInfoByApplyDocCode_result.class, metaDataMap);
    }

    public getPOSInfoByApplyDocCode_result() {
    }

    public getPOSInfoByApplyDocCode_result(
      rfid.service.POS success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPOSInfoByApplyDocCode_result(getPOSInfoByApplyDocCode_result other) {
      if (other.isSetSuccess()) {
        this.success = new rfid.service.POS(other.success);
      }
    }

    public getPOSInfoByApplyDocCode_result deepCopy() {
      return new getPOSInfoByApplyDocCode_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public rfid.service.POS getSuccess() {
      return this.success;
    }

    public getPOSInfoByApplyDocCode_result setSuccess(rfid.service.POS success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((rfid.service.POS)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPOSInfoByApplyDocCode_result)
        return this.equals((getPOSInfoByApplyDocCode_result)that);
      return false;
    }

    public boolean equals(getPOSInfoByApplyDocCode_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getPOSInfoByApplyDocCode_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPOSInfoByApplyDocCode_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPOSInfoByApplyDocCode_resultStandardSchemeFactory implements SchemeFactory {
      public getPOSInfoByApplyDocCode_resultStandardScheme getScheme() {
        return new getPOSInfoByApplyDocCode_resultStandardScheme();
      }
    }

    private static class getPOSInfoByApplyDocCode_resultStandardScheme extends StandardScheme<getPOSInfoByApplyDocCode_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPOSInfoByApplyDocCode_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new rfid.service.POS();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPOSInfoByApplyDocCode_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPOSInfoByApplyDocCode_resultTupleSchemeFactory implements SchemeFactory {
      public getPOSInfoByApplyDocCode_resultTupleScheme getScheme() {
        return new getPOSInfoByApplyDocCode_resultTupleScheme();
      }
    }

    private static class getPOSInfoByApplyDocCode_resultTupleScheme extends TupleScheme<getPOSInfoByApplyDocCode_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPOSInfoByApplyDocCode_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPOSInfoByApplyDocCode_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new rfid.service.POS();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getGoodsListByApplyDocCode_args implements org.apache.thrift.TBase<getGoodsListByApplyDocCode_args, getGoodsListByApplyDocCode_args._Fields>, java.io.Serializable, Cloneable, Comparable<getGoodsListByApplyDocCode_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getGoodsListByApplyDocCode_args");

    private static final org.apache.thrift.protocol.TField APPLY_DOC_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("ApplyDocCode", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getGoodsListByApplyDocCode_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getGoodsListByApplyDocCode_argsTupleSchemeFactory());
    }

    public String ApplyDocCode; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      APPLY_DOC_CODE((short)1, "ApplyDocCode");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // APPLY_DOC_CODE
            return APPLY_DOC_CODE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.APPLY_DOC_CODE, new org.apache.thrift.meta_data.FieldMetaData("ApplyDocCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getGoodsListByApplyDocCode_args.class, metaDataMap);
    }

    public getGoodsListByApplyDocCode_args() {
    }

    public getGoodsListByApplyDocCode_args(
      String ApplyDocCode)
    {
      this();
      this.ApplyDocCode = ApplyDocCode;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getGoodsListByApplyDocCode_args(getGoodsListByApplyDocCode_args other) {
      if (other.isSetApplyDocCode()) {
        this.ApplyDocCode = other.ApplyDocCode;
      }
    }

    public getGoodsListByApplyDocCode_args deepCopy() {
      return new getGoodsListByApplyDocCode_args(this);
    }

    @Override
    public void clear() {
      this.ApplyDocCode = null;
    }

    public String getApplyDocCode() {
      return this.ApplyDocCode;
    }

    public getGoodsListByApplyDocCode_args setApplyDocCode(String ApplyDocCode) {
      this.ApplyDocCode = ApplyDocCode;
      return this;
    }

    public void unsetApplyDocCode() {
      this.ApplyDocCode = null;
    }

    /** Returns true if field ApplyDocCode is set (has been assigned a value) and false otherwise */
    public boolean isSetApplyDocCode() {
      return this.ApplyDocCode != null;
    }

    public void setApplyDocCodeIsSet(boolean value) {
      if (!value) {
        this.ApplyDocCode = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case APPLY_DOC_CODE:
        if (value == null) {
          unsetApplyDocCode();
        } else {
          setApplyDocCode((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case APPLY_DOC_CODE:
        return getApplyDocCode();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case APPLY_DOC_CODE:
        return isSetApplyDocCode();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getGoodsListByApplyDocCode_args)
        return this.equals((getGoodsListByApplyDocCode_args)that);
      return false;
    }

    public boolean equals(getGoodsListByApplyDocCode_args that) {
      if (that == null)
        return false;

      boolean this_present_ApplyDocCode = true && this.isSetApplyDocCode();
      boolean that_present_ApplyDocCode = true && that.isSetApplyDocCode();
      if (this_present_ApplyDocCode || that_present_ApplyDocCode) {
        if (!(this_present_ApplyDocCode && that_present_ApplyDocCode))
          return false;
        if (!this.ApplyDocCode.equals(that.ApplyDocCode))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_ApplyDocCode = true && (isSetApplyDocCode());
      list.add(present_ApplyDocCode);
      if (present_ApplyDocCode)
        list.add(ApplyDocCode);

      return list.hashCode();
    }

    @Override
    public int compareTo(getGoodsListByApplyDocCode_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetApplyDocCode()).compareTo(other.isSetApplyDocCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetApplyDocCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ApplyDocCode, other.ApplyDocCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getGoodsListByApplyDocCode_args(");
      boolean first = true;

      sb.append("ApplyDocCode:");
      if (this.ApplyDocCode == null) {
        sb.append("null");
      } else {
        sb.append(this.ApplyDocCode);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getGoodsListByApplyDocCode_argsStandardSchemeFactory implements SchemeFactory {
      public getGoodsListByApplyDocCode_argsStandardScheme getScheme() {
        return new getGoodsListByApplyDocCode_argsStandardScheme();
      }
    }

    private static class getGoodsListByApplyDocCode_argsStandardScheme extends StandardScheme<getGoodsListByApplyDocCode_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getGoodsListByApplyDocCode_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // APPLY_DOC_CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.ApplyDocCode = iprot.readString();
                struct.setApplyDocCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getGoodsListByApplyDocCode_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ApplyDocCode != null) {
          oprot.writeFieldBegin(APPLY_DOC_CODE_FIELD_DESC);
          oprot.writeString(struct.ApplyDocCode);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getGoodsListByApplyDocCode_argsTupleSchemeFactory implements SchemeFactory {
      public getGoodsListByApplyDocCode_argsTupleScheme getScheme() {
        return new getGoodsListByApplyDocCode_argsTupleScheme();
      }
    }

    private static class getGoodsListByApplyDocCode_argsTupleScheme extends TupleScheme<getGoodsListByApplyDocCode_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getGoodsListByApplyDocCode_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetApplyDocCode()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetApplyDocCode()) {
          oprot.writeString(struct.ApplyDocCode);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getGoodsListByApplyDocCode_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.ApplyDocCode = iprot.readString();
          struct.setApplyDocCodeIsSet(true);
        }
      }
    }

  }

  public static class getGoodsListByApplyDocCode_result implements org.apache.thrift.TBase<getGoodsListByApplyDocCode_result, getGoodsListByApplyDocCode_result._Fields>, java.io.Serializable, Cloneable, Comparable<getGoodsListByApplyDocCode_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getGoodsListByApplyDocCode_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getGoodsListByApplyDocCode_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getGoodsListByApplyDocCode_resultTupleSchemeFactory());
    }

    public List<rfid.service.Good> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, rfid.service.Good.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getGoodsListByApplyDocCode_result.class, metaDataMap);
    }

    public getGoodsListByApplyDocCode_result() {
    }

    public getGoodsListByApplyDocCode_result(
      List<rfid.service.Good> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getGoodsListByApplyDocCode_result(getGoodsListByApplyDocCode_result other) {
      if (other.isSetSuccess()) {
        List<rfid.service.Good> __this__success = new ArrayList<rfid.service.Good>(other.success.size());
        for (rfid.service.Good other_element : other.success) {
          __this__success.add(new rfid.service.Good(other_element));
        }
        this.success = __this__success;
      }
    }

    public getGoodsListByApplyDocCode_result deepCopy() {
      return new getGoodsListByApplyDocCode_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<rfid.service.Good> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(rfid.service.Good elem) {
      if (this.success == null) {
        this.success = new ArrayList<rfid.service.Good>();
      }
      this.success.add(elem);
    }

    public List<rfid.service.Good> getSuccess() {
      return this.success;
    }

    public getGoodsListByApplyDocCode_result setSuccess(List<rfid.service.Good> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<rfid.service.Good>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getGoodsListByApplyDocCode_result)
        return this.equals((getGoodsListByApplyDocCode_result)that);
      return false;
    }

    public boolean equals(getGoodsListByApplyDocCode_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getGoodsListByApplyDocCode_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getGoodsListByApplyDocCode_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getGoodsListByApplyDocCode_resultStandardSchemeFactory implements SchemeFactory {
      public getGoodsListByApplyDocCode_resultStandardScheme getScheme() {
        return new getGoodsListByApplyDocCode_resultStandardScheme();
      }
    }

    private static class getGoodsListByApplyDocCode_resultStandardScheme extends StandardScheme<getGoodsListByApplyDocCode_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getGoodsListByApplyDocCode_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list40 = iprot.readListBegin();
                  struct.success = new ArrayList<rfid.service.Good>(_list40.size);
                  rfid.service.Good _elem41;
                  for (int _i42 = 0; _i42 < _list40.size; ++_i42)
                  {
                    _elem41 = new rfid.service.Good();
                    _elem41.read(iprot);
                    struct.success.add(_elem41);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getGoodsListByApplyDocCode_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (rfid.service.Good _iter43 : struct.success)
            {
              _iter43.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getGoodsListByApplyDocCode_resultTupleSchemeFactory implements SchemeFactory {
      public getGoodsListByApplyDocCode_resultTupleScheme getScheme() {
        return new getGoodsListByApplyDocCode_resultTupleScheme();
      }
    }

    private static class getGoodsListByApplyDocCode_resultTupleScheme extends TupleScheme<getGoodsListByApplyDocCode_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getGoodsListByApplyDocCode_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (rfid.service.Good _iter44 : struct.success)
            {
              _iter44.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getGoodsListByApplyDocCode_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list45 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<rfid.service.Good>(_list45.size);
            rfid.service.Good _elem46;
            for (int _i47 = 0; _i47 < _list45.size; ++_i47)
            {
              _elem46 = new rfid.service.Good();
              _elem46.read(iprot);
              struct.success.add(_elem46);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class confirmRetrieval_args implements org.apache.thrift.TBase<confirmRetrieval_args, confirmRetrieval_args._Fields>, java.io.Serializable, Cloneable, Comparable<confirmRetrieval_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("confirmRetrieval_args");

    private static final org.apache.thrift.protocol.TField APPLY_DOC_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("ApplyDocCode", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField CARTONS_FIELD_DESC = new org.apache.thrift.protocol.TField("cartons", org.apache.thrift.protocol.TType.MAP, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new confirmRetrieval_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new confirmRetrieval_argsTupleSchemeFactory());
    }

    public String ApplyDocCode; // required
    public Map<String,Integer> cartons; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      APPLY_DOC_CODE((short)1, "ApplyDocCode"),
      CARTONS((short)2, "cartons");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // APPLY_DOC_CODE
            return APPLY_DOC_CODE;
          case 2: // CARTONS
            return CARTONS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.APPLY_DOC_CODE, new org.apache.thrift.meta_data.FieldMetaData("ApplyDocCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CARTONS, new org.apache.thrift.meta_data.FieldMetaData("cartons", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(confirmRetrieval_args.class, metaDataMap);
    }

    public confirmRetrieval_args() {
    }

    public confirmRetrieval_args(
      String ApplyDocCode,
      Map<String,Integer> cartons)
    {
      this();
      this.ApplyDocCode = ApplyDocCode;
      this.cartons = cartons;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public confirmRetrieval_args(confirmRetrieval_args other) {
      if (other.isSetApplyDocCode()) {
        this.ApplyDocCode = other.ApplyDocCode;
      }
      if (other.isSetCartons()) {
        Map<String,Integer> __this__cartons = new HashMap<String,Integer>(other.cartons);
        this.cartons = __this__cartons;
      }
    }

    public confirmRetrieval_args deepCopy() {
      return new confirmRetrieval_args(this);
    }

    @Override
    public void clear() {
      this.ApplyDocCode = null;
      this.cartons = null;
    }

    public String getApplyDocCode() {
      return this.ApplyDocCode;
    }

    public confirmRetrieval_args setApplyDocCode(String ApplyDocCode) {
      this.ApplyDocCode = ApplyDocCode;
      return this;
    }

    public void unsetApplyDocCode() {
      this.ApplyDocCode = null;
    }

    /** Returns true if field ApplyDocCode is set (has been assigned a value) and false otherwise */
    public boolean isSetApplyDocCode() {
      return this.ApplyDocCode != null;
    }

    public void setApplyDocCodeIsSet(boolean value) {
      if (!value) {
        this.ApplyDocCode = null;
      }
    }

    public int getCartonsSize() {
      return (this.cartons == null) ? 0 : this.cartons.size();
    }

    public void putToCartons(String key, int val) {
      if (this.cartons == null) {
        this.cartons = new HashMap<String,Integer>();
      }
      this.cartons.put(key, val);
    }

    public Map<String,Integer> getCartons() {
      return this.cartons;
    }

    public confirmRetrieval_args setCartons(Map<String,Integer> cartons) {
      this.cartons = cartons;
      return this;
    }

    public void unsetCartons() {
      this.cartons = null;
    }

    /** Returns true if field cartons is set (has been assigned a value) and false otherwise */
    public boolean isSetCartons() {
      return this.cartons != null;
    }

    public void setCartonsIsSet(boolean value) {
      if (!value) {
        this.cartons = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case APPLY_DOC_CODE:
        if (value == null) {
          unsetApplyDocCode();
        } else {
          setApplyDocCode((String)value);
        }
        break;

      case CARTONS:
        if (value == null) {
          unsetCartons();
        } else {
          setCartons((Map<String,Integer>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case APPLY_DOC_CODE:
        return getApplyDocCode();

      case CARTONS:
        return getCartons();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case APPLY_DOC_CODE:
        return isSetApplyDocCode();
      case CARTONS:
        return isSetCartons();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof confirmRetrieval_args)
        return this.equals((confirmRetrieval_args)that);
      return false;
    }

    public boolean equals(confirmRetrieval_args that) {
      if (that == null)
        return false;

      boolean this_present_ApplyDocCode = true && this.isSetApplyDocCode();
      boolean that_present_ApplyDocCode = true && that.isSetApplyDocCode();
      if (this_present_ApplyDocCode || that_present_ApplyDocCode) {
        if (!(this_present_ApplyDocCode && that_present_ApplyDocCode))
          return false;
        if (!this.ApplyDocCode.equals(that.ApplyDocCode))
          return false;
      }

      boolean this_present_cartons = true && this.isSetCartons();
      boolean that_present_cartons = true && that.isSetCartons();
      if (this_present_cartons || that_present_cartons) {
        if (!(this_present_cartons && that_present_cartons))
          return false;
        if (!this.cartons.equals(that.cartons))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_ApplyDocCode = true && (isSetApplyDocCode());
      list.add(present_ApplyDocCode);
      if (present_ApplyDocCode)
        list.add(ApplyDocCode);

      boolean present_cartons = true && (isSetCartons());
      list.add(present_cartons);
      if (present_cartons)
        list.add(cartons);

      return list.hashCode();
    }

    @Override
    public int compareTo(confirmRetrieval_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetApplyDocCode()).compareTo(other.isSetApplyDocCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetApplyDocCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ApplyDocCode, other.ApplyDocCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCartons()).compareTo(other.isSetCartons());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCartons()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cartons, other.cartons);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("confirmRetrieval_args(");
      boolean first = true;

      sb.append("ApplyDocCode:");
      if (this.ApplyDocCode == null) {
        sb.append("null");
      } else {
        sb.append(this.ApplyDocCode);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("cartons:");
      if (this.cartons == null) {
        sb.append("null");
      } else {
        sb.append(this.cartons);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class confirmRetrieval_argsStandardSchemeFactory implements SchemeFactory {
      public confirmRetrieval_argsStandardScheme getScheme() {
        return new confirmRetrieval_argsStandardScheme();
      }
    }

    private static class confirmRetrieval_argsStandardScheme extends StandardScheme<confirmRetrieval_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, confirmRetrieval_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // APPLY_DOC_CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.ApplyDocCode = iprot.readString();
                struct.setApplyDocCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CARTONS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map48 = iprot.readMapBegin();
                  struct.cartons = new HashMap<String,Integer>(2*_map48.size);
                  String _key49;
                  int _val50;
                  for (int _i51 = 0; _i51 < _map48.size; ++_i51)
                  {
                    _key49 = iprot.readString();
                    _val50 = iprot.readI32();
                    struct.cartons.put(_key49, _val50);
                  }
                  iprot.readMapEnd();
                }
                struct.setCartonsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, confirmRetrieval_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ApplyDocCode != null) {
          oprot.writeFieldBegin(APPLY_DOC_CODE_FIELD_DESC);
          oprot.writeString(struct.ApplyDocCode);
          oprot.writeFieldEnd();
        }
        if (struct.cartons != null) {
          oprot.writeFieldBegin(CARTONS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I32, struct.cartons.size()));
            for (Map.Entry<String, Integer> _iter52 : struct.cartons.entrySet())
            {
              oprot.writeString(_iter52.getKey());
              oprot.writeI32(_iter52.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class confirmRetrieval_argsTupleSchemeFactory implements SchemeFactory {
      public confirmRetrieval_argsTupleScheme getScheme() {
        return new confirmRetrieval_argsTupleScheme();
      }
    }

    private static class confirmRetrieval_argsTupleScheme extends TupleScheme<confirmRetrieval_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, confirmRetrieval_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetApplyDocCode()) {
          optionals.set(0);
        }
        if (struct.isSetCartons()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetApplyDocCode()) {
          oprot.writeString(struct.ApplyDocCode);
        }
        if (struct.isSetCartons()) {
          {
            oprot.writeI32(struct.cartons.size());
            for (Map.Entry<String, Integer> _iter53 : struct.cartons.entrySet())
            {
              oprot.writeString(_iter53.getKey());
              oprot.writeI32(_iter53.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, confirmRetrieval_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.ApplyDocCode = iprot.readString();
          struct.setApplyDocCodeIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TMap _map54 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.cartons = new HashMap<String,Integer>(2*_map54.size);
            String _key55;
            int _val56;
            for (int _i57 = 0; _i57 < _map54.size; ++_i57)
            {
              _key55 = iprot.readString();
              _val56 = iprot.readI32();
              struct.cartons.put(_key55, _val56);
            }
          }
          struct.setCartonsIsSet(true);
        }
      }
    }

  }

  public static class confirmRetrieval_result implements org.apache.thrift.TBase<confirmRetrieval_result, confirmRetrieval_result._Fields>, java.io.Serializable, Cloneable, Comparable<confirmRetrieval_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("confirmRetrieval_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new confirmRetrieval_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new confirmRetrieval_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(confirmRetrieval_result.class, metaDataMap);
    }

    public confirmRetrieval_result() {
    }

    public confirmRetrieval_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public confirmRetrieval_result(confirmRetrieval_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public confirmRetrieval_result deepCopy() {
      return new confirmRetrieval_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public confirmRetrieval_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof confirmRetrieval_result)
        return this.equals((confirmRetrieval_result)that);
      return false;
    }

    public boolean equals(confirmRetrieval_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(confirmRetrieval_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("confirmRetrieval_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class confirmRetrieval_resultStandardSchemeFactory implements SchemeFactory {
      public confirmRetrieval_resultStandardScheme getScheme() {
        return new confirmRetrieval_resultStandardScheme();
      }
    }

    private static class confirmRetrieval_resultStandardScheme extends StandardScheme<confirmRetrieval_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, confirmRetrieval_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, confirmRetrieval_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class confirmRetrieval_resultTupleSchemeFactory implements SchemeFactory {
      public confirmRetrieval_resultTupleScheme getScheme() {
        return new confirmRetrieval_resultTupleScheme();
      }
    }

    private static class confirmRetrieval_resultTupleScheme extends TupleScheme<confirmRetrieval_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, confirmRetrieval_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, confirmRetrieval_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class confirmReceiving_args implements org.apache.thrift.TBase<confirmReceiving_args, confirmReceiving_args._Fields>, java.io.Serializable, Cloneable, Comparable<confirmReceiving_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("confirmReceiving_args");

    private static final org.apache.thrift.protocol.TField CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("Code", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new confirmReceiving_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new confirmReceiving_argsTupleSchemeFactory());
    }

    public String Code; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CODE((short)1, "Code");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CODE
            return CODE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CODE, new org.apache.thrift.meta_data.FieldMetaData("Code", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(confirmReceiving_args.class, metaDataMap);
    }

    public confirmReceiving_args() {
    }

    public confirmReceiving_args(
      String Code)
    {
      this();
      this.Code = Code;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public confirmReceiving_args(confirmReceiving_args other) {
      if (other.isSetCode()) {
        this.Code = other.Code;
      }
    }

    public confirmReceiving_args deepCopy() {
      return new confirmReceiving_args(this);
    }

    @Override
    public void clear() {
      this.Code = null;
    }

    public String getCode() {
      return this.Code;
    }

    public confirmReceiving_args setCode(String Code) {
      this.Code = Code;
      return this;
    }

    public void unsetCode() {
      this.Code = null;
    }

    /** Returns true if field Code is set (has been assigned a value) and false otherwise */
    public boolean isSetCode() {
      return this.Code != null;
    }

    public void setCodeIsSet(boolean value) {
      if (!value) {
        this.Code = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CODE:
        if (value == null) {
          unsetCode();
        } else {
          setCode((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CODE:
        return getCode();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CODE:
        return isSetCode();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof confirmReceiving_args)
        return this.equals((confirmReceiving_args)that);
      return false;
    }

    public boolean equals(confirmReceiving_args that) {
      if (that == null)
        return false;

      boolean this_present_Code = true && this.isSetCode();
      boolean that_present_Code = true && that.isSetCode();
      if (this_present_Code || that_present_Code) {
        if (!(this_present_Code && that_present_Code))
          return false;
        if (!this.Code.equals(that.Code))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_Code = true && (isSetCode());
      list.add(present_Code);
      if (present_Code)
        list.add(Code);

      return list.hashCode();
    }

    @Override
    public int compareTo(confirmReceiving_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCode()).compareTo(other.isSetCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Code, other.Code);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("confirmReceiving_args(");
      boolean first = true;

      sb.append("Code:");
      if (this.Code == null) {
        sb.append("null");
      } else {
        sb.append(this.Code);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class confirmReceiving_argsStandardSchemeFactory implements SchemeFactory {
      public confirmReceiving_argsStandardScheme getScheme() {
        return new confirmReceiving_argsStandardScheme();
      }
    }

    private static class confirmReceiving_argsStandardScheme extends StandardScheme<confirmReceiving_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, confirmReceiving_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.Code = iprot.readString();
                struct.setCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, confirmReceiving_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.Code != null) {
          oprot.writeFieldBegin(CODE_FIELD_DESC);
          oprot.writeString(struct.Code);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class confirmReceiving_argsTupleSchemeFactory implements SchemeFactory {
      public confirmReceiving_argsTupleScheme getScheme() {
        return new confirmReceiving_argsTupleScheme();
      }
    }

    private static class confirmReceiving_argsTupleScheme extends TupleScheme<confirmReceiving_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, confirmReceiving_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCode()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCode()) {
          oprot.writeString(struct.Code);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, confirmReceiving_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.Code = iprot.readString();
          struct.setCodeIsSet(true);
        }
      }
    }

  }

  public static class confirmReceiving_result implements org.apache.thrift.TBase<confirmReceiving_result, confirmReceiving_result._Fields>, java.io.Serializable, Cloneable, Comparable<confirmReceiving_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("confirmReceiving_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new confirmReceiving_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new confirmReceiving_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(confirmReceiving_result.class, metaDataMap);
    }

    public confirmReceiving_result() {
    }

    public confirmReceiving_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public confirmReceiving_result(confirmReceiving_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public confirmReceiving_result deepCopy() {
      return new confirmReceiving_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public confirmReceiving_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof confirmReceiving_result)
        return this.equals((confirmReceiving_result)that);
      return false;
    }

    public boolean equals(confirmReceiving_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(confirmReceiving_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("confirmReceiving_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class confirmReceiving_resultStandardSchemeFactory implements SchemeFactory {
      public confirmReceiving_resultStandardScheme getScheme() {
        return new confirmReceiving_resultStandardScheme();
      }
    }

    private static class confirmReceiving_resultStandardScheme extends StandardScheme<confirmReceiving_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, confirmReceiving_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, confirmReceiving_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class confirmReceiving_resultTupleSchemeFactory implements SchemeFactory {
      public confirmReceiving_resultTupleScheme getScheme() {
        return new confirmReceiving_resultTupleScheme();
      }
    }

    private static class confirmReceiving_resultTupleScheme extends TupleScheme<confirmReceiving_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, confirmReceiving_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, confirmReceiving_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getGoodByCNum_args implements org.apache.thrift.TBase<getGoodByCNum_args, getGoodByCNum_args._Fields>, java.io.Serializable, Cloneable, Comparable<getGoodByCNum_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getGoodByCNum_args");

    private static final org.apache.thrift.protocol.TField CNUM_FIELD_DESC = new org.apache.thrift.protocol.TField("CNum", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getGoodByCNum_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getGoodByCNum_argsTupleSchemeFactory());
    }

    public String CNum; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CNUM((short)1, "CNum");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CNUM
            return CNUM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CNUM, new org.apache.thrift.meta_data.FieldMetaData("CNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getGoodByCNum_args.class, metaDataMap);
    }

    public getGoodByCNum_args() {
    }

    public getGoodByCNum_args(
      String CNum)
    {
      this();
      this.CNum = CNum;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getGoodByCNum_args(getGoodByCNum_args other) {
      if (other.isSetCNum()) {
        this.CNum = other.CNum;
      }
    }

    public getGoodByCNum_args deepCopy() {
      return new getGoodByCNum_args(this);
    }

    @Override
    public void clear() {
      this.CNum = null;
    }

    public String getCNum() {
      return this.CNum;
    }

    public getGoodByCNum_args setCNum(String CNum) {
      this.CNum = CNum;
      return this;
    }

    public void unsetCNum() {
      this.CNum = null;
    }

    /** Returns true if field CNum is set (has been assigned a value) and false otherwise */
    public boolean isSetCNum() {
      return this.CNum != null;
    }

    public void setCNumIsSet(boolean value) {
      if (!value) {
        this.CNum = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CNUM:
        if (value == null) {
          unsetCNum();
        } else {
          setCNum((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CNUM:
        return getCNum();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CNUM:
        return isSetCNum();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getGoodByCNum_args)
        return this.equals((getGoodByCNum_args)that);
      return false;
    }

    public boolean equals(getGoodByCNum_args that) {
      if (that == null)
        return false;

      boolean this_present_CNum = true && this.isSetCNum();
      boolean that_present_CNum = true && that.isSetCNum();
      if (this_present_CNum || that_present_CNum) {
        if (!(this_present_CNum && that_present_CNum))
          return false;
        if (!this.CNum.equals(that.CNum))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_CNum = true && (isSetCNum());
      list.add(present_CNum);
      if (present_CNum)
        list.add(CNum);

      return list.hashCode();
    }

    @Override
    public int compareTo(getGoodByCNum_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCNum()).compareTo(other.isSetCNum());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCNum()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.CNum, other.CNum);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getGoodByCNum_args(");
      boolean first = true;

      sb.append("CNum:");
      if (this.CNum == null) {
        sb.append("null");
      } else {
        sb.append(this.CNum);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getGoodByCNum_argsStandardSchemeFactory implements SchemeFactory {
      public getGoodByCNum_argsStandardScheme getScheme() {
        return new getGoodByCNum_argsStandardScheme();
      }
    }

    private static class getGoodByCNum_argsStandardScheme extends StandardScheme<getGoodByCNum_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getGoodByCNum_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CNUM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.CNum = iprot.readString();
                struct.setCNumIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getGoodByCNum_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.CNum != null) {
          oprot.writeFieldBegin(CNUM_FIELD_DESC);
          oprot.writeString(struct.CNum);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getGoodByCNum_argsTupleSchemeFactory implements SchemeFactory {
      public getGoodByCNum_argsTupleScheme getScheme() {
        return new getGoodByCNum_argsTupleScheme();
      }
    }

    private static class getGoodByCNum_argsTupleScheme extends TupleScheme<getGoodByCNum_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getGoodByCNum_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCNum()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCNum()) {
          oprot.writeString(struct.CNum);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getGoodByCNum_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.CNum = iprot.readString();
          struct.setCNumIsSet(true);
        }
      }
    }

  }

  public static class getGoodByCNum_result implements org.apache.thrift.TBase<getGoodByCNum_result, getGoodByCNum_result._Fields>, java.io.Serializable, Cloneable, Comparable<getGoodByCNum_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getGoodByCNum_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getGoodByCNum_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getGoodByCNum_resultTupleSchemeFactory());
    }

    public rfid.service.Good success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, rfid.service.Good.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getGoodByCNum_result.class, metaDataMap);
    }

    public getGoodByCNum_result() {
    }

    public getGoodByCNum_result(
      rfid.service.Good success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getGoodByCNum_result(getGoodByCNum_result other) {
      if (other.isSetSuccess()) {
        this.success = new rfid.service.Good(other.success);
      }
    }

    public getGoodByCNum_result deepCopy() {
      return new getGoodByCNum_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public rfid.service.Good getSuccess() {
      return this.success;
    }

    public getGoodByCNum_result setSuccess(rfid.service.Good success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((rfid.service.Good)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getGoodByCNum_result)
        return this.equals((getGoodByCNum_result)that);
      return false;
    }

    public boolean equals(getGoodByCNum_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getGoodByCNum_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getGoodByCNum_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getGoodByCNum_resultStandardSchemeFactory implements SchemeFactory {
      public getGoodByCNum_resultStandardScheme getScheme() {
        return new getGoodByCNum_resultStandardScheme();
      }
    }

    private static class getGoodByCNum_resultStandardScheme extends StandardScheme<getGoodByCNum_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getGoodByCNum_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new rfid.service.Good();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getGoodByCNum_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getGoodByCNum_resultTupleSchemeFactory implements SchemeFactory {
      public getGoodByCNum_resultTupleScheme getScheme() {
        return new getGoodByCNum_resultTupleScheme();
      }
    }

    private static class getGoodByCNum_resultTupleScheme extends TupleScheme<getGoodByCNum_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getGoodByCNum_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getGoodByCNum_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new rfid.service.Good();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getLocationListByItemErpCode_args implements org.apache.thrift.TBase<getLocationListByItemErpCode_args, getLocationListByItemErpCode_args._Fields>, java.io.Serializable, Cloneable, Comparable<getLocationListByItemErpCode_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getLocationListByItemErpCode_args");

    private static final org.apache.thrift.protocol.TField ITEM_ERPCODE_FIELD_DESC = new org.apache.thrift.protocol.TField("ItemERPCode", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField IS_BOM_FIELD_DESC = new org.apache.thrift.protocol.TField("isBom", org.apache.thrift.protocol.TType.BOOL, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getLocationListByItemErpCode_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getLocationListByItemErpCode_argsTupleSchemeFactory());
    }

    public String ItemERPCode; // required
    public boolean isBom; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ITEM_ERPCODE((short)1, "ItemERPCode"),
      IS_BOM((short)2, "isBom");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ITEM_ERPCODE
            return ITEM_ERPCODE;
          case 2: // IS_BOM
            return IS_BOM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ISBOM_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ITEM_ERPCODE, new org.apache.thrift.meta_data.FieldMetaData("ItemERPCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.IS_BOM, new org.apache.thrift.meta_data.FieldMetaData("isBom", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getLocationListByItemErpCode_args.class, metaDataMap);
    }

    public getLocationListByItemErpCode_args() {
    }

    public getLocationListByItemErpCode_args(
      String ItemERPCode,
      boolean isBom)
    {
      this();
      this.ItemERPCode = ItemERPCode;
      this.isBom = isBom;
      setIsBomIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getLocationListByItemErpCode_args(getLocationListByItemErpCode_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetItemERPCode()) {
        this.ItemERPCode = other.ItemERPCode;
      }
      this.isBom = other.isBom;
    }

    public getLocationListByItemErpCode_args deepCopy() {
      return new getLocationListByItemErpCode_args(this);
    }

    @Override
    public void clear() {
      this.ItemERPCode = null;
      setIsBomIsSet(false);
      this.isBom = false;
    }

    public String getItemERPCode() {
      return this.ItemERPCode;
    }

    public getLocationListByItemErpCode_args setItemERPCode(String ItemERPCode) {
      this.ItemERPCode = ItemERPCode;
      return this;
    }

    public void unsetItemERPCode() {
      this.ItemERPCode = null;
    }

    /** Returns true if field ItemERPCode is set (has been assigned a value) and false otherwise */
    public boolean isSetItemERPCode() {
      return this.ItemERPCode != null;
    }

    public void setItemERPCodeIsSet(boolean value) {
      if (!value) {
        this.ItemERPCode = null;
      }
    }

    public boolean isIsBom() {
      return this.isBom;
    }

    public getLocationListByItemErpCode_args setIsBom(boolean isBom) {
      this.isBom = isBom;
      setIsBomIsSet(true);
      return this;
    }

    public void unsetIsBom() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISBOM_ISSET_ID);
    }

    /** Returns true if field isBom is set (has been assigned a value) and false otherwise */
    public boolean isSetIsBom() {
      return EncodingUtils.testBit(__isset_bitfield, __ISBOM_ISSET_ID);
    }

    public void setIsBomIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISBOM_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ITEM_ERPCODE:
        if (value == null) {
          unsetItemERPCode();
        } else {
          setItemERPCode((String)value);
        }
        break;

      case IS_BOM:
        if (value == null) {
          unsetIsBom();
        } else {
          setIsBom((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ITEM_ERPCODE:
        return getItemERPCode();

      case IS_BOM:
        return isIsBom();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ITEM_ERPCODE:
        return isSetItemERPCode();
      case IS_BOM:
        return isSetIsBom();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getLocationListByItemErpCode_args)
        return this.equals((getLocationListByItemErpCode_args)that);
      return false;
    }

    public boolean equals(getLocationListByItemErpCode_args that) {
      if (that == null)
        return false;

      boolean this_present_ItemERPCode = true && this.isSetItemERPCode();
      boolean that_present_ItemERPCode = true && that.isSetItemERPCode();
      if (this_present_ItemERPCode || that_present_ItemERPCode) {
        if (!(this_present_ItemERPCode && that_present_ItemERPCode))
          return false;
        if (!this.ItemERPCode.equals(that.ItemERPCode))
          return false;
      }

      boolean this_present_isBom = true;
      boolean that_present_isBom = true;
      if (this_present_isBom || that_present_isBom) {
        if (!(this_present_isBom && that_present_isBom))
          return false;
        if (this.isBom != that.isBom)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_ItemERPCode = true && (isSetItemERPCode());
      list.add(present_ItemERPCode);
      if (present_ItemERPCode)
        list.add(ItemERPCode);

      boolean present_isBom = true;
      list.add(present_isBom);
      if (present_isBom)
        list.add(isBom);

      return list.hashCode();
    }

    @Override
    public int compareTo(getLocationListByItemErpCode_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetItemERPCode()).compareTo(other.isSetItemERPCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetItemERPCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ItemERPCode, other.ItemERPCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIsBom()).compareTo(other.isSetIsBom());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIsBom()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isBom, other.isBom);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getLocationListByItemErpCode_args(");
      boolean first = true;

      sb.append("ItemERPCode:");
      if (this.ItemERPCode == null) {
        sb.append("null");
      } else {
        sb.append(this.ItemERPCode);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("isBom:");
      sb.append(this.isBom);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getLocationListByItemErpCode_argsStandardSchemeFactory implements SchemeFactory {
      public getLocationListByItemErpCode_argsStandardScheme getScheme() {
        return new getLocationListByItemErpCode_argsStandardScheme();
      }
    }

    private static class getLocationListByItemErpCode_argsStandardScheme extends StandardScheme<getLocationListByItemErpCode_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getLocationListByItemErpCode_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ITEM_ERPCODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.ItemERPCode = iprot.readString();
                struct.setItemERPCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // IS_BOM
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.isBom = iprot.readBool();
                struct.setIsBomIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getLocationListByItemErpCode_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ItemERPCode != null) {
          oprot.writeFieldBegin(ITEM_ERPCODE_FIELD_DESC);
          oprot.writeString(struct.ItemERPCode);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(IS_BOM_FIELD_DESC);
        oprot.writeBool(struct.isBom);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getLocationListByItemErpCode_argsTupleSchemeFactory implements SchemeFactory {
      public getLocationListByItemErpCode_argsTupleScheme getScheme() {
        return new getLocationListByItemErpCode_argsTupleScheme();
      }
    }

    private static class getLocationListByItemErpCode_argsTupleScheme extends TupleScheme<getLocationListByItemErpCode_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getLocationListByItemErpCode_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetItemERPCode()) {
          optionals.set(0);
        }
        if (struct.isSetIsBom()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetItemERPCode()) {
          oprot.writeString(struct.ItemERPCode);
        }
        if (struct.isSetIsBom()) {
          oprot.writeBool(struct.isBom);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getLocationListByItemErpCode_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.ItemERPCode = iprot.readString();
          struct.setItemERPCodeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.isBom = iprot.readBool();
          struct.setIsBomIsSet(true);
        }
      }
    }

  }

  public static class getLocationListByItemErpCode_result implements org.apache.thrift.TBase<getLocationListByItemErpCode_result, getLocationListByItemErpCode_result._Fields>, java.io.Serializable, Cloneable, Comparable<getLocationListByItemErpCode_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getLocationListByItemErpCode_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getLocationListByItemErpCode_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getLocationListByItemErpCode_resultTupleSchemeFactory());
    }

    public List<rfid.service.LocationInfo> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, rfid.service.LocationInfo.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getLocationListByItemErpCode_result.class, metaDataMap);
    }

    public getLocationListByItemErpCode_result() {
    }

    public getLocationListByItemErpCode_result(
      List<rfid.service.LocationInfo> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getLocationListByItemErpCode_result(getLocationListByItemErpCode_result other) {
      if (other.isSetSuccess()) {
        List<rfid.service.LocationInfo> __this__success = new ArrayList<rfid.service.LocationInfo>(other.success.size());
        for (rfid.service.LocationInfo other_element : other.success) {
          __this__success.add(new rfid.service.LocationInfo(other_element));
        }
        this.success = __this__success;
      }
    }

    public getLocationListByItemErpCode_result deepCopy() {
      return new getLocationListByItemErpCode_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<rfid.service.LocationInfo> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(rfid.service.LocationInfo elem) {
      if (this.success == null) {
        this.success = new ArrayList<rfid.service.LocationInfo>();
      }
      this.success.add(elem);
    }

    public List<rfid.service.LocationInfo> getSuccess() {
      return this.success;
    }

    public getLocationListByItemErpCode_result setSuccess(List<rfid.service.LocationInfo> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<rfid.service.LocationInfo>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getLocationListByItemErpCode_result)
        return this.equals((getLocationListByItemErpCode_result)that);
      return false;
    }

    public boolean equals(getLocationListByItemErpCode_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getLocationListByItemErpCode_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getLocationListByItemErpCode_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getLocationListByItemErpCode_resultStandardSchemeFactory implements SchemeFactory {
      public getLocationListByItemErpCode_resultStandardScheme getScheme() {
        return new getLocationListByItemErpCode_resultStandardScheme();
      }
    }

    private static class getLocationListByItemErpCode_resultStandardScheme extends StandardScheme<getLocationListByItemErpCode_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getLocationListByItemErpCode_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list58 = iprot.readListBegin();
                  struct.success = new ArrayList<rfid.service.LocationInfo>(_list58.size);
                  rfid.service.LocationInfo _elem59;
                  for (int _i60 = 0; _i60 < _list58.size; ++_i60)
                  {
                    _elem59 = new rfid.service.LocationInfo();
                    _elem59.read(iprot);
                    struct.success.add(_elem59);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getLocationListByItemErpCode_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (rfid.service.LocationInfo _iter61 : struct.success)
            {
              _iter61.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getLocationListByItemErpCode_resultTupleSchemeFactory implements SchemeFactory {
      public getLocationListByItemErpCode_resultTupleScheme getScheme() {
        return new getLocationListByItemErpCode_resultTupleScheme();
      }
    }

    private static class getLocationListByItemErpCode_resultTupleScheme extends TupleScheme<getLocationListByItemErpCode_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getLocationListByItemErpCode_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (rfid.service.LocationInfo _iter62 : struct.success)
            {
              _iter62.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getLocationListByItemErpCode_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list63 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<rfid.service.LocationInfo>(_list63.size);
            rfid.service.LocationInfo _elem64;
            for (int _i65 = 0; _i65 < _list63.size; ++_i65)
            {
              _elem64 = new rfid.service.LocationInfo();
              _elem64.read(iprot);
              struct.success.add(_elem64);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getGoodsByLocation_args implements org.apache.thrift.TBase<getGoodsByLocation_args, getGoodsByLocation_args._Fields>, java.io.Serializable, Cloneable, Comparable<getGoodsByLocation_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getGoodsByLocation_args");

    private static final org.apache.thrift.protocol.TField LOCATION_FIELD_DESC = new org.apache.thrift.protocol.TField("Location", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getGoodsByLocation_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getGoodsByLocation_argsTupleSchemeFactory());
    }

    public int Location; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LOCATION((short)1, "Location");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LOCATION
            return LOCATION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __LOCATION_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LOCATION, new org.apache.thrift.meta_data.FieldMetaData("Location", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getGoodsByLocation_args.class, metaDataMap);
    }

    public getGoodsByLocation_args() {
    }

    public getGoodsByLocation_args(
      int Location)
    {
      this();
      this.Location = Location;
      setLocationIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getGoodsByLocation_args(getGoodsByLocation_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.Location = other.Location;
    }

    public getGoodsByLocation_args deepCopy() {
      return new getGoodsByLocation_args(this);
    }

    @Override
    public void clear() {
      setLocationIsSet(false);
      this.Location = 0;
    }

    public int getLocation() {
      return this.Location;
    }

    public getGoodsByLocation_args setLocation(int Location) {
      this.Location = Location;
      setLocationIsSet(true);
      return this;
    }

    public void unsetLocation() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOCATION_ISSET_ID);
    }

    /** Returns true if field Location is set (has been assigned a value) and false otherwise */
    public boolean isSetLocation() {
      return EncodingUtils.testBit(__isset_bitfield, __LOCATION_ISSET_ID);
    }

    public void setLocationIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOCATION_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LOCATION:
        if (value == null) {
          unsetLocation();
        } else {
          setLocation((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LOCATION:
        return getLocation();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LOCATION:
        return isSetLocation();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getGoodsByLocation_args)
        return this.equals((getGoodsByLocation_args)that);
      return false;
    }

    public boolean equals(getGoodsByLocation_args that) {
      if (that == null)
        return false;

      boolean this_present_Location = true;
      boolean that_present_Location = true;
      if (this_present_Location || that_present_Location) {
        if (!(this_present_Location && that_present_Location))
          return false;
        if (this.Location != that.Location)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_Location = true;
      list.add(present_Location);
      if (present_Location)
        list.add(Location);

      return list.hashCode();
    }

    @Override
    public int compareTo(getGoodsByLocation_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetLocation()).compareTo(other.isSetLocation());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLocation()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Location, other.Location);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getGoodsByLocation_args(");
      boolean first = true;

      sb.append("Location:");
      sb.append(this.Location);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getGoodsByLocation_argsStandardSchemeFactory implements SchemeFactory {
      public getGoodsByLocation_argsStandardScheme getScheme() {
        return new getGoodsByLocation_argsStandardScheme();
      }
    }

    private static class getGoodsByLocation_argsStandardScheme extends StandardScheme<getGoodsByLocation_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getGoodsByLocation_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LOCATION
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.Location = iprot.readI32();
                struct.setLocationIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getGoodsByLocation_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(LOCATION_FIELD_DESC);
        oprot.writeI32(struct.Location);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getGoodsByLocation_argsTupleSchemeFactory implements SchemeFactory {
      public getGoodsByLocation_argsTupleScheme getScheme() {
        return new getGoodsByLocation_argsTupleScheme();
      }
    }

    private static class getGoodsByLocation_argsTupleScheme extends TupleScheme<getGoodsByLocation_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getGoodsByLocation_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetLocation()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetLocation()) {
          oprot.writeI32(struct.Location);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getGoodsByLocation_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.Location = iprot.readI32();
          struct.setLocationIsSet(true);
        }
      }
    }

  }

  public static class getGoodsByLocation_result implements org.apache.thrift.TBase<getGoodsByLocation_result, getGoodsByLocation_result._Fields>, java.io.Serializable, Cloneable, Comparable<getGoodsByLocation_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getGoodsByLocation_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getGoodsByLocation_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getGoodsByLocation_resultTupleSchemeFactory());
    }

    public List<rfid.service.Good> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, rfid.service.Good.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getGoodsByLocation_result.class, metaDataMap);
    }

    public getGoodsByLocation_result() {
    }

    public getGoodsByLocation_result(
      List<rfid.service.Good> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getGoodsByLocation_result(getGoodsByLocation_result other) {
      if (other.isSetSuccess()) {
        List<rfid.service.Good> __this__success = new ArrayList<rfid.service.Good>(other.success.size());
        for (rfid.service.Good other_element : other.success) {
          __this__success.add(new rfid.service.Good(other_element));
        }
        this.success = __this__success;
      }
    }

    public getGoodsByLocation_result deepCopy() {
      return new getGoodsByLocation_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<rfid.service.Good> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(rfid.service.Good elem) {
      if (this.success == null) {
        this.success = new ArrayList<rfid.service.Good>();
      }
      this.success.add(elem);
    }

    public List<rfid.service.Good> getSuccess() {
      return this.success;
    }

    public getGoodsByLocation_result setSuccess(List<rfid.service.Good> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<rfid.service.Good>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getGoodsByLocation_result)
        return this.equals((getGoodsByLocation_result)that);
      return false;
    }

    public boolean equals(getGoodsByLocation_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getGoodsByLocation_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getGoodsByLocation_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getGoodsByLocation_resultStandardSchemeFactory implements SchemeFactory {
      public getGoodsByLocation_resultStandardScheme getScheme() {
        return new getGoodsByLocation_resultStandardScheme();
      }
    }

    private static class getGoodsByLocation_resultStandardScheme extends StandardScheme<getGoodsByLocation_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getGoodsByLocation_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list66 = iprot.readListBegin();
                  struct.success = new ArrayList<rfid.service.Good>(_list66.size);
                  rfid.service.Good _elem67;
                  for (int _i68 = 0; _i68 < _list66.size; ++_i68)
                  {
                    _elem67 = new rfid.service.Good();
                    _elem67.read(iprot);
                    struct.success.add(_elem67);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getGoodsByLocation_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (rfid.service.Good _iter69 : struct.success)
            {
              _iter69.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getGoodsByLocation_resultTupleSchemeFactory implements SchemeFactory {
      public getGoodsByLocation_resultTupleScheme getScheme() {
        return new getGoodsByLocation_resultTupleScheme();
      }
    }

    private static class getGoodsByLocation_resultTupleScheme extends TupleScheme<getGoodsByLocation_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getGoodsByLocation_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (rfid.service.Good _iter70 : struct.success)
            {
              _iter70.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getGoodsByLocation_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list71 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<rfid.service.Good>(_list71.size);
            rfid.service.Good _elem72;
            for (int _i73 = 0; _i73 < _list71.size; ++_i73)
            {
              _elem72 = new rfid.service.Good();
              _elem72.read(iprot);
              struct.success.add(_elem72);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getApplyDocCodeByCNum_args implements org.apache.thrift.TBase<getApplyDocCodeByCNum_args, getApplyDocCodeByCNum_args._Fields>, java.io.Serializable, Cloneable, Comparable<getApplyDocCodeByCNum_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getApplyDocCodeByCNum_args");

    private static final org.apache.thrift.protocol.TField CNUM_FIELD_DESC = new org.apache.thrift.protocol.TField("CNum", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getApplyDocCodeByCNum_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getApplyDocCodeByCNum_argsTupleSchemeFactory());
    }

    public String CNum; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CNUM((short)1, "CNum");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CNUM
            return CNUM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CNUM, new org.apache.thrift.meta_data.FieldMetaData("CNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getApplyDocCodeByCNum_args.class, metaDataMap);
    }

    public getApplyDocCodeByCNum_args() {
    }

    public getApplyDocCodeByCNum_args(
      String CNum)
    {
      this();
      this.CNum = CNum;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getApplyDocCodeByCNum_args(getApplyDocCodeByCNum_args other) {
      if (other.isSetCNum()) {
        this.CNum = other.CNum;
      }
    }

    public getApplyDocCodeByCNum_args deepCopy() {
      return new getApplyDocCodeByCNum_args(this);
    }

    @Override
    public void clear() {
      this.CNum = null;
    }

    public String getCNum() {
      return this.CNum;
    }

    public getApplyDocCodeByCNum_args setCNum(String CNum) {
      this.CNum = CNum;
      return this;
    }

    public void unsetCNum() {
      this.CNum = null;
    }

    /** Returns true if field CNum is set (has been assigned a value) and false otherwise */
    public boolean isSetCNum() {
      return this.CNum != null;
    }

    public void setCNumIsSet(boolean value) {
      if (!value) {
        this.CNum = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CNUM:
        if (value == null) {
          unsetCNum();
        } else {
          setCNum((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CNUM:
        return getCNum();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CNUM:
        return isSetCNum();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getApplyDocCodeByCNum_args)
        return this.equals((getApplyDocCodeByCNum_args)that);
      return false;
    }

    public boolean equals(getApplyDocCodeByCNum_args that) {
      if (that == null)
        return false;

      boolean this_present_CNum = true && this.isSetCNum();
      boolean that_present_CNum = true && that.isSetCNum();
      if (this_present_CNum || that_present_CNum) {
        if (!(this_present_CNum && that_present_CNum))
          return false;
        if (!this.CNum.equals(that.CNum))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_CNum = true && (isSetCNum());
      list.add(present_CNum);
      if (present_CNum)
        list.add(CNum);

      return list.hashCode();
    }

    @Override
    public int compareTo(getApplyDocCodeByCNum_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCNum()).compareTo(other.isSetCNum());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCNum()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.CNum, other.CNum);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getApplyDocCodeByCNum_args(");
      boolean first = true;

      sb.append("CNum:");
      if (this.CNum == null) {
        sb.append("null");
      } else {
        sb.append(this.CNum);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getApplyDocCodeByCNum_argsStandardSchemeFactory implements SchemeFactory {
      public getApplyDocCodeByCNum_argsStandardScheme getScheme() {
        return new getApplyDocCodeByCNum_argsStandardScheme();
      }
    }

    private static class getApplyDocCodeByCNum_argsStandardScheme extends StandardScheme<getApplyDocCodeByCNum_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getApplyDocCodeByCNum_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CNUM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.CNum = iprot.readString();
                struct.setCNumIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getApplyDocCodeByCNum_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.CNum != null) {
          oprot.writeFieldBegin(CNUM_FIELD_DESC);
          oprot.writeString(struct.CNum);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getApplyDocCodeByCNum_argsTupleSchemeFactory implements SchemeFactory {
      public getApplyDocCodeByCNum_argsTupleScheme getScheme() {
        return new getApplyDocCodeByCNum_argsTupleScheme();
      }
    }

    private static class getApplyDocCodeByCNum_argsTupleScheme extends TupleScheme<getApplyDocCodeByCNum_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getApplyDocCodeByCNum_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCNum()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCNum()) {
          oprot.writeString(struct.CNum);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getApplyDocCodeByCNum_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.CNum = iprot.readString();
          struct.setCNumIsSet(true);
        }
      }
    }

  }

  public static class getApplyDocCodeByCNum_result implements org.apache.thrift.TBase<getApplyDocCodeByCNum_result, getApplyDocCodeByCNum_result._Fields>, java.io.Serializable, Cloneable, Comparable<getApplyDocCodeByCNum_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getApplyDocCodeByCNum_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getApplyDocCodeByCNum_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getApplyDocCodeByCNum_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getApplyDocCodeByCNum_result.class, metaDataMap);
    }

    public getApplyDocCodeByCNum_result() {
    }

    public getApplyDocCodeByCNum_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getApplyDocCodeByCNum_result(getApplyDocCodeByCNum_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public getApplyDocCodeByCNum_result deepCopy() {
      return new getApplyDocCodeByCNum_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public getApplyDocCodeByCNum_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getApplyDocCodeByCNum_result)
        return this.equals((getApplyDocCodeByCNum_result)that);
      return false;
    }

    public boolean equals(getApplyDocCodeByCNum_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getApplyDocCodeByCNum_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getApplyDocCodeByCNum_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getApplyDocCodeByCNum_resultStandardSchemeFactory implements SchemeFactory {
      public getApplyDocCodeByCNum_resultStandardScheme getScheme() {
        return new getApplyDocCodeByCNum_resultStandardScheme();
      }
    }

    private static class getApplyDocCodeByCNum_resultStandardScheme extends StandardScheme<getApplyDocCodeByCNum_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getApplyDocCodeByCNum_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getApplyDocCodeByCNum_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getApplyDocCodeByCNum_resultTupleSchemeFactory implements SchemeFactory {
      public getApplyDocCodeByCNum_resultTupleScheme getScheme() {
        return new getApplyDocCodeByCNum_resultTupleScheme();
      }
    }

    private static class getApplyDocCodeByCNum_resultTupleScheme extends TupleScheme<getApplyDocCodeByCNum_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getApplyDocCodeByCNum_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getApplyDocCodeByCNum_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class confirmInventory_args implements org.apache.thrift.TBase<confirmInventory_args, confirmInventory_args._Fields>, java.io.Serializable, Cloneable, Comparable<confirmInventory_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("confirmInventory_args");

    private static final org.apache.thrift.protocol.TField CHECKS_FIELD_DESC = new org.apache.thrift.protocol.TField("checks", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new confirmInventory_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new confirmInventory_argsTupleSchemeFactory());
    }

    public List<rfid.service.check> checks; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CHECKS((short)1, "checks");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CHECKS
            return CHECKS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CHECKS, new org.apache.thrift.meta_data.FieldMetaData("checks", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, rfid.service.check.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(confirmInventory_args.class, metaDataMap);
    }

    public confirmInventory_args() {
    }

    public confirmInventory_args(
      List<rfid.service.check> checks)
    {
      this();
      this.checks = checks;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public confirmInventory_args(confirmInventory_args other) {
      if (other.isSetChecks()) {
        List<rfid.service.check> __this__checks = new ArrayList<rfid.service.check>(other.checks.size());
        for (rfid.service.check other_element : other.checks) {
          __this__checks.add(new rfid.service.check(other_element));
        }
        this.checks = __this__checks;
      }
    }

    public confirmInventory_args deepCopy() {
      return new confirmInventory_args(this);
    }

    @Override
    public void clear() {
      this.checks = null;
    }

    public int getChecksSize() {
      return (this.checks == null) ? 0 : this.checks.size();
    }

    public java.util.Iterator<rfid.service.check> getChecksIterator() {
      return (this.checks == null) ? null : this.checks.iterator();
    }

    public void addToChecks(rfid.service.check elem) {
      if (this.checks == null) {
        this.checks = new ArrayList<rfid.service.check>();
      }
      this.checks.add(elem);
    }

    public List<rfid.service.check> getChecks() {
      return this.checks;
    }

    public confirmInventory_args setChecks(List<rfid.service.check> checks) {
      this.checks = checks;
      return this;
    }

    public void unsetChecks() {
      this.checks = null;
    }

    /** Returns true if field checks is set (has been assigned a value) and false otherwise */
    public boolean isSetChecks() {
      return this.checks != null;
    }

    public void setChecksIsSet(boolean value) {
      if (!value) {
        this.checks = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CHECKS:
        if (value == null) {
          unsetChecks();
        } else {
          setChecks((List<rfid.service.check>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CHECKS:
        return getChecks();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CHECKS:
        return isSetChecks();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof confirmInventory_args)
        return this.equals((confirmInventory_args)that);
      return false;
    }

    public boolean equals(confirmInventory_args that) {
      if (that == null)
        return false;

      boolean this_present_checks = true && this.isSetChecks();
      boolean that_present_checks = true && that.isSetChecks();
      if (this_present_checks || that_present_checks) {
        if (!(this_present_checks && that_present_checks))
          return false;
        if (!this.checks.equals(that.checks))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_checks = true && (isSetChecks());
      list.add(present_checks);
      if (present_checks)
        list.add(checks);

      return list.hashCode();
    }

    @Override
    public int compareTo(confirmInventory_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetChecks()).compareTo(other.isSetChecks());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetChecks()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.checks, other.checks);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("confirmInventory_args(");
      boolean first = true;

      sb.append("checks:");
      if (this.checks == null) {
        sb.append("null");
      } else {
        sb.append(this.checks);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class confirmInventory_argsStandardSchemeFactory implements SchemeFactory {
      public confirmInventory_argsStandardScheme getScheme() {
        return new confirmInventory_argsStandardScheme();
      }
    }

    private static class confirmInventory_argsStandardScheme extends StandardScheme<confirmInventory_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, confirmInventory_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CHECKS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list74 = iprot.readListBegin();
                  struct.checks = new ArrayList<rfid.service.check>(_list74.size);
                  rfid.service.check _elem75;
                  for (int _i76 = 0; _i76 < _list74.size; ++_i76)
                  {
                    _elem75 = new rfid.service.check();
                    _elem75.read(iprot);
                    struct.checks.add(_elem75);
                  }
                  iprot.readListEnd();
                }
                struct.setChecksIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, confirmInventory_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.checks != null) {
          oprot.writeFieldBegin(CHECKS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.checks.size()));
            for (rfid.service.check _iter77 : struct.checks)
            {
              _iter77.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class confirmInventory_argsTupleSchemeFactory implements SchemeFactory {
      public confirmInventory_argsTupleScheme getScheme() {
        return new confirmInventory_argsTupleScheme();
      }
    }

    private static class confirmInventory_argsTupleScheme extends TupleScheme<confirmInventory_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, confirmInventory_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetChecks()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetChecks()) {
          {
            oprot.writeI32(struct.checks.size());
            for (rfid.service.check _iter78 : struct.checks)
            {
              _iter78.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, confirmInventory_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list79 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.checks = new ArrayList<rfid.service.check>(_list79.size);
            rfid.service.check _elem80;
            for (int _i81 = 0; _i81 < _list79.size; ++_i81)
            {
              _elem80 = new rfid.service.check();
              _elem80.read(iprot);
              struct.checks.add(_elem80);
            }
          }
          struct.setChecksIsSet(true);
        }
      }
    }

  }

  public static class confirmInventory_result implements org.apache.thrift.TBase<confirmInventory_result, confirmInventory_result._Fields>, java.io.Serializable, Cloneable, Comparable<confirmInventory_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("confirmInventory_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new confirmInventory_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new confirmInventory_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(confirmInventory_result.class, metaDataMap);
    }

    public confirmInventory_result() {
    }

    public confirmInventory_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public confirmInventory_result(confirmInventory_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public confirmInventory_result deepCopy() {
      return new confirmInventory_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public confirmInventory_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof confirmInventory_result)
        return this.equals((confirmInventory_result)that);
      return false;
    }

    public boolean equals(confirmInventory_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(confirmInventory_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("confirmInventory_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class confirmInventory_resultStandardSchemeFactory implements SchemeFactory {
      public confirmInventory_resultStandardScheme getScheme() {
        return new confirmInventory_resultStandardScheme();
      }
    }

    private static class confirmInventory_resultStandardScheme extends StandardScheme<confirmInventory_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, confirmInventory_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, confirmInventory_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class confirmInventory_resultTupleSchemeFactory implements SchemeFactory {
      public confirmInventory_resultTupleScheme getScheme() {
        return new confirmInventory_resultTupleScheme();
      }
    }

    private static class confirmInventory_resultTupleScheme extends TupleScheme<confirmInventory_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, confirmInventory_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, confirmInventory_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class confirmArrive_args implements org.apache.thrift.TBase<confirmArrive_args, confirmArrive_args._Fields>, java.io.Serializable, Cloneable, Comparable<confirmArrive_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("confirmArrive_args");

    private static final org.apache.thrift.protocol.TField CHARGE_FIELD_DESC = new org.apache.thrift.protocol.TField("charge", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("Time", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField POSITION_FIELD_DESC = new org.apache.thrift.protocol.TField("Position", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("Type", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField POS_APPLY_DOC_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("PosApplyDocCode", org.apache.thrift.protocol.TType.STRING, (short)5);
    private static final org.apache.thrift.protocol.TField LONGITUDE_FIELD_DESC = new org.apache.thrift.protocol.TField("longitude", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
    private static final org.apache.thrift.protocol.TField LATITUDE_FIELD_DESC = new org.apache.thrift.protocol.TField("latitude", org.apache.thrift.protocol.TType.DOUBLE, (short)7);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new confirmArrive_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new confirmArrive_argsTupleSchemeFactory());
    }

    public String charge; // required
    public String Time; // required
    public String Position; // required
    public String Type; // required
    public String PosApplyDocCode; // required
    public double longitude; // required
    public double latitude; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CHARGE((short)1, "charge"),
      TIME((short)2, "Time"),
      POSITION((short)3, "Position"),
      TYPE((short)4, "Type"),
      POS_APPLY_DOC_CODE((short)5, "PosApplyDocCode"),
      LONGITUDE((short)6, "longitude"),
      LATITUDE((short)7, "latitude");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CHARGE
            return CHARGE;
          case 2: // TIME
            return TIME;
          case 3: // POSITION
            return POSITION;
          case 4: // TYPE
            return TYPE;
          case 5: // POS_APPLY_DOC_CODE
            return POS_APPLY_DOC_CODE;
          case 6: // LONGITUDE
            return LONGITUDE;
          case 7: // LATITUDE
            return LATITUDE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __LONGITUDE_ISSET_ID = 0;
    private static final int __LATITUDE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CHARGE, new org.apache.thrift.meta_data.FieldMetaData("charge", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TIME, new org.apache.thrift.meta_data.FieldMetaData("Time", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.POSITION, new org.apache.thrift.meta_data.FieldMetaData("Position", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("Type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.POS_APPLY_DOC_CODE, new org.apache.thrift.meta_data.FieldMetaData("PosApplyDocCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.LONGITUDE, new org.apache.thrift.meta_data.FieldMetaData("longitude", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      tmpMap.put(_Fields.LATITUDE, new org.apache.thrift.meta_data.FieldMetaData("latitude", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(confirmArrive_args.class, metaDataMap);
    }

    public confirmArrive_args() {
    }

    public confirmArrive_args(
      String charge,
      String Time,
      String Position,
      String Type,
      String PosApplyDocCode,
      double longitude,
      double latitude)
    {
      this();
      this.charge = charge;
      this.Time = Time;
      this.Position = Position;
      this.Type = Type;
      this.PosApplyDocCode = PosApplyDocCode;
      this.longitude = longitude;
      setLongitudeIsSet(true);
      this.latitude = latitude;
      setLatitudeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public confirmArrive_args(confirmArrive_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetCharge()) {
        this.charge = other.charge;
      }
      if (other.isSetTime()) {
        this.Time = other.Time;
      }
      if (other.isSetPosition()) {
        this.Position = other.Position;
      }
      if (other.isSetType()) {
        this.Type = other.Type;
      }
      if (other.isSetPosApplyDocCode()) {
        this.PosApplyDocCode = other.PosApplyDocCode;
      }
      this.longitude = other.longitude;
      this.latitude = other.latitude;
    }

    public confirmArrive_args deepCopy() {
      return new confirmArrive_args(this);
    }

    @Override
    public void clear() {
      this.charge = null;
      this.Time = null;
      this.Position = null;
      this.Type = null;
      this.PosApplyDocCode = null;
      setLongitudeIsSet(false);
      this.longitude = 0.0;
      setLatitudeIsSet(false);
      this.latitude = 0.0;
    }

    public String getCharge() {
      return this.charge;
    }

    public confirmArrive_args setCharge(String charge) {
      this.charge = charge;
      return this;
    }

    public void unsetCharge() {
      this.charge = null;
    }

    /** Returns true if field charge is set (has been assigned a value) and false otherwise */
    public boolean isSetCharge() {
      return this.charge != null;
    }

    public void setChargeIsSet(boolean value) {
      if (!value) {
        this.charge = null;
      }
    }

    public String getTime() {
      return this.Time;
    }

    public confirmArrive_args setTime(String Time) {
      this.Time = Time;
      return this;
    }

    public void unsetTime() {
      this.Time = null;
    }

    /** Returns true if field Time is set (has been assigned a value) and false otherwise */
    public boolean isSetTime() {
      return this.Time != null;
    }

    public void setTimeIsSet(boolean value) {
      if (!value) {
        this.Time = null;
      }
    }

    public String getPosition() {
      return this.Position;
    }

    public confirmArrive_args setPosition(String Position) {
      this.Position = Position;
      return this;
    }

    public void unsetPosition() {
      this.Position = null;
    }

    /** Returns true if field Position is set (has been assigned a value) and false otherwise */
    public boolean isSetPosition() {
      return this.Position != null;
    }

    public void setPositionIsSet(boolean value) {
      if (!value) {
        this.Position = null;
      }
    }

    public String getType() {
      return this.Type;
    }

    public confirmArrive_args setType(String Type) {
      this.Type = Type;
      return this;
    }

    public void unsetType() {
      this.Type = null;
    }

    /** Returns true if field Type is set (has been assigned a value) and false otherwise */
    public boolean isSetType() {
      return this.Type != null;
    }

    public void setTypeIsSet(boolean value) {
      if (!value) {
        this.Type = null;
      }
    }

    public String getPosApplyDocCode() {
      return this.PosApplyDocCode;
    }

    public confirmArrive_args setPosApplyDocCode(String PosApplyDocCode) {
      this.PosApplyDocCode = PosApplyDocCode;
      return this;
    }

    public void unsetPosApplyDocCode() {
      this.PosApplyDocCode = null;
    }

    /** Returns true if field PosApplyDocCode is set (has been assigned a value) and false otherwise */
    public boolean isSetPosApplyDocCode() {
      return this.PosApplyDocCode != null;
    }

    public void setPosApplyDocCodeIsSet(boolean value) {
      if (!value) {
        this.PosApplyDocCode = null;
      }
    }

    public double getLongitude() {
      return this.longitude;
    }

    public confirmArrive_args setLongitude(double longitude) {
      this.longitude = longitude;
      setLongitudeIsSet(true);
      return this;
    }

    public void unsetLongitude() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LONGITUDE_ISSET_ID);
    }

    /** Returns true if field longitude is set (has been assigned a value) and false otherwise */
    public boolean isSetLongitude() {
      return EncodingUtils.testBit(__isset_bitfield, __LONGITUDE_ISSET_ID);
    }

    public void setLongitudeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LONGITUDE_ISSET_ID, value);
    }

    public double getLatitude() {
      return this.latitude;
    }

    public confirmArrive_args setLatitude(double latitude) {
      this.latitude = latitude;
      setLatitudeIsSet(true);
      return this;
    }

    public void unsetLatitude() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LATITUDE_ISSET_ID);
    }

    /** Returns true if field latitude is set (has been assigned a value) and false otherwise */
    public boolean isSetLatitude() {
      return EncodingUtils.testBit(__isset_bitfield, __LATITUDE_ISSET_ID);
    }

    public void setLatitudeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LATITUDE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CHARGE:
        if (value == null) {
          unsetCharge();
        } else {
          setCharge((String)value);
        }
        break;

      case TIME:
        if (value == null) {
          unsetTime();
        } else {
          setTime((String)value);
        }
        break;

      case POSITION:
        if (value == null) {
          unsetPosition();
        } else {
          setPosition((String)value);
        }
        break;

      case TYPE:
        if (value == null) {
          unsetType();
        } else {
          setType((String)value);
        }
        break;

      case POS_APPLY_DOC_CODE:
        if (value == null) {
          unsetPosApplyDocCode();
        } else {
          setPosApplyDocCode((String)value);
        }
        break;

      case LONGITUDE:
        if (value == null) {
          unsetLongitude();
        } else {
          setLongitude((Double)value);
        }
        break;

      case LATITUDE:
        if (value == null) {
          unsetLatitude();
        } else {
          setLatitude((Double)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CHARGE:
        return getCharge();

      case TIME:
        return getTime();

      case POSITION:
        return getPosition();

      case TYPE:
        return getType();

      case POS_APPLY_DOC_CODE:
        return getPosApplyDocCode();

      case LONGITUDE:
        return getLongitude();

      case LATITUDE:
        return getLatitude();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CHARGE:
        return isSetCharge();
      case TIME:
        return isSetTime();
      case POSITION:
        return isSetPosition();
      case TYPE:
        return isSetType();
      case POS_APPLY_DOC_CODE:
        return isSetPosApplyDocCode();
      case LONGITUDE:
        return isSetLongitude();
      case LATITUDE:
        return isSetLatitude();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof confirmArrive_args)
        return this.equals((confirmArrive_args)that);
      return false;
    }

    public boolean equals(confirmArrive_args that) {
      if (that == null)
        return false;

      boolean this_present_charge = true && this.isSetCharge();
      boolean that_present_charge = true && that.isSetCharge();
      if (this_present_charge || that_present_charge) {
        if (!(this_present_charge && that_present_charge))
          return false;
        if (!this.charge.equals(that.charge))
          return false;
      }

      boolean this_present_Time = true && this.isSetTime();
      boolean that_present_Time = true && that.isSetTime();
      if (this_present_Time || that_present_Time) {
        if (!(this_present_Time && that_present_Time))
          return false;
        if (!this.Time.equals(that.Time))
          return false;
      }

      boolean this_present_Position = true && this.isSetPosition();
      boolean that_present_Position = true && that.isSetPosition();
      if (this_present_Position || that_present_Position) {
        if (!(this_present_Position && that_present_Position))
          return false;
        if (!this.Position.equals(that.Position))
          return false;
      }

      boolean this_present_Type = true && this.isSetType();
      boolean that_present_Type = true && that.isSetType();
      if (this_present_Type || that_present_Type) {
        if (!(this_present_Type && that_present_Type))
          return false;
        if (!this.Type.equals(that.Type))
          return false;
      }

      boolean this_present_PosApplyDocCode = true && this.isSetPosApplyDocCode();
      boolean that_present_PosApplyDocCode = true && that.isSetPosApplyDocCode();
      if (this_present_PosApplyDocCode || that_present_PosApplyDocCode) {
        if (!(this_present_PosApplyDocCode && that_present_PosApplyDocCode))
          return false;
        if (!this.PosApplyDocCode.equals(that.PosApplyDocCode))
          return false;
      }

      boolean this_present_longitude = true;
      boolean that_present_longitude = true;
      if (this_present_longitude || that_present_longitude) {
        if (!(this_present_longitude && that_present_longitude))
          return false;
        if (this.longitude != that.longitude)
          return false;
      }

      boolean this_present_latitude = true;
      boolean that_present_latitude = true;
      if (this_present_latitude || that_present_latitude) {
        if (!(this_present_latitude && that_present_latitude))
          return false;
        if (this.latitude != that.latitude)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_charge = true && (isSetCharge());
      list.add(present_charge);
      if (present_charge)
        list.add(charge);

      boolean present_Time = true && (isSetTime());
      list.add(present_Time);
      if (present_Time)
        list.add(Time);

      boolean present_Position = true && (isSetPosition());
      list.add(present_Position);
      if (present_Position)
        list.add(Position);

      boolean present_Type = true && (isSetType());
      list.add(present_Type);
      if (present_Type)
        list.add(Type);

      boolean present_PosApplyDocCode = true && (isSetPosApplyDocCode());
      list.add(present_PosApplyDocCode);
      if (present_PosApplyDocCode)
        list.add(PosApplyDocCode);

      boolean present_longitude = true;
      list.add(present_longitude);
      if (present_longitude)
        list.add(longitude);

      boolean present_latitude = true;
      list.add(present_latitude);
      if (present_latitude)
        list.add(latitude);

      return list.hashCode();
    }

    @Override
    public int compareTo(confirmArrive_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCharge()).compareTo(other.isSetCharge());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCharge()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.charge, other.charge);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTime()).compareTo(other.isSetTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Time, other.Time);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPosition()).compareTo(other.isSetPosition());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPosition()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Position, other.Position);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Type, other.Type);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPosApplyDocCode()).compareTo(other.isSetPosApplyDocCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPosApplyDocCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.PosApplyDocCode, other.PosApplyDocCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLongitude()).compareTo(other.isSetLongitude());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLongitude()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.longitude, other.longitude);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLatitude()).compareTo(other.isSetLatitude());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLatitude()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.latitude, other.latitude);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("confirmArrive_args(");
      boolean first = true;

      sb.append("charge:");
      if (this.charge == null) {
        sb.append("null");
      } else {
        sb.append(this.charge);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("Time:");
      if (this.Time == null) {
        sb.append("null");
      } else {
        sb.append(this.Time);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("Position:");
      if (this.Position == null) {
        sb.append("null");
      } else {
        sb.append(this.Position);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("Type:");
      if (this.Type == null) {
        sb.append("null");
      } else {
        sb.append(this.Type);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("PosApplyDocCode:");
      if (this.PosApplyDocCode == null) {
        sb.append("null");
      } else {
        sb.append(this.PosApplyDocCode);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("longitude:");
      sb.append(this.longitude);
      first = false;
      if (!first) sb.append(", ");
      sb.append("latitude:");
      sb.append(this.latitude);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class confirmArrive_argsStandardSchemeFactory implements SchemeFactory {
      public confirmArrive_argsStandardScheme getScheme() {
        return new confirmArrive_argsStandardScheme();
      }
    }

    private static class confirmArrive_argsStandardScheme extends StandardScheme<confirmArrive_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, confirmArrive_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CHARGE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.charge = iprot.readString();
                struct.setChargeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.Time = iprot.readString();
                struct.setTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // POSITION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.Position = iprot.readString();
                struct.setPositionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.Type = iprot.readString();
                struct.setTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // POS_APPLY_DOC_CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.PosApplyDocCode = iprot.readString();
                struct.setPosApplyDocCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // LONGITUDE
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.longitude = iprot.readDouble();
                struct.setLongitudeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // LATITUDE
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.latitude = iprot.readDouble();
                struct.setLatitudeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, confirmArrive_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.charge != null) {
          oprot.writeFieldBegin(CHARGE_FIELD_DESC);
          oprot.writeString(struct.charge);
          oprot.writeFieldEnd();
        }
        if (struct.Time != null) {
          oprot.writeFieldBegin(TIME_FIELD_DESC);
          oprot.writeString(struct.Time);
          oprot.writeFieldEnd();
        }
        if (struct.Position != null) {
          oprot.writeFieldBegin(POSITION_FIELD_DESC);
          oprot.writeString(struct.Position);
          oprot.writeFieldEnd();
        }
        if (struct.Type != null) {
          oprot.writeFieldBegin(TYPE_FIELD_DESC);
          oprot.writeString(struct.Type);
          oprot.writeFieldEnd();
        }
        if (struct.PosApplyDocCode != null) {
          oprot.writeFieldBegin(POS_APPLY_DOC_CODE_FIELD_DESC);
          oprot.writeString(struct.PosApplyDocCode);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(LONGITUDE_FIELD_DESC);
        oprot.writeDouble(struct.longitude);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(LATITUDE_FIELD_DESC);
        oprot.writeDouble(struct.latitude);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class confirmArrive_argsTupleSchemeFactory implements SchemeFactory {
      public confirmArrive_argsTupleScheme getScheme() {
        return new confirmArrive_argsTupleScheme();
      }
    }

    private static class confirmArrive_argsTupleScheme extends TupleScheme<confirmArrive_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, confirmArrive_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCharge()) {
          optionals.set(0);
        }
        if (struct.isSetTime()) {
          optionals.set(1);
        }
        if (struct.isSetPosition()) {
          optionals.set(2);
        }
        if (struct.isSetType()) {
          optionals.set(3);
        }
        if (struct.isSetPosApplyDocCode()) {
          optionals.set(4);
        }
        if (struct.isSetLongitude()) {
          optionals.set(5);
        }
        if (struct.isSetLatitude()) {
          optionals.set(6);
        }
        oprot.writeBitSet(optionals, 7);
        if (struct.isSetCharge()) {
          oprot.writeString(struct.charge);
        }
        if (struct.isSetTime()) {
          oprot.writeString(struct.Time);
        }
        if (struct.isSetPosition()) {
          oprot.writeString(struct.Position);
        }
        if (struct.isSetType()) {
          oprot.writeString(struct.Type);
        }
        if (struct.isSetPosApplyDocCode()) {
          oprot.writeString(struct.PosApplyDocCode);
        }
        if (struct.isSetLongitude()) {
          oprot.writeDouble(struct.longitude);
        }
        if (struct.isSetLatitude()) {
          oprot.writeDouble(struct.latitude);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, confirmArrive_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(7);
        if (incoming.get(0)) {
          struct.charge = iprot.readString();
          struct.setChargeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.Time = iprot.readString();
          struct.setTimeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.Position = iprot.readString();
          struct.setPositionIsSet(true);
        }
        if (incoming.get(3)) {
          struct.Type = iprot.readString();
          struct.setTypeIsSet(true);
        }
        if (incoming.get(4)) {
          struct.PosApplyDocCode = iprot.readString();
          struct.setPosApplyDocCodeIsSet(true);
        }
        if (incoming.get(5)) {
          struct.longitude = iprot.readDouble();
          struct.setLongitudeIsSet(true);
        }
        if (incoming.get(6)) {
          struct.latitude = iprot.readDouble();
          struct.setLatitudeIsSet(true);
        }
      }
    }

  }

  public static class confirmArrive_result implements org.apache.thrift.TBase<confirmArrive_result, confirmArrive_result._Fields>, java.io.Serializable, Cloneable, Comparable<confirmArrive_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("confirmArrive_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new confirmArrive_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new confirmArrive_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(confirmArrive_result.class, metaDataMap);
    }

    public confirmArrive_result() {
    }

    public confirmArrive_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public confirmArrive_result(confirmArrive_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public confirmArrive_result deepCopy() {
      return new confirmArrive_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public confirmArrive_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof confirmArrive_result)
        return this.equals((confirmArrive_result)that);
      return false;
    }

    public boolean equals(confirmArrive_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(confirmArrive_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("confirmArrive_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class confirmArrive_resultStandardSchemeFactory implements SchemeFactory {
      public confirmArrive_resultStandardScheme getScheme() {
        return new confirmArrive_resultStandardScheme();
      }
    }

    private static class confirmArrive_resultStandardScheme extends StandardScheme<confirmArrive_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, confirmArrive_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, confirmArrive_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class confirmArrive_resultTupleSchemeFactory implements SchemeFactory {
      public confirmArrive_resultTupleScheme getScheme() {
        return new confirmArrive_resultTupleScheme();
      }
    }

    private static class confirmArrive_resultTupleScheme extends TupleScheme<confirmArrive_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, confirmArrive_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, confirmArrive_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class stagingSiteCheckout_args implements org.apache.thrift.TBase<stagingSiteCheckout_args, stagingSiteCheckout_args._Fields>, java.io.Serializable, Cloneable, Comparable<stagingSiteCheckout_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("stagingSiteCheckout_args");

    private static final org.apache.thrift.protocol.TField APPLY_PERSON_FIELD_DESC = new org.apache.thrift.protocol.TField("applyPerson", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField CONSTRUCT_POS_FIELD_DESC = new org.apache.thrift.protocol.TField("constructPos", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField CONSTRUCT_UNIT_FIELD_DESC = new org.apache.thrift.protocol.TField("constructUnit", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField MATERIAL_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("materialCode", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("num", org.apache.thrift.protocol.TType.I32, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new stagingSiteCheckout_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new stagingSiteCheckout_argsTupleSchemeFactory());
    }

    public String applyPerson; // required
    public String constructPos; // required
    public String constructUnit; // required
    public String materialCode; // required
    public int num; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      APPLY_PERSON((short)1, "applyPerson"),
      CONSTRUCT_POS((short)2, "constructPos"),
      CONSTRUCT_UNIT((short)3, "constructUnit"),
      MATERIAL_CODE((short)4, "materialCode"),
      NUM((short)5, "num");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // APPLY_PERSON
            return APPLY_PERSON;
          case 2: // CONSTRUCT_POS
            return CONSTRUCT_POS;
          case 3: // CONSTRUCT_UNIT
            return CONSTRUCT_UNIT;
          case 4: // MATERIAL_CODE
            return MATERIAL_CODE;
          case 5: // NUM
            return NUM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NUM_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.APPLY_PERSON, new org.apache.thrift.meta_data.FieldMetaData("applyPerson", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CONSTRUCT_POS, new org.apache.thrift.meta_data.FieldMetaData("constructPos", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CONSTRUCT_UNIT, new org.apache.thrift.meta_data.FieldMetaData("constructUnit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.MATERIAL_CODE, new org.apache.thrift.meta_data.FieldMetaData("materialCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.NUM, new org.apache.thrift.meta_data.FieldMetaData("num", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(stagingSiteCheckout_args.class, metaDataMap);
    }

    public stagingSiteCheckout_args() {
    }

    public stagingSiteCheckout_args(
      String applyPerson,
      String constructPos,
      String constructUnit,
      String materialCode,
      int num)
    {
      this();
      this.applyPerson = applyPerson;
      this.constructPos = constructPos;
      this.constructUnit = constructUnit;
      this.materialCode = materialCode;
      this.num = num;
      setNumIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public stagingSiteCheckout_args(stagingSiteCheckout_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetApplyPerson()) {
        this.applyPerson = other.applyPerson;
      }
      if (other.isSetConstructPos()) {
        this.constructPos = other.constructPos;
      }
      if (other.isSetConstructUnit()) {
        this.constructUnit = other.constructUnit;
      }
      if (other.isSetMaterialCode()) {
        this.materialCode = other.materialCode;
      }
      this.num = other.num;
    }

    public stagingSiteCheckout_args deepCopy() {
      return new stagingSiteCheckout_args(this);
    }

    @Override
    public void clear() {
      this.applyPerson = null;
      this.constructPos = null;
      this.constructUnit = null;
      this.materialCode = null;
      setNumIsSet(false);
      this.num = 0;
    }

    public String getApplyPerson() {
      return this.applyPerson;
    }

    public stagingSiteCheckout_args setApplyPerson(String applyPerson) {
      this.applyPerson = applyPerson;
      return this;
    }

    public void unsetApplyPerson() {
      this.applyPerson = null;
    }

    /** Returns true if field applyPerson is set (has been assigned a value) and false otherwise */
    public boolean isSetApplyPerson() {
      return this.applyPerson != null;
    }

    public void setApplyPersonIsSet(boolean value) {
      if (!value) {
        this.applyPerson = null;
      }
    }

    public String getConstructPos() {
      return this.constructPos;
    }

    public stagingSiteCheckout_args setConstructPos(String constructPos) {
      this.constructPos = constructPos;
      return this;
    }

    public void unsetConstructPos() {
      this.constructPos = null;
    }

    /** Returns true if field constructPos is set (has been assigned a value) and false otherwise */
    public boolean isSetConstructPos() {
      return this.constructPos != null;
    }

    public void setConstructPosIsSet(boolean value) {
      if (!value) {
        this.constructPos = null;
      }
    }

    public String getConstructUnit() {
      return this.constructUnit;
    }

    public stagingSiteCheckout_args setConstructUnit(String constructUnit) {
      this.constructUnit = constructUnit;
      return this;
    }

    public void unsetConstructUnit() {
      this.constructUnit = null;
    }

    /** Returns true if field constructUnit is set (has been assigned a value) and false otherwise */
    public boolean isSetConstructUnit() {
      return this.constructUnit != null;
    }

    public void setConstructUnitIsSet(boolean value) {
      if (!value) {
        this.constructUnit = null;
      }
    }

    public String getMaterialCode() {
      return this.materialCode;
    }

    public stagingSiteCheckout_args setMaterialCode(String materialCode) {
      this.materialCode = materialCode;
      return this;
    }

    public void unsetMaterialCode() {
      this.materialCode = null;
    }

    /** Returns true if field materialCode is set (has been assigned a value) and false otherwise */
    public boolean isSetMaterialCode() {
      return this.materialCode != null;
    }

    public void setMaterialCodeIsSet(boolean value) {
      if (!value) {
        this.materialCode = null;
      }
    }

    public int getNum() {
      return this.num;
    }

    public stagingSiteCheckout_args setNum(int num) {
      this.num = num;
      setNumIsSet(true);
      return this;
    }

    public void unsetNum() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUM_ISSET_ID);
    }

    /** Returns true if field num is set (has been assigned a value) and false otherwise */
    public boolean isSetNum() {
      return EncodingUtils.testBit(__isset_bitfield, __NUM_ISSET_ID);
    }

    public void setNumIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUM_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case APPLY_PERSON:
        if (value == null) {
          unsetApplyPerson();
        } else {
          setApplyPerson((String)value);
        }
        break;

      case CONSTRUCT_POS:
        if (value == null) {
          unsetConstructPos();
        } else {
          setConstructPos((String)value);
        }
        break;

      case CONSTRUCT_UNIT:
        if (value == null) {
          unsetConstructUnit();
        } else {
          setConstructUnit((String)value);
        }
        break;

      case MATERIAL_CODE:
        if (value == null) {
          unsetMaterialCode();
        } else {
          setMaterialCode((String)value);
        }
        break;

      case NUM:
        if (value == null) {
          unsetNum();
        } else {
          setNum((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case APPLY_PERSON:
        return getApplyPerson();

      case CONSTRUCT_POS:
        return getConstructPos();

      case CONSTRUCT_UNIT:
        return getConstructUnit();

      case MATERIAL_CODE:
        return getMaterialCode();

      case NUM:
        return getNum();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case APPLY_PERSON:
        return isSetApplyPerson();
      case CONSTRUCT_POS:
        return isSetConstructPos();
      case CONSTRUCT_UNIT:
        return isSetConstructUnit();
      case MATERIAL_CODE:
        return isSetMaterialCode();
      case NUM:
        return isSetNum();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof stagingSiteCheckout_args)
        return this.equals((stagingSiteCheckout_args)that);
      return false;
    }

    public boolean equals(stagingSiteCheckout_args that) {
      if (that == null)
        return false;

      boolean this_present_applyPerson = true && this.isSetApplyPerson();
      boolean that_present_applyPerson = true && that.isSetApplyPerson();
      if (this_present_applyPerson || that_present_applyPerson) {
        if (!(this_present_applyPerson && that_present_applyPerson))
          return false;
        if (!this.applyPerson.equals(that.applyPerson))
          return false;
      }

      boolean this_present_constructPos = true && this.isSetConstructPos();
      boolean that_present_constructPos = true && that.isSetConstructPos();
      if (this_present_constructPos || that_present_constructPos) {
        if (!(this_present_constructPos && that_present_constructPos))
          return false;
        if (!this.constructPos.equals(that.constructPos))
          return false;
      }

      boolean this_present_constructUnit = true && this.isSetConstructUnit();
      boolean that_present_constructUnit = true && that.isSetConstructUnit();
      if (this_present_constructUnit || that_present_constructUnit) {
        if (!(this_present_constructUnit && that_present_constructUnit))
          return false;
        if (!this.constructUnit.equals(that.constructUnit))
          return false;
      }

      boolean this_present_materialCode = true && this.isSetMaterialCode();
      boolean that_present_materialCode = true && that.isSetMaterialCode();
      if (this_present_materialCode || that_present_materialCode) {
        if (!(this_present_materialCode && that_present_materialCode))
          return false;
        if (!this.materialCode.equals(that.materialCode))
          return false;
      }

      boolean this_present_num = true;
      boolean that_present_num = true;
      if (this_present_num || that_present_num) {
        if (!(this_present_num && that_present_num))
          return false;
        if (this.num != that.num)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_applyPerson = true && (isSetApplyPerson());
      list.add(present_applyPerson);
      if (present_applyPerson)
        list.add(applyPerson);

      boolean present_constructPos = true && (isSetConstructPos());
      list.add(present_constructPos);
      if (present_constructPos)
        list.add(constructPos);

      boolean present_constructUnit = true && (isSetConstructUnit());
      list.add(present_constructUnit);
      if (present_constructUnit)
        list.add(constructUnit);

      boolean present_materialCode = true && (isSetMaterialCode());
      list.add(present_materialCode);
      if (present_materialCode)
        list.add(materialCode);

      boolean present_num = true;
      list.add(present_num);
      if (present_num)
        list.add(num);

      return list.hashCode();
    }

    @Override
    public int compareTo(stagingSiteCheckout_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetApplyPerson()).compareTo(other.isSetApplyPerson());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetApplyPerson()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applyPerson, other.applyPerson);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetConstructPos()).compareTo(other.isSetConstructPos());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConstructPos()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.constructPos, other.constructPos);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetConstructUnit()).compareTo(other.isSetConstructUnit());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConstructUnit()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.constructUnit, other.constructUnit);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMaterialCode()).compareTo(other.isSetMaterialCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMaterialCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.materialCode, other.materialCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNum()).compareTo(other.isSetNum());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNum()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num, other.num);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("stagingSiteCheckout_args(");
      boolean first = true;

      sb.append("applyPerson:");
      if (this.applyPerson == null) {
        sb.append("null");
      } else {
        sb.append(this.applyPerson);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("constructPos:");
      if (this.constructPos == null) {
        sb.append("null");
      } else {
        sb.append(this.constructPos);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("constructUnit:");
      if (this.constructUnit == null) {
        sb.append("null");
      } else {
        sb.append(this.constructUnit);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("materialCode:");
      if (this.materialCode == null) {
        sb.append("null");
      } else {
        sb.append(this.materialCode);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("num:");
      sb.append(this.num);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class stagingSiteCheckout_argsStandardSchemeFactory implements SchemeFactory {
      public stagingSiteCheckout_argsStandardScheme getScheme() {
        return new stagingSiteCheckout_argsStandardScheme();
      }
    }

    private static class stagingSiteCheckout_argsStandardScheme extends StandardScheme<stagingSiteCheckout_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, stagingSiteCheckout_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // APPLY_PERSON
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.applyPerson = iprot.readString();
                struct.setApplyPersonIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CONSTRUCT_POS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.constructPos = iprot.readString();
                struct.setConstructPosIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // CONSTRUCT_UNIT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.constructUnit = iprot.readString();
                struct.setConstructUnitIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // MATERIAL_CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.materialCode = iprot.readString();
                struct.setMaterialCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // NUM
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.num = iprot.readI32();
                struct.setNumIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, stagingSiteCheckout_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.applyPerson != null) {
          oprot.writeFieldBegin(APPLY_PERSON_FIELD_DESC);
          oprot.writeString(struct.applyPerson);
          oprot.writeFieldEnd();
        }
        if (struct.constructPos != null) {
          oprot.writeFieldBegin(CONSTRUCT_POS_FIELD_DESC);
          oprot.writeString(struct.constructPos);
          oprot.writeFieldEnd();
        }
        if (struct.constructUnit != null) {
          oprot.writeFieldBegin(CONSTRUCT_UNIT_FIELD_DESC);
          oprot.writeString(struct.constructUnit);
          oprot.writeFieldEnd();
        }
        if (struct.materialCode != null) {
          oprot.writeFieldBegin(MATERIAL_CODE_FIELD_DESC);
          oprot.writeString(struct.materialCode);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(NUM_FIELD_DESC);
        oprot.writeI32(struct.num);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class stagingSiteCheckout_argsTupleSchemeFactory implements SchemeFactory {
      public stagingSiteCheckout_argsTupleScheme getScheme() {
        return new stagingSiteCheckout_argsTupleScheme();
      }
    }

    private static class stagingSiteCheckout_argsTupleScheme extends TupleScheme<stagingSiteCheckout_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, stagingSiteCheckout_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetApplyPerson()) {
          optionals.set(0);
        }
        if (struct.isSetConstructPos()) {
          optionals.set(1);
        }
        if (struct.isSetConstructUnit()) {
          optionals.set(2);
        }
        if (struct.isSetMaterialCode()) {
          optionals.set(3);
        }
        if (struct.isSetNum()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetApplyPerson()) {
          oprot.writeString(struct.applyPerson);
        }
        if (struct.isSetConstructPos()) {
          oprot.writeString(struct.constructPos);
        }
        if (struct.isSetConstructUnit()) {
          oprot.writeString(struct.constructUnit);
        }
        if (struct.isSetMaterialCode()) {
          oprot.writeString(struct.materialCode);
        }
        if (struct.isSetNum()) {
          oprot.writeI32(struct.num);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, stagingSiteCheckout_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.applyPerson = iprot.readString();
          struct.setApplyPersonIsSet(true);
        }
        if (incoming.get(1)) {
          struct.constructPos = iprot.readString();
          struct.setConstructPosIsSet(true);
        }
        if (incoming.get(2)) {
          struct.constructUnit = iprot.readString();
          struct.setConstructUnitIsSet(true);
        }
        if (incoming.get(3)) {
          struct.materialCode = iprot.readString();
          struct.setMaterialCodeIsSet(true);
        }
        if (incoming.get(4)) {
          struct.num = iprot.readI32();
          struct.setNumIsSet(true);
        }
      }
    }

  }

  public static class stagingSiteCheckout_result implements org.apache.thrift.TBase<stagingSiteCheckout_result, stagingSiteCheckout_result._Fields>, java.io.Serializable, Cloneable, Comparable<stagingSiteCheckout_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("stagingSiteCheckout_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new stagingSiteCheckout_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new stagingSiteCheckout_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(stagingSiteCheckout_result.class, metaDataMap);
    }

    public stagingSiteCheckout_result() {
    }

    public stagingSiteCheckout_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public stagingSiteCheckout_result(stagingSiteCheckout_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public stagingSiteCheckout_result deepCopy() {
      return new stagingSiteCheckout_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public stagingSiteCheckout_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof stagingSiteCheckout_result)
        return this.equals((stagingSiteCheckout_result)that);
      return false;
    }

    public boolean equals(stagingSiteCheckout_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(stagingSiteCheckout_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("stagingSiteCheckout_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class stagingSiteCheckout_resultStandardSchemeFactory implements SchemeFactory {
      public stagingSiteCheckout_resultStandardScheme getScheme() {
        return new stagingSiteCheckout_resultStandardScheme();
      }
    }

    private static class stagingSiteCheckout_resultStandardScheme extends StandardScheme<stagingSiteCheckout_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, stagingSiteCheckout_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, stagingSiteCheckout_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class stagingSiteCheckout_resultTupleSchemeFactory implements SchemeFactory {
      public stagingSiteCheckout_resultTupleScheme getScheme() {
        return new stagingSiteCheckout_resultTupleScheme();
      }
    }

    private static class stagingSiteCheckout_resultTupleScheme extends TupleScheme<stagingSiteCheckout_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, stagingSiteCheckout_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, stagingSiteCheckout_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getTransportInfo_args implements org.apache.thrift.TBase<getTransportInfo_args, getTransportInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<getTransportInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTransportInfo_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTransportInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTransportInfo_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTransportInfo_args.class, metaDataMap);
    }

    public getTransportInfo_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTransportInfo_args(getTransportInfo_args other) {
    }

    public getTransportInfo_args deepCopy() {
      return new getTransportInfo_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTransportInfo_args)
        return this.equals((getTransportInfo_args)that);
      return false;
    }

    public boolean equals(getTransportInfo_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(getTransportInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTransportInfo_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTransportInfo_argsStandardSchemeFactory implements SchemeFactory {
      public getTransportInfo_argsStandardScheme getScheme() {
        return new getTransportInfo_argsStandardScheme();
      }
    }

    private static class getTransportInfo_argsStandardScheme extends StandardScheme<getTransportInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTransportInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTransportInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTransportInfo_argsTupleSchemeFactory implements SchemeFactory {
      public getTransportInfo_argsTupleScheme getScheme() {
        return new getTransportInfo_argsTupleScheme();
      }
    }

    private static class getTransportInfo_argsTupleScheme extends TupleScheme<getTransportInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTransportInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTransportInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getTransportInfo_result implements org.apache.thrift.TBase<getTransportInfo_result, getTransportInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<getTransportInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTransportInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTransportInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTransportInfo_resultTupleSchemeFactory());
    }

    public List<rfid.service.transportInfo> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, rfid.service.transportInfo.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTransportInfo_result.class, metaDataMap);
    }

    public getTransportInfo_result() {
    }

    public getTransportInfo_result(
      List<rfid.service.transportInfo> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTransportInfo_result(getTransportInfo_result other) {
      if (other.isSetSuccess()) {
        List<rfid.service.transportInfo> __this__success = new ArrayList<rfid.service.transportInfo>(other.success.size());
        for (rfid.service.transportInfo other_element : other.success) {
          __this__success.add(new rfid.service.transportInfo(other_element));
        }
        this.success = __this__success;
      }
    }

    public getTransportInfo_result deepCopy() {
      return new getTransportInfo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<rfid.service.transportInfo> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(rfid.service.transportInfo elem) {
      if (this.success == null) {
        this.success = new ArrayList<rfid.service.transportInfo>();
      }
      this.success.add(elem);
    }

    public List<rfid.service.transportInfo> getSuccess() {
      return this.success;
    }

    public getTransportInfo_result setSuccess(List<rfid.service.transportInfo> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<rfid.service.transportInfo>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTransportInfo_result)
        return this.equals((getTransportInfo_result)that);
      return false;
    }

    public boolean equals(getTransportInfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getTransportInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTransportInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTransportInfo_resultStandardSchemeFactory implements SchemeFactory {
      public getTransportInfo_resultStandardScheme getScheme() {
        return new getTransportInfo_resultStandardScheme();
      }
    }

    private static class getTransportInfo_resultStandardScheme extends StandardScheme<getTransportInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTransportInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list82 = iprot.readListBegin();
                  struct.success = new ArrayList<rfid.service.transportInfo>(_list82.size);
                  rfid.service.transportInfo _elem83;
                  for (int _i84 = 0; _i84 < _list82.size; ++_i84)
                  {
                    _elem83 = new rfid.service.transportInfo();
                    _elem83.read(iprot);
                    struct.success.add(_elem83);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTransportInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (rfid.service.transportInfo _iter85 : struct.success)
            {
              _iter85.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTransportInfo_resultTupleSchemeFactory implements SchemeFactory {
      public getTransportInfo_resultTupleScheme getScheme() {
        return new getTransportInfo_resultTupleScheme();
      }
    }

    private static class getTransportInfo_resultTupleScheme extends TupleScheme<getTransportInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTransportInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (rfid.service.transportInfo _iter86 : struct.success)
            {
              _iter86.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTransportInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list87 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<rfid.service.transportInfo>(_list87.size);
            rfid.service.transportInfo _elem88;
            for (int _i89 = 0; _i89 < _list87.size; ++_i89)
            {
              _elem88 = new rfid.service.transportInfo();
              _elem88.read(iprot);
              struct.success.add(_elem88);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getStagingInfo_args implements org.apache.thrift.TBase<getStagingInfo_args, getStagingInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<getStagingInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getStagingInfo_args");

    private static final org.apache.thrift.protocol.TField CONSTRUCT_UNIT_FIELD_DESC = new org.apache.thrift.protocol.TField("constructUnit", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getStagingInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getStagingInfo_argsTupleSchemeFactory());
    }

    public String constructUnit; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CONSTRUCT_UNIT((short)1, "constructUnit");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CONSTRUCT_UNIT
            return CONSTRUCT_UNIT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CONSTRUCT_UNIT, new org.apache.thrift.meta_data.FieldMetaData("constructUnit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getStagingInfo_args.class, metaDataMap);
    }

    public getStagingInfo_args() {
    }

    public getStagingInfo_args(
      String constructUnit)
    {
      this();
      this.constructUnit = constructUnit;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getStagingInfo_args(getStagingInfo_args other) {
      if (other.isSetConstructUnit()) {
        this.constructUnit = other.constructUnit;
      }
    }

    public getStagingInfo_args deepCopy() {
      return new getStagingInfo_args(this);
    }

    @Override
    public void clear() {
      this.constructUnit = null;
    }

    public String getConstructUnit() {
      return this.constructUnit;
    }

    public getStagingInfo_args setConstructUnit(String constructUnit) {
      this.constructUnit = constructUnit;
      return this;
    }

    public void unsetConstructUnit() {
      this.constructUnit = null;
    }

    /** Returns true if field constructUnit is set (has been assigned a value) and false otherwise */
    public boolean isSetConstructUnit() {
      return this.constructUnit != null;
    }

    public void setConstructUnitIsSet(boolean value) {
      if (!value) {
        this.constructUnit = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CONSTRUCT_UNIT:
        if (value == null) {
          unsetConstructUnit();
        } else {
          setConstructUnit((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CONSTRUCT_UNIT:
        return getConstructUnit();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CONSTRUCT_UNIT:
        return isSetConstructUnit();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getStagingInfo_args)
        return this.equals((getStagingInfo_args)that);
      return false;
    }

    public boolean equals(getStagingInfo_args that) {
      if (that == null)
        return false;

      boolean this_present_constructUnit = true && this.isSetConstructUnit();
      boolean that_present_constructUnit = true && that.isSetConstructUnit();
      if (this_present_constructUnit || that_present_constructUnit) {
        if (!(this_present_constructUnit && that_present_constructUnit))
          return false;
        if (!this.constructUnit.equals(that.constructUnit))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_constructUnit = true && (isSetConstructUnit());
      list.add(present_constructUnit);
      if (present_constructUnit)
        list.add(constructUnit);

      return list.hashCode();
    }

    @Override
    public int compareTo(getStagingInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetConstructUnit()).compareTo(other.isSetConstructUnit());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConstructUnit()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.constructUnit, other.constructUnit);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getStagingInfo_args(");
      boolean first = true;

      sb.append("constructUnit:");
      if (this.constructUnit == null) {
        sb.append("null");
      } else {
        sb.append(this.constructUnit);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getStagingInfo_argsStandardSchemeFactory implements SchemeFactory {
      public getStagingInfo_argsStandardScheme getScheme() {
        return new getStagingInfo_argsStandardScheme();
      }
    }

    private static class getStagingInfo_argsStandardScheme extends StandardScheme<getStagingInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getStagingInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CONSTRUCT_UNIT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.constructUnit = iprot.readString();
                struct.setConstructUnitIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getStagingInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.constructUnit != null) {
          oprot.writeFieldBegin(CONSTRUCT_UNIT_FIELD_DESC);
          oprot.writeString(struct.constructUnit);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getStagingInfo_argsTupleSchemeFactory implements SchemeFactory {
      public getStagingInfo_argsTupleScheme getScheme() {
        return new getStagingInfo_argsTupleScheme();
      }
    }

    private static class getStagingInfo_argsTupleScheme extends TupleScheme<getStagingInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getStagingInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetConstructUnit()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetConstructUnit()) {
          oprot.writeString(struct.constructUnit);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getStagingInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.constructUnit = iprot.readString();
          struct.setConstructUnitIsSet(true);
        }
      }
    }

  }

  public static class getStagingInfo_result implements org.apache.thrift.TBase<getStagingInfo_result, getStagingInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<getStagingInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getStagingInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getStagingInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getStagingInfo_resultTupleSchemeFactory());
    }

    public List<rfid.service.stagingInfo> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, rfid.service.stagingInfo.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getStagingInfo_result.class, metaDataMap);
    }

    public getStagingInfo_result() {
    }

    public getStagingInfo_result(
      List<rfid.service.stagingInfo> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getStagingInfo_result(getStagingInfo_result other) {
      if (other.isSetSuccess()) {
        List<rfid.service.stagingInfo> __this__success = new ArrayList<rfid.service.stagingInfo>(other.success.size());
        for (rfid.service.stagingInfo other_element : other.success) {
          __this__success.add(new rfid.service.stagingInfo(other_element));
        }
        this.success = __this__success;
      }
    }

    public getStagingInfo_result deepCopy() {
      return new getStagingInfo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<rfid.service.stagingInfo> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(rfid.service.stagingInfo elem) {
      if (this.success == null) {
        this.success = new ArrayList<rfid.service.stagingInfo>();
      }
      this.success.add(elem);
    }

    public List<rfid.service.stagingInfo> getSuccess() {
      return this.success;
    }

    public getStagingInfo_result setSuccess(List<rfid.service.stagingInfo> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<rfid.service.stagingInfo>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getStagingInfo_result)
        return this.equals((getStagingInfo_result)that);
      return false;
    }

    public boolean equals(getStagingInfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getStagingInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getStagingInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getStagingInfo_resultStandardSchemeFactory implements SchemeFactory {
      public getStagingInfo_resultStandardScheme getScheme() {
        return new getStagingInfo_resultStandardScheme();
      }
    }

    private static class getStagingInfo_resultStandardScheme extends StandardScheme<getStagingInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getStagingInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list90 = iprot.readListBegin();
                  struct.success = new ArrayList<rfid.service.stagingInfo>(_list90.size);
                  rfid.service.stagingInfo _elem91;
                  for (int _i92 = 0; _i92 < _list90.size; ++_i92)
                  {
                    _elem91 = new rfid.service.stagingInfo();
                    _elem91.read(iprot);
                    struct.success.add(_elem91);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getStagingInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (rfid.service.stagingInfo _iter93 : struct.success)
            {
              _iter93.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getStagingInfo_resultTupleSchemeFactory implements SchemeFactory {
      public getStagingInfo_resultTupleScheme getScheme() {
        return new getStagingInfo_resultTupleScheme();
      }
    }

    private static class getStagingInfo_resultTupleScheme extends TupleScheme<getStagingInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getStagingInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (rfid.service.stagingInfo _iter94 : struct.success)
            {
              _iter94.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getStagingInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list95 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<rfid.service.stagingInfo>(_list95.size);
            rfid.service.stagingInfo _elem96;
            for (int _i97 = 0; _i97 < _list95.size; ++_i97)
            {
              _elem96 = new rfid.service.stagingInfo();
              _elem96.read(iprot);
              struct.success.add(_elem96);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getInStagingInfo_args implements org.apache.thrift.TBase<getInStagingInfo_args, getInStagingInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<getInStagingInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getInStagingInfo_args");

    private static final org.apache.thrift.protocol.TField CONSTRUCT_UNIT_FIELD_DESC = new org.apache.thrift.protocol.TField("constructUnit", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getInStagingInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getInStagingInfo_argsTupleSchemeFactory());
    }

    public String constructUnit; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CONSTRUCT_UNIT((short)1, "constructUnit");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CONSTRUCT_UNIT
            return CONSTRUCT_UNIT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CONSTRUCT_UNIT, new org.apache.thrift.meta_data.FieldMetaData("constructUnit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getInStagingInfo_args.class, metaDataMap);
    }

    public getInStagingInfo_args() {
    }

    public getInStagingInfo_args(
      String constructUnit)
    {
      this();
      this.constructUnit = constructUnit;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getInStagingInfo_args(getInStagingInfo_args other) {
      if (other.isSetConstructUnit()) {
        this.constructUnit = other.constructUnit;
      }
    }

    public getInStagingInfo_args deepCopy() {
      return new getInStagingInfo_args(this);
    }

    @Override
    public void clear() {
      this.constructUnit = null;
    }

    public String getConstructUnit() {
      return this.constructUnit;
    }

    public getInStagingInfo_args setConstructUnit(String constructUnit) {
      this.constructUnit = constructUnit;
      return this;
    }

    public void unsetConstructUnit() {
      this.constructUnit = null;
    }

    /** Returns true if field constructUnit is set (has been assigned a value) and false otherwise */
    public boolean isSetConstructUnit() {
      return this.constructUnit != null;
    }

    public void setConstructUnitIsSet(boolean value) {
      if (!value) {
        this.constructUnit = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CONSTRUCT_UNIT:
        if (value == null) {
          unsetConstructUnit();
        } else {
          setConstructUnit((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CONSTRUCT_UNIT:
        return getConstructUnit();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CONSTRUCT_UNIT:
        return isSetConstructUnit();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getInStagingInfo_args)
        return this.equals((getInStagingInfo_args)that);
      return false;
    }

    public boolean equals(getInStagingInfo_args that) {
      if (that == null)
        return false;

      boolean this_present_constructUnit = true && this.isSetConstructUnit();
      boolean that_present_constructUnit = true && that.isSetConstructUnit();
      if (this_present_constructUnit || that_present_constructUnit) {
        if (!(this_present_constructUnit && that_present_constructUnit))
          return false;
        if (!this.constructUnit.equals(that.constructUnit))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_constructUnit = true && (isSetConstructUnit());
      list.add(present_constructUnit);
      if (present_constructUnit)
        list.add(constructUnit);

      return list.hashCode();
    }

    @Override
    public int compareTo(getInStagingInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetConstructUnit()).compareTo(other.isSetConstructUnit());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConstructUnit()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.constructUnit, other.constructUnit);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getInStagingInfo_args(");
      boolean first = true;

      sb.append("constructUnit:");
      if (this.constructUnit == null) {
        sb.append("null");
      } else {
        sb.append(this.constructUnit);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getInStagingInfo_argsStandardSchemeFactory implements SchemeFactory {
      public getInStagingInfo_argsStandardScheme getScheme() {
        return new getInStagingInfo_argsStandardScheme();
      }
    }

    private static class getInStagingInfo_argsStandardScheme extends StandardScheme<getInStagingInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getInStagingInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CONSTRUCT_UNIT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.constructUnit = iprot.readString();
                struct.setConstructUnitIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getInStagingInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.constructUnit != null) {
          oprot.writeFieldBegin(CONSTRUCT_UNIT_FIELD_DESC);
          oprot.writeString(struct.constructUnit);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getInStagingInfo_argsTupleSchemeFactory implements SchemeFactory {
      public getInStagingInfo_argsTupleScheme getScheme() {
        return new getInStagingInfo_argsTupleScheme();
      }
    }

    private static class getInStagingInfo_argsTupleScheme extends TupleScheme<getInStagingInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getInStagingInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetConstructUnit()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetConstructUnit()) {
          oprot.writeString(struct.constructUnit);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getInStagingInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.constructUnit = iprot.readString();
          struct.setConstructUnitIsSet(true);
        }
      }
    }

  }

  public static class getInStagingInfo_result implements org.apache.thrift.TBase<getInStagingInfo_result, getInStagingInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<getInStagingInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getInStagingInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getInStagingInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getInStagingInfo_resultTupleSchemeFactory());
    }

    public List<rfid.service.inStagingInfo> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, rfid.service.inStagingInfo.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getInStagingInfo_result.class, metaDataMap);
    }

    public getInStagingInfo_result() {
    }

    public getInStagingInfo_result(
      List<rfid.service.inStagingInfo> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getInStagingInfo_result(getInStagingInfo_result other) {
      if (other.isSetSuccess()) {
        List<rfid.service.inStagingInfo> __this__success = new ArrayList<rfid.service.inStagingInfo>(other.success.size());
        for (rfid.service.inStagingInfo other_element : other.success) {
          __this__success.add(new rfid.service.inStagingInfo(other_element));
        }
        this.success = __this__success;
      }
    }

    public getInStagingInfo_result deepCopy() {
      return new getInStagingInfo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<rfid.service.inStagingInfo> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(rfid.service.inStagingInfo elem) {
      if (this.success == null) {
        this.success = new ArrayList<rfid.service.inStagingInfo>();
      }
      this.success.add(elem);
    }

    public List<rfid.service.inStagingInfo> getSuccess() {
      return this.success;
    }

    public getInStagingInfo_result setSuccess(List<rfid.service.inStagingInfo> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<rfid.service.inStagingInfo>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getInStagingInfo_result)
        return this.equals((getInStagingInfo_result)that);
      return false;
    }

    public boolean equals(getInStagingInfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getInStagingInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getInStagingInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getInStagingInfo_resultStandardSchemeFactory implements SchemeFactory {
      public getInStagingInfo_resultStandardScheme getScheme() {
        return new getInStagingInfo_resultStandardScheme();
      }
    }

    private static class getInStagingInfo_resultStandardScheme extends StandardScheme<getInStagingInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getInStagingInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list98 = iprot.readListBegin();
                  struct.success = new ArrayList<rfid.service.inStagingInfo>(_list98.size);
                  rfid.service.inStagingInfo _elem99;
                  for (int _i100 = 0; _i100 < _list98.size; ++_i100)
                  {
                    _elem99 = new rfid.service.inStagingInfo();
                    _elem99.read(iprot);
                    struct.success.add(_elem99);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getInStagingInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (rfid.service.inStagingInfo _iter101 : struct.success)
            {
              _iter101.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getInStagingInfo_resultTupleSchemeFactory implements SchemeFactory {
      public getInStagingInfo_resultTupleScheme getScheme() {
        return new getInStagingInfo_resultTupleScheme();
      }
    }

    private static class getInStagingInfo_resultTupleScheme extends TupleScheme<getInStagingInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getInStagingInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (rfid.service.inStagingInfo _iter102 : struct.success)
            {
              _iter102.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getInStagingInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list103 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<rfid.service.inStagingInfo>(_list103.size);
            rfid.service.inStagingInfo _elem104;
            for (int _i105 = 0; _i105 < _list103.size; ++_i105)
            {
              _elem104 = new rfid.service.inStagingInfo();
              _elem104.read(iprot);
              struct.success.add(_elem104);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class addPic_args implements org.apache.thrift.TBase<addPic_args, addPic_args._Fields>, java.io.Serializable, Cloneable, Comparable<addPic_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addPic_args");

    private static final org.apache.thrift.protocol.TField APPLY_DOC_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("ApplyDocCode", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField URL_FIELD_DESC = new org.apache.thrift.protocol.TField("URL", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addPic_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addPic_argsTupleSchemeFactory());
    }

    public String ApplyDocCode; // required
    public List<String> URL; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      APPLY_DOC_CODE((short)1, "ApplyDocCode"),
      URL((short)2, "URL");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // APPLY_DOC_CODE
            return APPLY_DOC_CODE;
          case 2: // URL
            return URL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.APPLY_DOC_CODE, new org.apache.thrift.meta_data.FieldMetaData("ApplyDocCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.URL, new org.apache.thrift.meta_data.FieldMetaData("URL", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addPic_args.class, metaDataMap);
    }

    public addPic_args() {
    }

    public addPic_args(
      String ApplyDocCode,
      List<String> URL)
    {
      this();
      this.ApplyDocCode = ApplyDocCode;
      this.URL = URL;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addPic_args(addPic_args other) {
      if (other.isSetApplyDocCode()) {
        this.ApplyDocCode = other.ApplyDocCode;
      }
      if (other.isSetURL()) {
        List<String> __this__URL = new ArrayList<String>(other.URL);
        this.URL = __this__URL;
      }
    }

    public addPic_args deepCopy() {
      return new addPic_args(this);
    }

    @Override
    public void clear() {
      this.ApplyDocCode = null;
      this.URL = null;
    }

    public String getApplyDocCode() {
      return this.ApplyDocCode;
    }

    public addPic_args setApplyDocCode(String ApplyDocCode) {
      this.ApplyDocCode = ApplyDocCode;
      return this;
    }

    public void unsetApplyDocCode() {
      this.ApplyDocCode = null;
    }

    /** Returns true if field ApplyDocCode is set (has been assigned a value) and false otherwise */
    public boolean isSetApplyDocCode() {
      return this.ApplyDocCode != null;
    }

    public void setApplyDocCodeIsSet(boolean value) {
      if (!value) {
        this.ApplyDocCode = null;
      }
    }

    public int getURLSize() {
      return (this.URL == null) ? 0 : this.URL.size();
    }

    public java.util.Iterator<String> getURLIterator() {
      return (this.URL == null) ? null : this.URL.iterator();
    }

    public void addToURL(String elem) {
      if (this.URL == null) {
        this.URL = new ArrayList<String>();
      }
      this.URL.add(elem);
    }

    public List<String> getURL() {
      return this.URL;
    }

    public addPic_args setURL(List<String> URL) {
      this.URL = URL;
      return this;
    }

    public void unsetURL() {
      this.URL = null;
    }

    /** Returns true if field URL is set (has been assigned a value) and false otherwise */
    public boolean isSetURL() {
      return this.URL != null;
    }

    public void setURLIsSet(boolean value) {
      if (!value) {
        this.URL = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case APPLY_DOC_CODE:
        if (value == null) {
          unsetApplyDocCode();
        } else {
          setApplyDocCode((String)value);
        }
        break;

      case URL:
        if (value == null) {
          unsetURL();
        } else {
          setURL((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case APPLY_DOC_CODE:
        return getApplyDocCode();

      case URL:
        return getURL();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case APPLY_DOC_CODE:
        return isSetApplyDocCode();
      case URL:
        return isSetURL();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addPic_args)
        return this.equals((addPic_args)that);
      return false;
    }

    public boolean equals(addPic_args that) {
      if (that == null)
        return false;

      boolean this_present_ApplyDocCode = true && this.isSetApplyDocCode();
      boolean that_present_ApplyDocCode = true && that.isSetApplyDocCode();
      if (this_present_ApplyDocCode || that_present_ApplyDocCode) {
        if (!(this_present_ApplyDocCode && that_present_ApplyDocCode))
          return false;
        if (!this.ApplyDocCode.equals(that.ApplyDocCode))
          return false;
      }

      boolean this_present_URL = true && this.isSetURL();
      boolean that_present_URL = true && that.isSetURL();
      if (this_present_URL || that_present_URL) {
        if (!(this_present_URL && that_present_URL))
          return false;
        if (!this.URL.equals(that.URL))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_ApplyDocCode = true && (isSetApplyDocCode());
      list.add(present_ApplyDocCode);
      if (present_ApplyDocCode)
        list.add(ApplyDocCode);

      boolean present_URL = true && (isSetURL());
      list.add(present_URL);
      if (present_URL)
        list.add(URL);

      return list.hashCode();
    }

    @Override
    public int compareTo(addPic_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetApplyDocCode()).compareTo(other.isSetApplyDocCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetApplyDocCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ApplyDocCode, other.ApplyDocCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetURL()).compareTo(other.isSetURL());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetURL()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.URL, other.URL);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addPic_args(");
      boolean first = true;

      sb.append("ApplyDocCode:");
      if (this.ApplyDocCode == null) {
        sb.append("null");
      } else {
        sb.append(this.ApplyDocCode);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("URL:");
      if (this.URL == null) {
        sb.append("null");
      } else {
        sb.append(this.URL);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addPic_argsStandardSchemeFactory implements SchemeFactory {
      public addPic_argsStandardScheme getScheme() {
        return new addPic_argsStandardScheme();
      }
    }

    private static class addPic_argsStandardScheme extends StandardScheme<addPic_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addPic_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // APPLY_DOC_CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.ApplyDocCode = iprot.readString();
                struct.setApplyDocCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // URL
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list106 = iprot.readListBegin();
                  struct.URL = new ArrayList<String>(_list106.size);
                  String _elem107;
                  for (int _i108 = 0; _i108 < _list106.size; ++_i108)
                  {
                    _elem107 = iprot.readString();
                    struct.URL.add(_elem107);
                  }
                  iprot.readListEnd();
                }
                struct.setURLIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addPic_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ApplyDocCode != null) {
          oprot.writeFieldBegin(APPLY_DOC_CODE_FIELD_DESC);
          oprot.writeString(struct.ApplyDocCode);
          oprot.writeFieldEnd();
        }
        if (struct.URL != null) {
          oprot.writeFieldBegin(URL_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.URL.size()));
            for (String _iter109 : struct.URL)
            {
              oprot.writeString(_iter109);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addPic_argsTupleSchemeFactory implements SchemeFactory {
      public addPic_argsTupleScheme getScheme() {
        return new addPic_argsTupleScheme();
      }
    }

    private static class addPic_argsTupleScheme extends TupleScheme<addPic_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addPic_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetApplyDocCode()) {
          optionals.set(0);
        }
        if (struct.isSetURL()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetApplyDocCode()) {
          oprot.writeString(struct.ApplyDocCode);
        }
        if (struct.isSetURL()) {
          {
            oprot.writeI32(struct.URL.size());
            for (String _iter110 : struct.URL)
            {
              oprot.writeString(_iter110);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addPic_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.ApplyDocCode = iprot.readString();
          struct.setApplyDocCodeIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list111 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.URL = new ArrayList<String>(_list111.size);
            String _elem112;
            for (int _i113 = 0; _i113 < _list111.size; ++_i113)
            {
              _elem112 = iprot.readString();
              struct.URL.add(_elem112);
            }
          }
          struct.setURLIsSet(true);
        }
      }
    }

  }

  public static class addPic_result implements org.apache.thrift.TBase<addPic_result, addPic_result._Fields>, java.io.Serializable, Cloneable, Comparable<addPic_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addPic_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addPic_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addPic_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addPic_result.class, metaDataMap);
    }

    public addPic_result() {
    }

    public addPic_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addPic_result(addPic_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public addPic_result deepCopy() {
      return new addPic_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public addPic_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addPic_result)
        return this.equals((addPic_result)that);
      return false;
    }

    public boolean equals(addPic_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(addPic_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addPic_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addPic_resultStandardSchemeFactory implements SchemeFactory {
      public addPic_resultStandardScheme getScheme() {
        return new addPic_resultStandardScheme();
      }
    }

    private static class addPic_resultStandardScheme extends StandardScheme<addPic_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addPic_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addPic_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addPic_resultTupleSchemeFactory implements SchemeFactory {
      public addPic_resultTupleScheme getScheme() {
        return new addPic_resultTupleScheme();
      }
    }

    private static class addPic_resultTupleScheme extends TupleScheme<addPic_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addPic_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addPic_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getPicsByApplyDocCode_args implements org.apache.thrift.TBase<getPicsByApplyDocCode_args, getPicsByApplyDocCode_args._Fields>, java.io.Serializable, Cloneable, Comparable<getPicsByApplyDocCode_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPicsByApplyDocCode_args");

    private static final org.apache.thrift.protocol.TField APPLY_DOC_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("ApplyDocCode", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPicsByApplyDocCode_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPicsByApplyDocCode_argsTupleSchemeFactory());
    }

    public String ApplyDocCode; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      APPLY_DOC_CODE((short)1, "ApplyDocCode");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // APPLY_DOC_CODE
            return APPLY_DOC_CODE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.APPLY_DOC_CODE, new org.apache.thrift.meta_data.FieldMetaData("ApplyDocCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPicsByApplyDocCode_args.class, metaDataMap);
    }

    public getPicsByApplyDocCode_args() {
    }

    public getPicsByApplyDocCode_args(
      String ApplyDocCode)
    {
      this();
      this.ApplyDocCode = ApplyDocCode;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPicsByApplyDocCode_args(getPicsByApplyDocCode_args other) {
      if (other.isSetApplyDocCode()) {
        this.ApplyDocCode = other.ApplyDocCode;
      }
    }

    public getPicsByApplyDocCode_args deepCopy() {
      return new getPicsByApplyDocCode_args(this);
    }

    @Override
    public void clear() {
      this.ApplyDocCode = null;
    }

    public String getApplyDocCode() {
      return this.ApplyDocCode;
    }

    public getPicsByApplyDocCode_args setApplyDocCode(String ApplyDocCode) {
      this.ApplyDocCode = ApplyDocCode;
      return this;
    }

    public void unsetApplyDocCode() {
      this.ApplyDocCode = null;
    }

    /** Returns true if field ApplyDocCode is set (has been assigned a value) and false otherwise */
    public boolean isSetApplyDocCode() {
      return this.ApplyDocCode != null;
    }

    public void setApplyDocCodeIsSet(boolean value) {
      if (!value) {
        this.ApplyDocCode = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case APPLY_DOC_CODE:
        if (value == null) {
          unsetApplyDocCode();
        } else {
          setApplyDocCode((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case APPLY_DOC_CODE:
        return getApplyDocCode();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case APPLY_DOC_CODE:
        return isSetApplyDocCode();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPicsByApplyDocCode_args)
        return this.equals((getPicsByApplyDocCode_args)that);
      return false;
    }

    public boolean equals(getPicsByApplyDocCode_args that) {
      if (that == null)
        return false;

      boolean this_present_ApplyDocCode = true && this.isSetApplyDocCode();
      boolean that_present_ApplyDocCode = true && that.isSetApplyDocCode();
      if (this_present_ApplyDocCode || that_present_ApplyDocCode) {
        if (!(this_present_ApplyDocCode && that_present_ApplyDocCode))
          return false;
        if (!this.ApplyDocCode.equals(that.ApplyDocCode))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_ApplyDocCode = true && (isSetApplyDocCode());
      list.add(present_ApplyDocCode);
      if (present_ApplyDocCode)
        list.add(ApplyDocCode);

      return list.hashCode();
    }

    @Override
    public int compareTo(getPicsByApplyDocCode_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetApplyDocCode()).compareTo(other.isSetApplyDocCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetApplyDocCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ApplyDocCode, other.ApplyDocCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPicsByApplyDocCode_args(");
      boolean first = true;

      sb.append("ApplyDocCode:");
      if (this.ApplyDocCode == null) {
        sb.append("null");
      } else {
        sb.append(this.ApplyDocCode);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPicsByApplyDocCode_argsStandardSchemeFactory implements SchemeFactory {
      public getPicsByApplyDocCode_argsStandardScheme getScheme() {
        return new getPicsByApplyDocCode_argsStandardScheme();
      }
    }

    private static class getPicsByApplyDocCode_argsStandardScheme extends StandardScheme<getPicsByApplyDocCode_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPicsByApplyDocCode_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // APPLY_DOC_CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.ApplyDocCode = iprot.readString();
                struct.setApplyDocCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPicsByApplyDocCode_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ApplyDocCode != null) {
          oprot.writeFieldBegin(APPLY_DOC_CODE_FIELD_DESC);
          oprot.writeString(struct.ApplyDocCode);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPicsByApplyDocCode_argsTupleSchemeFactory implements SchemeFactory {
      public getPicsByApplyDocCode_argsTupleScheme getScheme() {
        return new getPicsByApplyDocCode_argsTupleScheme();
      }
    }

    private static class getPicsByApplyDocCode_argsTupleScheme extends TupleScheme<getPicsByApplyDocCode_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPicsByApplyDocCode_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetApplyDocCode()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetApplyDocCode()) {
          oprot.writeString(struct.ApplyDocCode);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPicsByApplyDocCode_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.ApplyDocCode = iprot.readString();
          struct.setApplyDocCodeIsSet(true);
        }
      }
    }

  }

  public static class getPicsByApplyDocCode_result implements org.apache.thrift.TBase<getPicsByApplyDocCode_result, getPicsByApplyDocCode_result._Fields>, java.io.Serializable, Cloneable, Comparable<getPicsByApplyDocCode_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPicsByApplyDocCode_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPicsByApplyDocCode_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPicsByApplyDocCode_resultTupleSchemeFactory());
    }

    public List<String> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPicsByApplyDocCode_result.class, metaDataMap);
    }

    public getPicsByApplyDocCode_result() {
    }

    public getPicsByApplyDocCode_result(
      List<String> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPicsByApplyDocCode_result(getPicsByApplyDocCode_result other) {
      if (other.isSetSuccess()) {
        List<String> __this__success = new ArrayList<String>(other.success);
        this.success = __this__success;
      }
    }

    public getPicsByApplyDocCode_result deepCopy() {
      return new getPicsByApplyDocCode_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<String> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(String elem) {
      if (this.success == null) {
        this.success = new ArrayList<String>();
      }
      this.success.add(elem);
    }

    public List<String> getSuccess() {
      return this.success;
    }

    public getPicsByApplyDocCode_result setSuccess(List<String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPicsByApplyDocCode_result)
        return this.equals((getPicsByApplyDocCode_result)that);
      return false;
    }

    public boolean equals(getPicsByApplyDocCode_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getPicsByApplyDocCode_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPicsByApplyDocCode_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPicsByApplyDocCode_resultStandardSchemeFactory implements SchemeFactory {
      public getPicsByApplyDocCode_resultStandardScheme getScheme() {
        return new getPicsByApplyDocCode_resultStandardScheme();
      }
    }

    private static class getPicsByApplyDocCode_resultStandardScheme extends StandardScheme<getPicsByApplyDocCode_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPicsByApplyDocCode_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list114 = iprot.readListBegin();
                  struct.success = new ArrayList<String>(_list114.size);
                  String _elem115;
                  for (int _i116 = 0; _i116 < _list114.size; ++_i116)
                  {
                    _elem115 = iprot.readString();
                    struct.success.add(_elem115);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPicsByApplyDocCode_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (String _iter117 : struct.success)
            {
              oprot.writeString(_iter117);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPicsByApplyDocCode_resultTupleSchemeFactory implements SchemeFactory {
      public getPicsByApplyDocCode_resultTupleScheme getScheme() {
        return new getPicsByApplyDocCode_resultTupleScheme();
      }
    }

    private static class getPicsByApplyDocCode_resultTupleScheme extends TupleScheme<getPicsByApplyDocCode_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPicsByApplyDocCode_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (String _iter118 : struct.success)
            {
              oprot.writeString(_iter118);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPicsByApplyDocCode_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list119 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new ArrayList<String>(_list119.size);
            String _elem120;
            for (int _i121 = 0; _i121 < _list119.size; ++_i121)
            {
              _elem120 = iprot.readString();
              struct.success.add(_elem120);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class toPrint_args implements org.apache.thrift.TBase<toPrint_args, toPrint_args._Fields>, java.io.Serializable, Cloneable, Comparable<toPrint_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("toPrint_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new toPrint_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new toPrint_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(toPrint_args.class, metaDataMap);
    }

    public toPrint_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public toPrint_args(toPrint_args other) {
    }

    public toPrint_args deepCopy() {
      return new toPrint_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof toPrint_args)
        return this.equals((toPrint_args)that);
      return false;
    }

    public boolean equals(toPrint_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(toPrint_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("toPrint_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class toPrint_argsStandardSchemeFactory implements SchemeFactory {
      public toPrint_argsStandardScheme getScheme() {
        return new toPrint_argsStandardScheme();
      }
    }

    private static class toPrint_argsStandardScheme extends StandardScheme<toPrint_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, toPrint_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, toPrint_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class toPrint_argsTupleSchemeFactory implements SchemeFactory {
      public toPrint_argsTupleScheme getScheme() {
        return new toPrint_argsTupleScheme();
      }
    }

    private static class toPrint_argsTupleScheme extends TupleScheme<toPrint_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, toPrint_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, toPrint_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class toPrint_result implements org.apache.thrift.TBase<toPrint_result, toPrint_result._Fields>, java.io.Serializable, Cloneable, Comparable<toPrint_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("toPrint_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new toPrint_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new toPrint_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(toPrint_result.class, metaDataMap);
    }

    public toPrint_result() {
    }

    public toPrint_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public toPrint_result(toPrint_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public toPrint_result deepCopy() {
      return new toPrint_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public toPrint_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof toPrint_result)
        return this.equals((toPrint_result)that);
      return false;
    }

    public boolean equals(toPrint_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(toPrint_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("toPrint_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class toPrint_resultStandardSchemeFactory implements SchemeFactory {
      public toPrint_resultStandardScheme getScheme() {
        return new toPrint_resultStandardScheme();
      }
    }

    private static class toPrint_resultStandardScheme extends StandardScheme<toPrint_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, toPrint_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, toPrint_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class toPrint_resultTupleSchemeFactory implements SchemeFactory {
      public toPrint_resultTupleScheme getScheme() {
        return new toPrint_resultTupleScheme();
      }
    }

    private static class toPrint_resultTupleScheme extends TupleScheme<toPrint_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, toPrint_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, toPrint_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class callPrinter_args implements org.apache.thrift.TBase<callPrinter_args, callPrinter_args._Fields>, java.io.Serializable, Cloneable, Comparable<callPrinter_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("callPrinter_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new callPrinter_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new callPrinter_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(callPrinter_args.class, metaDataMap);
    }

    public callPrinter_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public callPrinter_args(callPrinter_args other) {
    }

    public callPrinter_args deepCopy() {
      return new callPrinter_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof callPrinter_args)
        return this.equals((callPrinter_args)that);
      return false;
    }

    public boolean equals(callPrinter_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(callPrinter_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("callPrinter_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class callPrinter_argsStandardSchemeFactory implements SchemeFactory {
      public callPrinter_argsStandardScheme getScheme() {
        return new callPrinter_argsStandardScheme();
      }
    }

    private static class callPrinter_argsStandardScheme extends StandardScheme<callPrinter_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, callPrinter_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, callPrinter_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class callPrinter_argsTupleSchemeFactory implements SchemeFactory {
      public callPrinter_argsTupleScheme getScheme() {
        return new callPrinter_argsTupleScheme();
      }
    }

    private static class callPrinter_argsTupleScheme extends TupleScheme<callPrinter_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, callPrinter_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, callPrinter_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class callPrinter_result implements org.apache.thrift.TBase<callPrinter_result, callPrinter_result._Fields>, java.io.Serializable, Cloneable, Comparable<callPrinter_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("callPrinter_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new callPrinter_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new callPrinter_resultTupleSchemeFactory());
    }

    public List<rfid.service.Data> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, rfid.service.Data.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(callPrinter_result.class, metaDataMap);
    }

    public callPrinter_result() {
    }

    public callPrinter_result(
      List<rfid.service.Data> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public callPrinter_result(callPrinter_result other) {
      if (other.isSetSuccess()) {
        List<rfid.service.Data> __this__success = new ArrayList<rfid.service.Data>(other.success.size());
        for (rfid.service.Data other_element : other.success) {
          __this__success.add(new rfid.service.Data(other_element));
        }
        this.success = __this__success;
      }
    }

    public callPrinter_result deepCopy() {
      return new callPrinter_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<rfid.service.Data> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(rfid.service.Data elem) {
      if (this.success == null) {
        this.success = new ArrayList<rfid.service.Data>();
      }
      this.success.add(elem);
    }

    public List<rfid.service.Data> getSuccess() {
      return this.success;
    }

    public callPrinter_result setSuccess(List<rfid.service.Data> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<rfid.service.Data>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof callPrinter_result)
        return this.equals((callPrinter_result)that);
      return false;
    }

    public boolean equals(callPrinter_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(callPrinter_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("callPrinter_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class callPrinter_resultStandardSchemeFactory implements SchemeFactory {
      public callPrinter_resultStandardScheme getScheme() {
        return new callPrinter_resultStandardScheme();
      }
    }

    private static class callPrinter_resultStandardScheme extends StandardScheme<callPrinter_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, callPrinter_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list122 = iprot.readListBegin();
                  struct.success = new ArrayList<rfid.service.Data>(_list122.size);
                  rfid.service.Data _elem123;
                  for (int _i124 = 0; _i124 < _list122.size; ++_i124)
                  {
                    _elem123 = new rfid.service.Data();
                    _elem123.read(iprot);
                    struct.success.add(_elem123);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, callPrinter_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (rfid.service.Data _iter125 : struct.success)
            {
              _iter125.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class callPrinter_resultTupleSchemeFactory implements SchemeFactory {
      public callPrinter_resultTupleScheme getScheme() {
        return new callPrinter_resultTupleScheme();
      }
    }

    private static class callPrinter_resultTupleScheme extends TupleScheme<callPrinter_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, callPrinter_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (rfid.service.Data _iter126 : struct.success)
            {
              _iter126.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, callPrinter_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list127 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<rfid.service.Data>(_list127.size);
            rfid.service.Data _elem128;
            for (int _i129 = 0; _i129 < _list127.size; ++_i129)
            {
              _elem128 = new rfid.service.Data();
              _elem128.read(iprot);
              struct.success.add(_elem128);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
