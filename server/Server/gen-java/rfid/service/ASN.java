/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package rfid.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2015-12-12")
public class ASN implements org.apache.thrift.TBase<ASN, ASN._Fields>, java.io.Serializable, Cloneable, Comparable<ASN> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ASN");

  private static final org.apache.thrift.protocol.TField CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("Code", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField PROJECT__CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("Project_Code", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField ORDER__DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("Order_Date", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField VENDOR__NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("Vendor_Name", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField APPLY__PERSON_FIELD_DESC = new org.apache.thrift.protocol.TField("Apply_Person", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField RELEATED__BILL1_FIELD_DESC = new org.apache.thrift.protocol.TField("Releated_Bill1", org.apache.thrift.protocol.TType.STRING, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ASNStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ASNTupleSchemeFactory());
  }

  public String Code; // required
  public String Project_Code; // required
  public String Order_Date; // required
  public String Vendor_Name; // required
  public String Apply_Person; // required
  public String Releated_Bill1; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CODE((short)1, "Code"),
    PROJECT__CODE((short)2, "Project_Code"),
    ORDER__DATE((short)3, "Order_Date"),
    VENDOR__NAME((short)4, "Vendor_Name"),
    APPLY__PERSON((short)5, "Apply_Person"),
    RELEATED__BILL1((short)6, "Releated_Bill1");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CODE
          return CODE;
        case 2: // PROJECT__CODE
          return PROJECT__CODE;
        case 3: // ORDER__DATE
          return ORDER__DATE;
        case 4: // VENDOR__NAME
          return VENDOR__NAME;
        case 5: // APPLY__PERSON
          return APPLY__PERSON;
        case 6: // RELEATED__BILL1
          return RELEATED__BILL1;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CODE, new org.apache.thrift.meta_data.FieldMetaData("Code", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROJECT__CODE, new org.apache.thrift.meta_data.FieldMetaData("Project_Code", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ORDER__DATE, new org.apache.thrift.meta_data.FieldMetaData("Order_Date", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VENDOR__NAME, new org.apache.thrift.meta_data.FieldMetaData("Vendor_Name", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.APPLY__PERSON, new org.apache.thrift.meta_data.FieldMetaData("Apply_Person", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RELEATED__BILL1, new org.apache.thrift.meta_data.FieldMetaData("Releated_Bill1", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ASN.class, metaDataMap);
  }

  public ASN() {
  }

  public ASN(
    String Code,
    String Project_Code,
    String Order_Date,
    String Vendor_Name,
    String Apply_Person,
    String Releated_Bill1)
  {
    this();
    this.Code = Code;
    this.Project_Code = Project_Code;
    this.Order_Date = Order_Date;
    this.Vendor_Name = Vendor_Name;
    this.Apply_Person = Apply_Person;
    this.Releated_Bill1 = Releated_Bill1;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ASN(ASN other) {
    if (other.isSetCode()) {
      this.Code = other.Code;
    }
    if (other.isSetProject_Code()) {
      this.Project_Code = other.Project_Code;
    }
    if (other.isSetOrder_Date()) {
      this.Order_Date = other.Order_Date;
    }
    if (other.isSetVendor_Name()) {
      this.Vendor_Name = other.Vendor_Name;
    }
    if (other.isSetApply_Person()) {
      this.Apply_Person = other.Apply_Person;
    }
    if (other.isSetReleated_Bill1()) {
      this.Releated_Bill1 = other.Releated_Bill1;
    }
  }

  public ASN deepCopy() {
    return new ASN(this);
  }

  @Override
  public void clear() {
    this.Code = null;
    this.Project_Code = null;
    this.Order_Date = null;
    this.Vendor_Name = null;
    this.Apply_Person = null;
    this.Releated_Bill1 = null;
  }

  public String getCode() {
    return this.Code;
  }

  public ASN setCode(String Code) {
    this.Code = Code;
    return this;
  }

  public void unsetCode() {
    this.Code = null;
  }

  /** Returns true if field Code is set (has been assigned a value) and false otherwise */
  public boolean isSetCode() {
    return this.Code != null;
  }

  public void setCodeIsSet(boolean value) {
    if (!value) {
      this.Code = null;
    }
  }

  public String getProject_Code() {
    return this.Project_Code;
  }

  public ASN setProject_Code(String Project_Code) {
    this.Project_Code = Project_Code;
    return this;
  }

  public void unsetProject_Code() {
    this.Project_Code = null;
  }

  /** Returns true if field Project_Code is set (has been assigned a value) and false otherwise */
  public boolean isSetProject_Code() {
    return this.Project_Code != null;
  }

  public void setProject_CodeIsSet(boolean value) {
    if (!value) {
      this.Project_Code = null;
    }
  }

  public String getOrder_Date() {
    return this.Order_Date;
  }

  public ASN setOrder_Date(String Order_Date) {
    this.Order_Date = Order_Date;
    return this;
  }

  public void unsetOrder_Date() {
    this.Order_Date = null;
  }

  /** Returns true if field Order_Date is set (has been assigned a value) and false otherwise */
  public boolean isSetOrder_Date() {
    return this.Order_Date != null;
  }

  public void setOrder_DateIsSet(boolean value) {
    if (!value) {
      this.Order_Date = null;
    }
  }

  public String getVendor_Name() {
    return this.Vendor_Name;
  }

  public ASN setVendor_Name(String Vendor_Name) {
    this.Vendor_Name = Vendor_Name;
    return this;
  }

  public void unsetVendor_Name() {
    this.Vendor_Name = null;
  }

  /** Returns true if field Vendor_Name is set (has been assigned a value) and false otherwise */
  public boolean isSetVendor_Name() {
    return this.Vendor_Name != null;
  }

  public void setVendor_NameIsSet(boolean value) {
    if (!value) {
      this.Vendor_Name = null;
    }
  }

  public String getApply_Person() {
    return this.Apply_Person;
  }

  public ASN setApply_Person(String Apply_Person) {
    this.Apply_Person = Apply_Person;
    return this;
  }

  public void unsetApply_Person() {
    this.Apply_Person = null;
  }

  /** Returns true if field Apply_Person is set (has been assigned a value) and false otherwise */
  public boolean isSetApply_Person() {
    return this.Apply_Person != null;
  }

  public void setApply_PersonIsSet(boolean value) {
    if (!value) {
      this.Apply_Person = null;
    }
  }

  public String getReleated_Bill1() {
    return this.Releated_Bill1;
  }

  public ASN setReleated_Bill1(String Releated_Bill1) {
    this.Releated_Bill1 = Releated_Bill1;
    return this;
  }

  public void unsetReleated_Bill1() {
    this.Releated_Bill1 = null;
  }

  /** Returns true if field Releated_Bill1 is set (has been assigned a value) and false otherwise */
  public boolean isSetReleated_Bill1() {
    return this.Releated_Bill1 != null;
  }

  public void setReleated_Bill1IsSet(boolean value) {
    if (!value) {
      this.Releated_Bill1 = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CODE:
      if (value == null) {
        unsetCode();
      } else {
        setCode((String)value);
      }
      break;

    case PROJECT__CODE:
      if (value == null) {
        unsetProject_Code();
      } else {
        setProject_Code((String)value);
      }
      break;

    case ORDER__DATE:
      if (value == null) {
        unsetOrder_Date();
      } else {
        setOrder_Date((String)value);
      }
      break;

    case VENDOR__NAME:
      if (value == null) {
        unsetVendor_Name();
      } else {
        setVendor_Name((String)value);
      }
      break;

    case APPLY__PERSON:
      if (value == null) {
        unsetApply_Person();
      } else {
        setApply_Person((String)value);
      }
      break;

    case RELEATED__BILL1:
      if (value == null) {
        unsetReleated_Bill1();
      } else {
        setReleated_Bill1((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CODE:
      return getCode();

    case PROJECT__CODE:
      return getProject_Code();

    case ORDER__DATE:
      return getOrder_Date();

    case VENDOR__NAME:
      return getVendor_Name();

    case APPLY__PERSON:
      return getApply_Person();

    case RELEATED__BILL1:
      return getReleated_Bill1();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CODE:
      return isSetCode();
    case PROJECT__CODE:
      return isSetProject_Code();
    case ORDER__DATE:
      return isSetOrder_Date();
    case VENDOR__NAME:
      return isSetVendor_Name();
    case APPLY__PERSON:
      return isSetApply_Person();
    case RELEATED__BILL1:
      return isSetReleated_Bill1();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ASN)
      return this.equals((ASN)that);
    return false;
  }

  public boolean equals(ASN that) {
    if (that == null)
      return false;

    boolean this_present_Code = true && this.isSetCode();
    boolean that_present_Code = true && that.isSetCode();
    if (this_present_Code || that_present_Code) {
      if (!(this_present_Code && that_present_Code))
        return false;
      if (!this.Code.equals(that.Code))
        return false;
    }

    boolean this_present_Project_Code = true && this.isSetProject_Code();
    boolean that_present_Project_Code = true && that.isSetProject_Code();
    if (this_present_Project_Code || that_present_Project_Code) {
      if (!(this_present_Project_Code && that_present_Project_Code))
        return false;
      if (!this.Project_Code.equals(that.Project_Code))
        return false;
    }

    boolean this_present_Order_Date = true && this.isSetOrder_Date();
    boolean that_present_Order_Date = true && that.isSetOrder_Date();
    if (this_present_Order_Date || that_present_Order_Date) {
      if (!(this_present_Order_Date && that_present_Order_Date))
        return false;
      if (!this.Order_Date.equals(that.Order_Date))
        return false;
    }

    boolean this_present_Vendor_Name = true && this.isSetVendor_Name();
    boolean that_present_Vendor_Name = true && that.isSetVendor_Name();
    if (this_present_Vendor_Name || that_present_Vendor_Name) {
      if (!(this_present_Vendor_Name && that_present_Vendor_Name))
        return false;
      if (!this.Vendor_Name.equals(that.Vendor_Name))
        return false;
    }

    boolean this_present_Apply_Person = true && this.isSetApply_Person();
    boolean that_present_Apply_Person = true && that.isSetApply_Person();
    if (this_present_Apply_Person || that_present_Apply_Person) {
      if (!(this_present_Apply_Person && that_present_Apply_Person))
        return false;
      if (!this.Apply_Person.equals(that.Apply_Person))
        return false;
    }

    boolean this_present_Releated_Bill1 = true && this.isSetReleated_Bill1();
    boolean that_present_Releated_Bill1 = true && that.isSetReleated_Bill1();
    if (this_present_Releated_Bill1 || that_present_Releated_Bill1) {
      if (!(this_present_Releated_Bill1 && that_present_Releated_Bill1))
        return false;
      if (!this.Releated_Bill1.equals(that.Releated_Bill1))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_Code = true && (isSetCode());
    list.add(present_Code);
    if (present_Code)
      list.add(Code);

    boolean present_Project_Code = true && (isSetProject_Code());
    list.add(present_Project_Code);
    if (present_Project_Code)
      list.add(Project_Code);

    boolean present_Order_Date = true && (isSetOrder_Date());
    list.add(present_Order_Date);
    if (present_Order_Date)
      list.add(Order_Date);

    boolean present_Vendor_Name = true && (isSetVendor_Name());
    list.add(present_Vendor_Name);
    if (present_Vendor_Name)
      list.add(Vendor_Name);

    boolean present_Apply_Person = true && (isSetApply_Person());
    list.add(present_Apply_Person);
    if (present_Apply_Person)
      list.add(Apply_Person);

    boolean present_Releated_Bill1 = true && (isSetReleated_Bill1());
    list.add(present_Releated_Bill1);
    if (present_Releated_Bill1)
      list.add(Releated_Bill1);

    return list.hashCode();
  }

  @Override
  public int compareTo(ASN other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetCode()).compareTo(other.isSetCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Code, other.Code);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProject_Code()).compareTo(other.isSetProject_Code());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProject_Code()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Project_Code, other.Project_Code);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrder_Date()).compareTo(other.isSetOrder_Date());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrder_Date()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Order_Date, other.Order_Date);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVendor_Name()).compareTo(other.isSetVendor_Name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVendor_Name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Vendor_Name, other.Vendor_Name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetApply_Person()).compareTo(other.isSetApply_Person());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetApply_Person()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Apply_Person, other.Apply_Person);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReleated_Bill1()).compareTo(other.isSetReleated_Bill1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReleated_Bill1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Releated_Bill1, other.Releated_Bill1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ASN(");
    boolean first = true;

    sb.append("Code:");
    if (this.Code == null) {
      sb.append("null");
    } else {
      sb.append(this.Code);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("Project_Code:");
    if (this.Project_Code == null) {
      sb.append("null");
    } else {
      sb.append(this.Project_Code);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("Order_Date:");
    if (this.Order_Date == null) {
      sb.append("null");
    } else {
      sb.append(this.Order_Date);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("Vendor_Name:");
    if (this.Vendor_Name == null) {
      sb.append("null");
    } else {
      sb.append(this.Vendor_Name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("Apply_Person:");
    if (this.Apply_Person == null) {
      sb.append("null");
    } else {
      sb.append(this.Apply_Person);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("Releated_Bill1:");
    if (this.Releated_Bill1 == null) {
      sb.append("null");
    } else {
      sb.append(this.Releated_Bill1);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (Code == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'Code' was not present! Struct: " + toString());
    }
    if (Project_Code == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'Project_Code' was not present! Struct: " + toString());
    }
    if (Order_Date == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'Order_Date' was not present! Struct: " + toString());
    }
    if (Vendor_Name == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'Vendor_Name' was not present! Struct: " + toString());
    }
    if (Apply_Person == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'Apply_Person' was not present! Struct: " + toString());
    }
    if (Releated_Bill1 == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'Releated_Bill1' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ASNStandardSchemeFactory implements SchemeFactory {
    public ASNStandardScheme getScheme() {
      return new ASNStandardScheme();
    }
  }

  private static class ASNStandardScheme extends StandardScheme<ASN> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ASN struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.Code = iprot.readString();
              struct.setCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PROJECT__CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.Project_Code = iprot.readString();
              struct.setProject_CodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ORDER__DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.Order_Date = iprot.readString();
              struct.setOrder_DateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // VENDOR__NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.Vendor_Name = iprot.readString();
              struct.setVendor_NameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // APPLY__PERSON
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.Apply_Person = iprot.readString();
              struct.setApply_PersonIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // RELEATED__BILL1
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.Releated_Bill1 = iprot.readString();
              struct.setReleated_Bill1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ASN struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.Code != null) {
        oprot.writeFieldBegin(CODE_FIELD_DESC);
        oprot.writeString(struct.Code);
        oprot.writeFieldEnd();
      }
      if (struct.Project_Code != null) {
        oprot.writeFieldBegin(PROJECT__CODE_FIELD_DESC);
        oprot.writeString(struct.Project_Code);
        oprot.writeFieldEnd();
      }
      if (struct.Order_Date != null) {
        oprot.writeFieldBegin(ORDER__DATE_FIELD_DESC);
        oprot.writeString(struct.Order_Date);
        oprot.writeFieldEnd();
      }
      if (struct.Vendor_Name != null) {
        oprot.writeFieldBegin(VENDOR__NAME_FIELD_DESC);
        oprot.writeString(struct.Vendor_Name);
        oprot.writeFieldEnd();
      }
      if (struct.Apply_Person != null) {
        oprot.writeFieldBegin(APPLY__PERSON_FIELD_DESC);
        oprot.writeString(struct.Apply_Person);
        oprot.writeFieldEnd();
      }
      if (struct.Releated_Bill1 != null) {
        oprot.writeFieldBegin(RELEATED__BILL1_FIELD_DESC);
        oprot.writeString(struct.Releated_Bill1);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ASNTupleSchemeFactory implements SchemeFactory {
    public ASNTupleScheme getScheme() {
      return new ASNTupleScheme();
    }
  }

  private static class ASNTupleScheme extends TupleScheme<ASN> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ASN struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.Code);
      oprot.writeString(struct.Project_Code);
      oprot.writeString(struct.Order_Date);
      oprot.writeString(struct.Vendor_Name);
      oprot.writeString(struct.Apply_Person);
      oprot.writeString(struct.Releated_Bill1);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ASN struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.Code = iprot.readString();
      struct.setCodeIsSet(true);
      struct.Project_Code = iprot.readString();
      struct.setProject_CodeIsSet(true);
      struct.Order_Date = iprot.readString();
      struct.setOrder_DateIsSet(true);
      struct.Vendor_Name = iprot.readString();
      struct.setVendor_NameIsSet(true);
      struct.Apply_Person = iprot.readString();
      struct.setApply_PersonIsSet(true);
      struct.Releated_Bill1 = iprot.readString();
      struct.setReleated_Bill1IsSet(true);
    }
  }

}

