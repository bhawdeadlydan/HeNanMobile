/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package rfid.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2015-12-20")
public class transportInfo implements org.apache.thrift.TBase<transportInfo, transportInfo._Fields>, java.io.Serializable, Cloneable, Comparable<transportInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("transportInfo");

  private static final org.apache.thrift.protocol.TField TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("Time", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField POSITION_FIELD_DESC = new org.apache.thrift.protocol.TField("Position", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField PERSON_FIELD_DESC = new org.apache.thrift.protocol.TField("Person", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField CONSTRUCT_UNIT_FIELD_DESC = new org.apache.thrift.protocol.TField("ConstructUnit", org.apache.thrift.protocol.TType.STRING, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new transportInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new transportInfoTupleSchemeFactory());
  }

  public String Time; // required
  public String Position; // required
  public String Person; // required
  public String ConstructUnit; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TIME((short)1, "Time"),
    POSITION((short)2, "Position"),
    PERSON((short)3, "Person"),
    CONSTRUCT_UNIT((short)4, "ConstructUnit");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TIME
          return TIME;
        case 2: // POSITION
          return POSITION;
        case 3: // PERSON
          return PERSON;
        case 4: // CONSTRUCT_UNIT
          return CONSTRUCT_UNIT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TIME, new org.apache.thrift.meta_data.FieldMetaData("Time", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.POSITION, new org.apache.thrift.meta_data.FieldMetaData("Position", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PERSON, new org.apache.thrift.meta_data.FieldMetaData("Person", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONSTRUCT_UNIT, new org.apache.thrift.meta_data.FieldMetaData("ConstructUnit", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(transportInfo.class, metaDataMap);
  }

  public transportInfo() {
  }

  public transportInfo(
    String Time,
    String Position,
    String Person,
    String ConstructUnit)
  {
    this();
    this.Time = Time;
    this.Position = Position;
    this.Person = Person;
    this.ConstructUnit = ConstructUnit;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public transportInfo(transportInfo other) {
    if (other.isSetTime()) {
      this.Time = other.Time;
    }
    if (other.isSetPosition()) {
      this.Position = other.Position;
    }
    if (other.isSetPerson()) {
      this.Person = other.Person;
    }
    if (other.isSetConstructUnit()) {
      this.ConstructUnit = other.ConstructUnit;
    }
  }

  public transportInfo deepCopy() {
    return new transportInfo(this);
  }

  @Override
  public void clear() {
    this.Time = null;
    this.Position = null;
    this.Person = null;
    this.ConstructUnit = null;
  }

  public String getTime() {
    return this.Time;
  }

  public transportInfo setTime(String Time) {
    this.Time = Time;
    return this;
  }

  public void unsetTime() {
    this.Time = null;
  }

  /** Returns true if field Time is set (has been assigned a value) and false otherwise */
  public boolean isSetTime() {
    return this.Time != null;
  }

  public void setTimeIsSet(boolean value) {
    if (!value) {
      this.Time = null;
    }
  }

  public String getPosition() {
    return this.Position;
  }

  public transportInfo setPosition(String Position) {
    this.Position = Position;
    return this;
  }

  public void unsetPosition() {
    this.Position = null;
  }

  /** Returns true if field Position is set (has been assigned a value) and false otherwise */
  public boolean isSetPosition() {
    return this.Position != null;
  }

  public void setPositionIsSet(boolean value) {
    if (!value) {
      this.Position = null;
    }
  }

  public String getPerson() {
    return this.Person;
  }

  public transportInfo setPerson(String Person) {
    this.Person = Person;
    return this;
  }

  public void unsetPerson() {
    this.Person = null;
  }

  /** Returns true if field Person is set (has been assigned a value) and false otherwise */
  public boolean isSetPerson() {
    return this.Person != null;
  }

  public void setPersonIsSet(boolean value) {
    if (!value) {
      this.Person = null;
    }
  }

  public String getConstructUnit() {
    return this.ConstructUnit;
  }

  public transportInfo setConstructUnit(String ConstructUnit) {
    this.ConstructUnit = ConstructUnit;
    return this;
  }

  public void unsetConstructUnit() {
    this.ConstructUnit = null;
  }

  /** Returns true if field ConstructUnit is set (has been assigned a value) and false otherwise */
  public boolean isSetConstructUnit() {
    return this.ConstructUnit != null;
  }

  public void setConstructUnitIsSet(boolean value) {
    if (!value) {
      this.ConstructUnit = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TIME:
      if (value == null) {
        unsetTime();
      } else {
        setTime((String)value);
      }
      break;

    case POSITION:
      if (value == null) {
        unsetPosition();
      } else {
        setPosition((String)value);
      }
      break;

    case PERSON:
      if (value == null) {
        unsetPerson();
      } else {
        setPerson((String)value);
      }
      break;

    case CONSTRUCT_UNIT:
      if (value == null) {
        unsetConstructUnit();
      } else {
        setConstructUnit((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TIME:
      return getTime();

    case POSITION:
      return getPosition();

    case PERSON:
      return getPerson();

    case CONSTRUCT_UNIT:
      return getConstructUnit();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TIME:
      return isSetTime();
    case POSITION:
      return isSetPosition();
    case PERSON:
      return isSetPerson();
    case CONSTRUCT_UNIT:
      return isSetConstructUnit();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof transportInfo)
      return this.equals((transportInfo)that);
    return false;
  }

  public boolean equals(transportInfo that) {
    if (that == null)
      return false;

    boolean this_present_Time = true && this.isSetTime();
    boolean that_present_Time = true && that.isSetTime();
    if (this_present_Time || that_present_Time) {
      if (!(this_present_Time && that_present_Time))
        return false;
      if (!this.Time.equals(that.Time))
        return false;
    }

    boolean this_present_Position = true && this.isSetPosition();
    boolean that_present_Position = true && that.isSetPosition();
    if (this_present_Position || that_present_Position) {
      if (!(this_present_Position && that_present_Position))
        return false;
      if (!this.Position.equals(that.Position))
        return false;
    }

    boolean this_present_Person = true && this.isSetPerson();
    boolean that_present_Person = true && that.isSetPerson();
    if (this_present_Person || that_present_Person) {
      if (!(this_present_Person && that_present_Person))
        return false;
      if (!this.Person.equals(that.Person))
        return false;
    }

    boolean this_present_ConstructUnit = true && this.isSetConstructUnit();
    boolean that_present_ConstructUnit = true && that.isSetConstructUnit();
    if (this_present_ConstructUnit || that_present_ConstructUnit) {
      if (!(this_present_ConstructUnit && that_present_ConstructUnit))
        return false;
      if (!this.ConstructUnit.equals(that.ConstructUnit))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_Time = true && (isSetTime());
    list.add(present_Time);
    if (present_Time)
      list.add(Time);

    boolean present_Position = true && (isSetPosition());
    list.add(present_Position);
    if (present_Position)
      list.add(Position);

    boolean present_Person = true && (isSetPerson());
    list.add(present_Person);
    if (present_Person)
      list.add(Person);

    boolean present_ConstructUnit = true && (isSetConstructUnit());
    list.add(present_ConstructUnit);
    if (present_ConstructUnit)
      list.add(ConstructUnit);

    return list.hashCode();
  }

  @Override
  public int compareTo(transportInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetTime()).compareTo(other.isSetTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Time, other.Time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPosition()).compareTo(other.isSetPosition());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPosition()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Position, other.Position);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPerson()).compareTo(other.isSetPerson());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPerson()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Person, other.Person);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetConstructUnit()).compareTo(other.isSetConstructUnit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConstructUnit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ConstructUnit, other.ConstructUnit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("transportInfo(");
    boolean first = true;

    sb.append("Time:");
    if (this.Time == null) {
      sb.append("null");
    } else {
      sb.append(this.Time);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("Position:");
    if (this.Position == null) {
      sb.append("null");
    } else {
      sb.append(this.Position);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("Person:");
    if (this.Person == null) {
      sb.append("null");
    } else {
      sb.append(this.Person);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ConstructUnit:");
    if (this.ConstructUnit == null) {
      sb.append("null");
    } else {
      sb.append(this.ConstructUnit);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    if (Time == null) {
      throw new TProtocolException("Required field 'Time' was not present! Struct: " + toString());
    }
    if (Position == null) {
      throw new TProtocolException("Required field 'Position' was not present! Struct: " + toString());
    }
    if (Person == null) {
      throw new TProtocolException("Required field 'Person' was not present! Struct: " + toString());
    }
    if (ConstructUnit == null) {
      throw new TProtocolException("Required field 'ConstructUnit' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class transportInfoStandardSchemeFactory implements SchemeFactory {
    public transportInfoStandardScheme getScheme() {
      return new transportInfoStandardScheme();
    }
  }

  private static class transportInfoStandardScheme extends StandardScheme<transportInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, transportInfo struct) throws TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.Time = iprot.readString();
              struct.setTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // POSITION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.Position = iprot.readString();
              struct.setPositionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PERSON
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.Person = iprot.readString();
              struct.setPersonIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CONSTRUCT_UNIT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ConstructUnit = iprot.readString();
              struct.setConstructUnitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, transportInfo struct) throws TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.Time != null) {
        oprot.writeFieldBegin(TIME_FIELD_DESC);
        oprot.writeString(struct.Time);
        oprot.writeFieldEnd();
      }
      if (struct.Position != null) {
        oprot.writeFieldBegin(POSITION_FIELD_DESC);
        oprot.writeString(struct.Position);
        oprot.writeFieldEnd();
      }
      if (struct.Person != null) {
        oprot.writeFieldBegin(PERSON_FIELD_DESC);
        oprot.writeString(struct.Person);
        oprot.writeFieldEnd();
      }
      if (struct.ConstructUnit != null) {
        oprot.writeFieldBegin(CONSTRUCT_UNIT_FIELD_DESC);
        oprot.writeString(struct.ConstructUnit);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class transportInfoTupleSchemeFactory implements SchemeFactory {
    public transportInfoTupleScheme getScheme() {
      return new transportInfoTupleScheme();
    }
  }

  private static class transportInfoTupleScheme extends TupleScheme<transportInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, transportInfo struct) throws TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.Time);
      oprot.writeString(struct.Position);
      oprot.writeString(struct.Person);
      oprot.writeString(struct.ConstructUnit);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, transportInfo struct) throws TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.Time = iprot.readString();
      struct.setTimeIsSet(true);
      struct.Position = iprot.readString();
      struct.setPositionIsSet(true);
      struct.Person = iprot.readString();
      struct.setPersonIsSet(true);
      struct.ConstructUnit = iprot.readString();
      struct.setConstructUnitIsSet(true);
    }
  }

}

